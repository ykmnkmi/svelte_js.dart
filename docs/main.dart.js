// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.5.0-edge.ef59500e6f89cff85c73facd227e750d400e3d19.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded. The loadPriority argument is the priority the
//    library should be loaded with as specified in the code via the
//    load-priority annotation (0: normal, 1: high).
// dartDeferredLibraryMultiLoader(uris, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of every URI in `uris`,
//    and call successCallback. If it fails to do so, it should call
//    errorCallback with an error. The loadId argument is the deferred import
//    that resulted in this uri being loaded. The loadPriority argument is the
//    priority the library should be loaded with as specified in the code via
//    the load-priority annotation (0: normal, 1: high).
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key)) {
        to[key] = from[key];
      }
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(Object.getPrototypeOf(object) && Object.getPrototypeOf(object).p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        Object.setPrototypeOf(cls.prototype, sup.prototype);
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++) {
      inherit(classes[i], sup);
    }
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        holder[name] = initializer();
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel) {
          A.throwLateFieldADI(name);
        }
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i) {
      convertToFastObject(arrayOfObjects[i]);
    }
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number") {
      funType += typesOffset;
    }
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_markFixedList(A._setArrayType(new Array($length), $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_markFixedList(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$ax(receiver, a0) {
      if (typeof a0 === "number")
        if (Array.isArray(receiver) || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$ax(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    join$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).join$1(receiver, a0);
    },
    noSuchMethod$1$(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    sublist$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).sublist$1(receiver, a0);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JavaScriptBigInt: function JavaScriptBigInt() {
    },
    JavaScriptSymbol: function JavaScriptSymbol() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  A = {JS_CONST: function JS_CONST() {
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    isToStringVisiting(object) {
      var t1, i;
      for (t1 = $.toStringVisiting.length, i = 0; i < t1; ++i)
        if (object === $.toStringVisiting[i])
          return true;
      return false;
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    Symbol: function Symbol(t0) {
      this._name = t0;
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_safeToString(object) {
      if (object == null || typeof object == "number" || A._isBool(object))
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      if (object instanceof A.Closure)
        return object.toString$0(0);
      if (object instanceof A._Record)
        return object._toString$1(true);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      B.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
        namedArguments.forEach$1(0, new A.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      return J.noSuchMethod$1$($function, new A.JSInvocationMirror(B.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction($function, positionalArguments, namedArguments) {
      var t1, argumentCount, jsStub;
      if (Array.isArray(positionalArguments))
        t1 = namedArguments == null || namedArguments.__js_helper$_length === 0;
      else
        t1 = false;
      if (t1) {
        argumentCount = positionalArguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1(positionalArguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2(positionalArguments[0], positionalArguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3(positionalArguments[0], positionalArguments[1], positionalArguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3], positionalArguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, positionalArguments);
      }
      return A.Primitives__generalApplyFunction($function, positionalArguments, namedArguments);
    },
    Primitives__generalApplyFunction($function, positionalArguments, namedArguments) {
      var defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, maxArguments, missingDefaults, keys, _i, defaultValue, used, key,
        $arguments = Array.isArray(positionalArguments) ? positionalArguments : A.List_List$of(positionalArguments, type$.dynamic),
        argumentCount = $arguments.length,
        requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction == "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (Array.isArray(defaultValues)) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        maxArguments = requiredParameterCount + defaultValues.length;
        if (argumentCount > maxArguments)
          return A.Primitives_functionNoSuchMethod($function, $arguments, null);
        if (argumentCount < maxArguments) {
          missingDefaults = defaultValues.slice(argumentCount - requiredParameterCount);
          if ($arguments === positionalArguments)
            $arguments = A.List_List$of($arguments, type$.dynamic);
          B.JSArray_methods.addAll$1($arguments, missingDefaults);
        }
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if ($arguments === positionalArguments)
          $arguments = A.List_List$of($arguments, type$.dynamic);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            defaultValue = defaultValues[A._asString(keys[_i])];
            if (B.C__Required === defaultValue)
              return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
            B.JSArray_methods.add$1($arguments, defaultValue);
          }
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            key = A._asString(keys[_i]);
            if (namedArguments.containsKey$1(key)) {
              ++used;
              B.JSArray_methods.add$1($arguments, namedArguments.$index(0, key));
            } else {
              defaultValue = defaultValues[key];
              if (B.C__Required === defaultValue)
                return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
              B.JSArray_methods.add$1($arguments, defaultValue);
            }
          }
          if (used !== namedArguments.__js_helper$_length)
            return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    Primitives_extractStackTrace(error) {
      var jsError = error.$thrownJsError;
      if (jsError == null)
        return null;
      return A.getTraceFromException(jsError);
    },
    iae(argument) {
      throw A.wrapException(A.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = J.get$length$asx(indexable);
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, _s5_);
      return new A.RangeError(null, null, true, index, _s5_, "Value not in range");
    },
    diagnoseRangeError(start, end, $length) {
      if (start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      return A.initializeExceptionWrapper(new Error(), ex);
    },
    initializeExceptionWrapper(wrapper, ex) {
      var t1;
      if (ex == null)
        ex = new A.TypeError();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwExpressionWithWrapper(ex, wrapper) {
      throw A.initializeExceptionWrapper(wrapper, ex);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      var t1;
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace) {
        t1 = ex.dartException;
        return A.saveStackTrace(ex, t1 == null ? type$.Object._as(t1) : t1);
      }
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              A.S(message);
              return A.saveStackTrace(ex, new A.NullError());
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else if (nullCall.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefCall.matchTypeError$1(message) != null || undefLiteralCall.matchTypeError$1(message) != null || nullProperty.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefProperty.matchTypeError$1(message) != null || undefLiteralProperty.matchTypeError$1(message) != null) {
            A._asString(message);
            return A.saveStackTrace(ex, new A.NullError());
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, null, null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      trace = new A._StackTrace(exception);
      if (typeof exception === "object")
        exception.$cachedTrace = trace;
      return trace;
    },
    objectHashCode(object) {
      if (object == null)
        return J.get$hashCode$(object);
      if (typeof object == "object")
        return A.Primitives_objectHashCode(object);
      return J.get$hashCode$(object);
    },
    _invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = A.convertDartClosureToJSUncached(closure, arity);
      closure.$identity = $function;
      return $function;
    },
    convertDartClosureToJSUncached(closure, arity) {
      var entry;
      switch (arity) {
        case 0:
          entry = closure.call$0;
          break;
        case 1:
          entry = closure.call$1;
          break;
        case 2:
          entry = closure.call$2;
          break;
        case 3:
          entry = closure.call$3;
          break;
        case 4:
          entry = closure.call$4;
          break;
        default:
          entry = null;
      }
      if (entry != null)
        return entry.bind(closure);
      return function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A._invokeClosure);
    },
    Closure_fromTearOff(parameters) {
      var $name, callName, $function, t1, $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs;
      A.assertHelper(typeof funsOrNames[0] == "string");
      $name = funsOrNames[0];
      callName = callNames[0];
      $function = container[$name];
      t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      $constructor = isStatic ? function static_tear_off() {
        this.$initialize();
      } : function tear_off(a, b) {
        this.$initialize(a, b);
      };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      return A.Closure_cspForwardCall($function.length, needsDirectAccess, stubName, $function);
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var t1, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    boolConversionCheck(value) {
      if (value == null)
        A.assertThrow("boolean expression must not be null");
      return value;
    },
    assertTest(condition) {
      if (true === condition)
        return false;
      if (false === condition)
        return true;
      A._asBool(condition);
      return !condition;
    },
    assertThrow(message) {
      throw A.wrapException(new A._AssertionError(message));
    },
    assertHelper(condition) {
      if (A.assertTest(condition))
        throw A.wrapException(A.AssertionError$(null));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(new A._CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    assertInteropArgs(args) {
      if (A.assertTest(B.JSArray_methods.every$1(args, new A.assertInteropArgs_closure())))
        A.assertThrow("Dart function requires `allowInterop` to be passed to JavaScript.");
    },
    lookupAndCacheInterceptor(obj) {
      var tag, record, interceptor, interceptorClass, altTag, mark, t1;
      A.assertHelper(!(obj instanceof A.Object));
      tag = A._asString($.getTagFunction.call$1(obj));
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (Array.isArray(transformers))
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    createRecordTypePredicate(shape, fieldRtis) {
      var argumentCount,
        $length = fieldRtis.length,
        $function = init.rttc["" + $length + ";" + shape];
      if ($function == null)
        return null;
      if ($length === 0)
        return $function;
      argumentCount = $function.length;
      if ($length === argumentCount)
        return $function.apply(null, fieldRtis);
      A.assertHelper(argumentCount === 1);
      return $function(fieldRtis);
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    _Record_1_tex78t: function _Record_1_tex78t(t0) {
      this._0 = t0;
    },
    _Record_2_color_id: function _Record_2_color_id(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    _Record_2_id_name: function _Record_2_id_name(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2) {
      this._jsIndex = t0;
      this._values = t1;
      this.$ti = t2;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memberName = t0;
      _.__js_helper$_kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError() {
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    _CyclicInitializationError: function _CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    _Required: function _Required() {
    },
    assertInteropArgs_closure: function assertInteropArgs_closure() {
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      this.hashMapCellKey = t0;
      this.hashMapCellValue = t1;
      this._next = null;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _Record: function _Record() {
    },
    _Record2: function _Record2() {
    },
    _Record1: function _Record1() {
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = start > $length;
        else
          t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question;
      A.assertHelper(rti._kind === 6);
      question = rti._precomputed1;
      if (question == null) {
        A.assertHelper(rti._kind === 6);
        question = rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true);
      }
      return question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future;
      A.assertHelper(rti._kind === 8);
      future = rti._precomputed1;
      if (future == null) {
        A.assertHelper(rti._kind === 8);
        future = rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]);
      }
      return future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 12 || kind === 13;
    },
    Rti__getInterfaceTypeArguments(rti) {
      A.assertHelper(rti._kind === 9);
      return rti._rest;
    },
    Rti__getBindingArguments(rti) {
      A.assertHelper(rti._kind === 10);
      return rti._rest;
    },
    Rti__getRecordFields(rti) {
      A.assertHelper(rti._kind === 11);
      return rti._rest;
    },
    Rti__getGenericFunctionBounds(rti) {
      A.assertHelper(rti._kind === 13);
      return rti._rest;
    },
    Rti__getCanonicalRecipe(rti) {
      var s = rti._canonicalRecipe;
      if (A.assertTest(typeof s == "string"))
        A.assertThrow("Missing canonical recipe");
      return s;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    instantiatedGenericFunctionType(genericFunctionRti, instantiationRti) {
      var bounds, typeArguments, cache, s, key, probe, rti;
      if (genericFunctionRti == null)
        return null;
      bounds = A.Rti__getGenericFunctionBounds(genericFunctionRti);
      typeArguments = A.Rti__getInterfaceTypeArguments(instantiationRti);
      A.assertHelper(bounds.length === typeArguments.length);
      cache = genericFunctionRti._bindCache;
      if (cache == null)
        cache = genericFunctionRti._bindCache = new Map();
      s = instantiationRti._canonicalRecipe;
      if (A.assertTest(typeof s == "string"))
        A.assertThrow("Missing canonical recipe");
      key = s;
      probe = cache.get(key);
      if (probe != null)
        return probe;
      A.assertHelper(genericFunctionRti._kind === 13);
      rti = A._substitute(init.typeUniverse, genericFunctionRti._primary, typeArguments, 0);
      cache.set(key, rti);
      return rti;
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, fields, substitutedFields, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        t1 = rti._kind,
        kind = t1;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = A.Rti__getInterfaceTypeArguments(rti);
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          A.assertHelper(rti._kind === 9);
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          A.assertHelper(t1 === 10);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = A.Rti__getBindingArguments(rti);
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          A.assertHelper(t1 === 11);
          t1 = rti._primary;
          fields = A.Rti__getRecordFields(rti);
          substitutedFields = A._substituteArray(universe, fields, typeArguments, depth);
          if (substitutedFields === fields)
            return rti;
          return A._Universe__lookupRecordRti(universe, t1, substitutedFields);
        case 12:
          A.assertHelper(t1 === 12);
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          A.assertHelper(rti._kind === 12);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 13:
          bounds = A.Rti__getGenericFunctionBounds(rti);
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          A.assertHelper(rti._kind === 13);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 14:
          A.assertHelper(t1 === 14);
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var result, changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length;
      A.assertHelper($length % 3 === 0);
      result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      A.assertHelper(rti != null);
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      if (object instanceof A.Object)
        return A._instanceType(object);
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? Object.getPrototypeOf(Object.getPrototypeOf(instance)).constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeTypeOfDartObject(object) {
      return A.createRuntimeType(A._instanceType(object));
    },
    getRuntimeTypeOfClosure(closure) {
      var rti = A.closureFunctionType(closure);
      return A.createRuntimeType(rti == null ? A.instanceType(closure) : rti);
    },
    _structuralTypeOf(object) {
      var functionRti;
      if (object instanceof A._Record)
        return A.evaluateRtiForRecord(object.$recipe, object._getFieldValues$0());
      functionRti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      if (functionRti != null)
        return functionRti;
      if (type$.TrustedGetRuntimeType._is(object))
        return J.get$runtimeType$(object)._rti;
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A.instanceType(object);
    },
    createRuntimeType(rti) {
      var t1 = rti._cachedRuntimeType;
      return t1 == null ? rti._cachedRuntimeType = A._createRuntimeType(rti) : t1;
    },
    _createRuntimeType(rti) {
      var s0, starErasedRecipe, starErasedRti, t1,
        _s24_ = "Missing canonical recipe",
        s = rti._canonicalRecipe;
      if (A.assertTest(typeof s == "string"))
        A.assertThrow(_s24_);
      s0 = rti._canonicalRecipe;
      if (A.assertTest(typeof s0 == "string"))
        A.assertThrow(_s24_);
      starErasedRecipe = s0.replace(/\*/g, "");
      if (starErasedRecipe === s) {
        A.assertHelper(rti._cachedRuntimeType == null);
        return rti._cachedRuntimeType = new A._Type(rti);
      }
      starErasedRti = A._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      t1 = starErasedRti._cachedRuntimeType;
      return t1 == null ? starErasedRti._cachedRuntimeType = A._createRuntimeType(starErasedRti) : t1;
    },
    evaluateRtiForRecord(recordRecipe, valuesList) {
      var bindings, i,
        values = valuesList,
        $length = values.length;
      if ($length === 0)
        return type$.Record_0;
      if (0 >= $length)
        return A.ioore(values, 0);
      bindings = A._Universe_evalInEnvironment(init.typeUniverse, A._structuralTypeOf(values[0]), "@<0>");
      for (i = 1; i < $length; ++i) {
        if (!(i < values.length))
          return A.ioore(values, i);
        bindings = A._Universe_bind(init.typeUniverse, bindings, A._structuralTypeOf(values[i]));
      }
      return A._Universe_evalInEnvironment(init.typeUniverse, bindings, recordRecipe);
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var t1, unstarred, unstarredKind, isFn, $name, predicate, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (!A.isSoundTopType(testRti))
        t1 = testRti === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
      t1 = testRti._kind;
      if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      if (t1 === 1)
        return A._finishIsFn(testRti, object, A._isNever);
      if (t1 === 6) {
        A.assertHelper(t1 === 6);
        unstarred = testRti._primary;
      } else
        unstarred = testRti;
      t1 = unstarred._kind;
      unstarredKind = t1;
      if (unstarredKind === 8)
        return A._finishIsFn(testRti, object, A._isFutureOr);
      if (unstarred === type$.int)
        isFn = A._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
      else if (unstarred === type$.String)
        isFn = A._isString;
      else
        isFn = unstarred === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarredKind === 9) {
        A.assertHelper(t1 === 9);
        $name = unstarred._primary;
        if (A.Rti__getInterfaceTypeArguments(unstarred).every(A.isDefinitelyTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (unstarredKind === 11) {
        A.assertHelper(t1 === 11);
        predicate = A.createRecordTypePredicate(unstarred._primary, A.Rti__getRecordFields(unstarred));
        return A._finishIsFn(testRti, object, predicate == null ? A._isNever : predicate);
      }
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (!A.isSoundTopType(testRti))
        t1 = testRti === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else {
        t1 = A.isNullable(testRti);
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var t2,
        kind = testRti._kind,
        t1 = true;
      if (!A.isSoundTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7) {
              if (kind === 6) {
                A.assertHelper(testRti._kind === 6);
                t2 = A._nullIs(testRti._primary);
              } else
                t2 = false;
              if (!t2) {
                if (kind === 8) {
                  A.assertHelper(testRti._kind === 8);
                  t1 = A._nullIs(testRti._primary);
                } else
                  t1 = false;
                t1 = t1 || testRti === type$.Null || testRti === type$.JSNull;
              }
            }
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      return A.isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), testRti);
    },
    _generalNullableIsTestImplementation(object) {
      var testRti;
      if (object == null)
        return true;
      testRti = this;
      A.assertHelper(testRti._kind === 7);
      return testRti._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var testRti = this;
      if (object == null) {
        if (A.isNullable(testRti))
          return object;
      } else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A._rtiToString(testRti, null))));
    },
    _Error_compose(object, checkedTypeDescription) {
      return A.Error_safeToString(object) + ": type '" + A._rtiToString(A._structuralTypeOf(object), null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, type));
    },
    _isFutureOr(object) {
      var unstarred, testRti = this,
        t1 = testRti._kind;
      if (t1 === 6) {
        A.assertHelper(t1 === 6);
        unstarred = testRti._primary;
      } else
        unstarred = testRti;
      A.assertHelper(unstarred._kind === 8);
      return unstarred._primary._is(object) || A.Rti__getFutureFromFutureOr(init.typeUniverse, unstarred)._is(object);
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isNever(object) {
      return false;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var partialShape, fields, fieldCount, names, namesIndex, s, comma, i;
      A.assertHelper(recordType._kind === 11);
      partialShape = recordType._primary;
      fields = A.Rti__getRecordFields(recordType);
      if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
      fieldCount = fields.length;
      names = partialShape.split(",");
      namesIndex = names.length - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
          s += " " + names[namesIndex];
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ", outerContextLength = null;
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null)
          genericContext = A._setArrayType([], type$.JSArray_String);
        else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (!(t4 >= 0))
            return A.ioore(genericContext, t4);
          typeParametersText = B.JSString_methods.$add(typeParametersText + typeSep, genericContext[t4]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            t3 = boundRti === t2;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else
        typeParametersText = "";
      A.assertHelper(functionType._kind === 12);
      t1 = functionType._primary;
      A.assertHelper(functionType._kind === 12);
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      A.assertHelper(optionalPositionalLength === 0 || namedLength === 0);
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var questionArgument, s, argumentKind, $name, $arguments, t2,
        t1 = rti._kind,
        kind = t1;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        A.assertHelper(t1 === 6);
        return A._rtiToString(rti._primary, genericContext);
      }
      if (kind === 7) {
        A.assertHelper(t1 === 7);
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 12 || argumentKind === 13 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8) {
        A.assertHelper(t1 === 8);
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      }
      if (kind === 9) {
        A.assertHelper(t1 === 9);
        $name = A._unminifyOrTag(rti._primary);
        $arguments = A.Rti__getInterfaceTypeArguments(rti);
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 12)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 13) {
        A.assertHelper(t1 === 13);
        return A._functionRtiToString(rti._primary, genericContext, A.Rti__getGenericFunctionBounds(rti));
      }
      if (kind === 14) {
        genericContext.toString;
        A.assertHelper(t1 === 14);
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var s, argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      s = argumentsRti._canonicalRecipe;
      if (A.assertTest(typeof s == "string"))
        A.assertThrow("Missing canonical recipe");
      argumentsRecipe = s;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? A.Rti__getBindingArguments(argumentsRti) : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var key, probe, t1,
        s = baseType._canonicalRecipe;
      if (A.assertTest(typeof s == "string"))
        A.assertThrow("Missing canonical recipe");
      key = s + "*";
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isSoundTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var key, probe, t1,
        s = baseType._canonicalRecipe;
      if (A.assertTest(typeof s == "string"))
        A.assertThrow("Missing canonical recipe");
      key = s + "?";
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        t1 = true;
        if (!A.isSoundTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              if (baseKind === 8) {
                A.assertHelper(baseType._kind === 8);
                t1 = A.isNullable(baseType._primary);
              } else
                t1 = false;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          A.assertHelper(baseType._kind === 6);
          starArgument = baseType._primary;
          t1 = starArgument._kind;
          if (t1 === 8) {
            A.assertHelper(t1 === 8);
            t1 = A.isNullable(starArgument._primary);
          } else
            t1 = false;
          if (t1)
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var key, probe, t1,
        s = baseType._canonicalRecipe;
      if (A.assertTest(typeof s == "string"))
        A.assertThrow("Missing canonical recipe");
      key = s + "/";
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (A.isSoundTopType(baseType) || baseType === type$.Object || baseType === type$.legacy_Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 14;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i, s0,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",") {
        s0 = $arguments[i]._canonicalRecipe;
        if (A.assertTest(typeof s0 == "string"))
          A.assertThrow("Missing canonical recipe");
        s += sep + s0;
      }
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep, s0,
        $length = $arguments.length;
      A.assertHelper($length % 3 === 0);
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s0 = $arguments[i + 2]._canonicalRecipe;
        if (A.assertTest(typeof s0 == "string"))
          A.assertThrow("Missing canonical recipe");
        s += sep + t1 + nameSep + s0;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var s, probe, rti, t1;
      A.assertHelper(typeof $name == "string");
      s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, s, key, probe, rti,
        t1 = base._kind;
      if (t1 === 10) {
        A.assertHelper(t1 === 10);
        newBase = base._primary;
        newArguments = A.Rti__getBindingArguments(base).concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      s = newBase._canonicalRecipe;
      if (A.assertTest(typeof s == "string"))
        A.assertThrow("Missing canonical recipe");
      key = s + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = partialShapeTag;
      rti._rest = fields;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, recipe, sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe;
      if (A.assertTest(typeof s == "string"))
        A.assertThrow("Missing canonical recipe");
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      A.assertHelper(optionalPositionalLength === 0 || namedLength === 0);
      recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var key, probe, t1,
        s = baseFunctionType._canonicalRecipe;
      if (A.assertTest(typeof s == "string"))
        A.assertThrow("Missing canonical recipe");
      key = s + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, t4, array, end, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t3 = parser.u;
              t4 = t1.pop();
              A.assertHelper(typeof t4 == "number");
              t1.push(A._Universe__lookupGenericFunctionParameterRti(t3, t4));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              A._Parser_handleTypeArguments(parser, t1);
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(-3);
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              A._Parser_handleArguments(parser, t1);
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            case 43:
              end = source.indexOf("(", i);
              A.assertHelper(end >= 0);
              t1.push(source.substring(i, end));
              t1.push(-4);
              t1.push(parser.p);
              parser.p = t1.length;
              i = end + 1;
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, rule, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        t2 = environment._kind;
        if (t2 === 10) {
          A.assertHelper(t2 === 10);
          environment = environment._primary;
        }
        A.assertHelper(environment._kind === 9);
        rule = A._Universe_findRule(t1, environment._primary);
        A.assertHelper(rule != null);
        recipe = rule[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleTypeArguments(parser, stack) {
      var base,
        t1 = parser.u,
        $arguments = A._Parser_collectArray(parser, stack),
        head = stack.pop();
      if (typeof head == "string")
        stack.push(A._Universe__lookupInterfaceRti(t1, head, $arguments));
      else {
        base = A._Parser_toType(t1, parser.e, head);
        switch (base._kind) {
          case 12:
            stack.push(A._Universe__lookupGenericFunctionRti(t1, base, $arguments, parser.n));
            break;
          default:
            stack.push(A._Universe__lookupBindingRti(t1, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleArguments(parser, stack) {
      var requiredPositional, returnType, parameters,
        t1 = parser.u,
        head = stack.pop(),
        optionalPositional = null, named = null;
      if (typeof head == "number")
        switch (head) {
          case -1:
            optionalPositional = stack.pop();
            break;
          case -2:
            named = stack.pop();
            break;
          default:
            stack.push(head);
            break;
        }
      else
        stack.push(head);
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = stack.pop();
      switch (head) {
        case -3:
          head = stack.pop();
          if (optionalPositional == null)
            optionalPositional = t1.sEA;
          if (named == null)
            named = t1.sEA;
          returnType = A._Parser_toType(t1, parser.e, head);
          parameters = new A._FunctionParameters();
          parameters._requiredPositional = requiredPositional;
          parameters._optionalPositional = optionalPositional;
          parameters._named = named;
          stack.push(A._Universe__lookupFunctionRti(t1, returnType, parameters));
          return;
        case -4:
          A.assertHelper(optionalPositional == null);
          A.assertHelper(named == null);
          head = stack.pop();
          A.assertHelper(typeof head == "string");
          stack.push(A._Universe__lookupRecordRti(t1, head, requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = stack.splice(parser.p);
      A._Parser_toTypes(parser.u, parser.e, array);
      parser.p = stack.pop();
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
      } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      A.assertHelper($length % 3 === 0);
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        t1 = environment._kind,
        kind = t1;
      if (kind === 10) {
        if (index === 0) {
          A.assertHelper(t1 === 10);
          return environment._primary;
        }
        typeArguments = A.Rti__getBindingArguments(environment);
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        A.assertHelper(t1 === 10);
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = A.Rti__getInterfaceTypeArguments(environment);
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    isSubtype(universe, s, t) {
      var result,
        sCache = s._isSubtypeCache;
      if (sCache == null)
        sCache = s._isSubtypeCache = new Map();
      result = sCache.get(t);
      if (result == null) {
        result = A._isSubtype(universe, s, null, t, null, false) ? 1 : 0;
        sCache.set(t, result);
      }
      if (0 === result)
        return false;
      if (1 === result)
        return true;
      return true;
    },
    _isSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var t1, sKind, leftTypeVariable, tKind, t2, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!A.isSoundTopType(t))
        t1 = t === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isSoundTopType(s))
        return false;
      t1 = s._kind;
      if (t1 === 1)
        return true;
      leftTypeVariable = sKind === 14;
      if (leftTypeVariable) {
        A.assertHelper(t1 === 14);
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv, false))
          return true;
      }
      t1 = t._kind;
      tKind = t1;
      t2 = s === type$.Null || s === type$.JSNull;
      if (t2) {
        if (tKind === 8) {
          A.assertHelper(t1 === 8);
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv, false);
        }
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8) {
          A.assertHelper(s._kind === 8);
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
        }
        if (sKind === 6) {
          A.assertHelper(s._kind === 6);
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
        }
        return sKind !== 7;
      }
      if (sKind === 6) {
        A.assertHelper(s._kind === 6);
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
      }
      if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv, false);
      }
      if (sKind === 8) {
        A.assertHelper(s._kind === 8);
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv, false))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv, false);
      }
      if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv, false);
        if (t1) {
          A.assertHelper(s._kind === 7);
          t1 = A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
        } else
          t1 = false;
        return t1;
      }
      if (tKind === 8) {
        A.assertHelper(t1 === 8);
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv, false))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv, false);
      }
      if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv, false);
        if (!t1) {
          A.assertHelper(t._kind === 7);
          t1 = A._isSubtype(universe, s, sEnv, t._primary, tEnv, false);
        } else
          t1 = true;
        return t1;
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 12;
      if ((!t1 || sKind === 13) && t === type$.Function)
        return true;
      t2 = sKind === 11;
      if (t2 && t === type$.Record)
        return true;
      if (tKind === 13) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 13)
          return false;
        sBounds = A.Rti__getGenericFunctionBounds(s);
        tBounds = A.Rti__getGenericFunctionBounds(t);
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv, false) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv, false))
            return false;
        }
        A.assertHelper(s._kind === 13);
        t1 = s._primary;
        A.assertHelper(t._kind === 13);
        return A._isFunctionSubtype(universe, t1, sEnv, t._primary, tEnv, false);
      }
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv, false);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv, false);
      }
      if (t2 && tKind === 11)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv, false);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var t1, sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      A.assertHelper(s._kind === 12);
      A.assertHelper(t._kind === 12);
      A.assertHelper(s._kind === 12);
      t1 = s._primary;
      A.assertHelper(t._kind === 12);
      if (!A._isSubtype(universe, t1, sEnv, t._primary, tEnv, false))
        return false;
      A.assertHelper(s._kind === 12);
      sParameters = s._rest;
      A.assertHelper(t._kind === 12);
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv, false))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv, false))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv, false))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv, false))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var sName, tName, t1, rule, recipes, $length, supertypeArgs, i;
      A.assertHelper(s._kind === 9);
      sName = s._primary;
      A.assertHelper(t._kind === 9);
      tName = t._primary;
      for (; t1 = sName === tName, !t1;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        A.assertHelper(t._kind === 9);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv, false);
      }
      A.assertHelper(t1);
      return A._areArgumentsSubtypes(universe, A.Rti__getInterfaceTypeArguments(s), null, sEnv, A.Rti__getInterfaceTypeArguments(t), tEnv, false);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv, isLegacy) {
      var i,
        $length = sArgs.length;
      A.assertHelper($length === tArgs.length);
      for (i = 0; i < $length; ++i)
        if (!A._isSubtype(universe, sArgs[i], sEnv, tArgs[i], tEnv, false))
          return false;
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var t1, i,
        sFields = A.Rti__getRecordFields(s),
        tFields = A.Rti__getRecordFields(t),
        sCount = sFields.length;
      if (sCount !== tFields.length)
        return false;
      A.assertHelper(s._kind === 11);
      t1 = s._primary;
      A.assertHelper(t._kind === 11);
      if (t1 !== t._primary)
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv, false))
          return false;
      return true;
    },
    isNullable(t) {
      var t2,
        kind = t._kind,
        t1 = true;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isSoundTopType(t))
          if (kind !== 7) {
            if (kind === 6) {
              A.assertHelper(t._kind === 6);
              t2 = A.isNullable(t._primary);
            } else
              t2 = false;
            if (!t2)
              if (kind === 8) {
                A.assertHelper(t._kind === 8);
                t1 = A.isNullable(t._primary);
              } else
                t1 = false;
          }
      return t1;
    },
    isDefinitelyTopType(t) {
      var t1;
      if (!A.isSoundTopType(t))
        t1 = t === type$.legacy_Object;
      else
        t1 = true;
      return t1;
    },
    isSoundTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._isSubtypeCache = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      type$.void_Function._as(callback);
      A._TimerImpl$(0, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (object instanceof A._Future)
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true) {
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
          }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    AsyncError$(error, stackTrace) {
      var t1 = A.checkNotNullable(error, "error", type$.Object);
      return new A.AsyncError(t1, stackTrace == null ? A.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B.C__StringStackTrace;
    },
    _Future__chainCoreFutureSync(source, target) {
      var t1, t2, t3, listeners;
      A.assertHelper(target._state <= 3);
      for (t1 = type$._Future_dynamic; t2 = source._state, t3 = (t2 & 4) !== 0, t3;) {
        A.assertHelper(t3);
        source = t1._as(source._resultOrListeners);
      }
      if (source === target) {
        target._asyncCompleteError$2(new A.ArgumentError(true, source, null, "Cannot complete a future with itself"), A.StackTrace_current());
        return;
      }
      t1 = t2 | target._state & 1;
      source._state = t1;
      if ((t1 & 24) !== 0) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        A._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(source);
        source._prependListeners$1(listeners);
      }
    },
    _Future__chainCoreFutureAsync(source, target) {
      var t2, t3, t4, listeners, _box_0 = {},
        t1 = _box_0.source = source;
      A.assertHelper(target._state <= 3);
      for (t2 = type$._Future_dynamic; t3 = t1._state, t4 = (t3 & 4) !== 0, t4; t1 = source) {
        A.assertHelper(t4);
        source = t2._as(t1._resultOrListeners);
        _box_0.source = source;
      }
      if (t1 === target) {
        target._asyncCompleteError$2(new A.ArgumentError(true, t1, null, "Cannot complete a future with itself"), A.StackTrace_current());
        return;
      }
      if ((t3 & 24) === 0) {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(t1);
        _box_0.source._prependListeners$1(listeners);
        return;
      }
      if ((t3 & 16) === 0 && target._resultOrListeners == null) {
        target._cloneResult$1(t1);
        return;
      }
      target._setPendingComplete$0();
      A._rootScheduleMicrotask(null, null, target._zone, type$.void_Function._as(new A._Future__chainCoreFutureAsync_closure(_box_0, target)));
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, t4, _box_0, t5, t6, hasError, asyncError, nextListener, nextListener0, sourceResult, t7, zone, previous, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        A.assertHelper((t1._state & 24) !== 0);
        t1 = _box_1.source;
        t5 = t1._state;
        t6 = (t5 & 16) === 0;
        hasError = !t6;
        if (listeners == null) {
          if (hasError && (t5 & 1) === 0) {
            A.assertHelper(hasError);
            asyncError = t2._as(t1._resultOrListeners);
            A._rootHandleError(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t1 = t5._zone === zone;
            t1 = !(t1 || t1);
          } else
            t1 = false;
          if (t1) {
            A.assertHelper((t5._state & 16) !== 0);
            asyncError = t2._as(t5._resultOrListeners);
            A._rootHandleError(asyncError.error, asyncError.stackTrace);
            return;
          }
          t1 = $.Zone__current;
          if (t1 !== zone) {
            A.assertHelper(zone !== t1);
            previous = $.Zone__current;
            $.Zone__current = zone;
            oldZone = previous;
          } else
            oldZone = null;
          t1 = _box_0.listener.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t1 instanceof A._Future) {
            t5 = _box_0.listener.$ti;
            t5 = t5._eval$1("Future<2>")._is(t1) || !t5._rest[1]._is(t1);
          } else
            t5 = false;
          if (t5) {
            t4._as(t1);
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
              A.assertHelper((result._state & 24) === 0);
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._cloneResult$1(t1);
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFutureSync(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        A.assertHelper((result._state & 24) === 0);
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        t6 = result._state & 24;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          A.assertHelper(t6 === 0);
          result._state = 8;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          A.assertHelper(t6 === 0);
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      var t1;
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      t1 = type$.dynamic_Function_Object;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      A._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(currentZone.bindCallbackGuarded$1(callback)));
    },
    StreamIterator_StreamIterator(stream, $T) {
      A.checkNotNullable(stream, "stream", type$.Object);
      return new A._StreamIterator($T._eval$1("_StreamIterator<0>"));
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old, previous,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      A.assertHelper(zone !== t1);
      previous = $.Zone__current;
      $.Zone__current = zone;
      old = previous;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old, previous,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      A.assertHelper(zone !== t1);
      previous = $.Zone__current;
      $.Zone__current = zone;
      old = previous;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, previous,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      A.assertHelper(zone !== t1);
      previous = $.Zone__current;
      $.Zone__current = zone;
      old = previous;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      type$.void_Function._as(f);
      if (B.C__RootZone !== zone)
        f = zone.bindCallbackGuarded$1(f);
      A._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__chainCoreFutureAsync_closure: function _Future__chainCoreFutureAsync_closure(t0, t1) {
      this._box_0 = t0;
      this.target = t1;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    _StreamIterator: function _StreamIterator(t0) {
      this.$ti = t0;
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A.isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        B.JSArray_methods.add$1($.toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        A.assertHelper(B.JSArray_methods.get$last($.toStringVisiting) === m);
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    ListBase: function ListBase() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    Error__throw(error, stackTrace) {
      error = A.wrapException(error);
      if (error == null)
        error = type$.Object._as(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
      throw A.wrapException("unreachable");
    },
    List_List$filled($length, fill, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0)
        for (i = 0; i < $length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      if (growable)
        return list;
      return J.JSArray_markFixedList(list, $E);
    },
    List_List$of(elements, $E) {
      var t1 = A.List_List$_of(elements, $E);
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    List_List$generate($length, generator, $E) {
      var i,
        result = J.JSArray_JSArray$growable($length, $E);
      for (i = 0; i < $length; ++i)
        B.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current());
      }
      return string;
    },
    NoSuchMethodError_NoSuchMethodError$withInvocation(receiver, invocation) {
      return new A.NoSuchMethodError(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments());
    },
    StackTrace_current() {
      return A.getTraceFromException(new Error());
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Primitives_safeToString(object);
    },
    Error_throwWithStackTrace(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      A.checkNotNullable(stackTrace, "stackTrace", type$.StackTrace);
      A.Error__throw(error, stackTrace);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$withLength(invalidValue, $length, indexable, $name) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new A._Exception(message);
    },
    Iterable_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A.isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        A.assertHelper(B.JSArray_methods.get$last($.toStringVisiting) === iterable);
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Iterable_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A.isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        A.assertHelper(B.JSArray_methods.get$last($.toStringVisiting) === iterable);
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          A.assertHelper(count < 100);
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    Object_hash(object1, object2, object3, object4) {
      var t1;
      if (B.C_SentinelValue === object3) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      if (B.C_SentinelValue === object4) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3));
      }
      t1 = J.get$hashCode$(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      object4 = J.get$hashCode$(object4);
      object4 = A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4));
      return object4;
    },
    print(object) {
      A.printString(A.S(object));
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._core$_memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    StackOverflowError: function StackOverflowError() {
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    Iterable: function Iterable() {
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    JSStringToString_get_toDart(_this) {
      return _this;
    },
    FutureOfJSAnyToJSPromise_get_toJS(_this, $T) {
      return type$.JSObject._as(new self.Promise(type$.JavaScriptFunction._as(A.allowInterop(new A.FutureOfJSAnyToJSPromise_get_toJS_closure(_this), type$.Function))));
    },
    FutureOfJSAnyToJSPromise_get_toJS_closure: function FutureOfJSAnyToJSPromise_get_toJS_closure(t0) {
      this._this = t0;
    },
    FutureOfJSAnyToJSPromise_get_toJS__closure: function FutureOfJSAnyToJSPromise_get_toJS__closure(t0) {
      this.resolve = t0;
    },
    FutureOfJSAnyToJSPromise_get_toJS__closure0: function FutureOfJSAnyToJSPromise_get_toJS__closure0(t0) {
      this.reject = t0;
    },
    _convertDartFunctionFast(f) {
      var ret,
        existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(A._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast(callback, $arguments) {
      type$.List_dynamic._as($arguments);
      type$.Function._as(callback);
      return A.Primitives_applyFunction(callback, $arguments, null);
    },
    allowInterop(f, $F) {
      if (typeof f == "function")
        return f;
      else
        return $F._as(A._convertDartFunctionFast(f));
    },
    callMethod(o, method, args, $T) {
      A.assertInteropArgs(args);
      return $T._as(o[method].apply(o, args));
    },
    callConstructor(constr, $arguments, $T) {
      var args, factoryFunction;
      if ($arguments == null)
        return $T._as(new constr());
      else
        A.assertInteropArgs($arguments);
      if ($arguments instanceof Array)
        switch ($arguments.length) {
          case 0:
            return $T._as(new constr());
          case 1:
            return $T._as(new constr($arguments[0]));
          case 2:
            return $T._as(new constr($arguments[0], $arguments[1]));
          case 3:
            return $T._as(new constr($arguments[0], $arguments[1], $arguments[2]));
          case 4:
            return $T._as(new constr($arguments[0], $arguments[1], $arguments[2], $arguments[3]));
        }
      args = [null];
      B.JSArray_methods.addAll$1(args, $arguments);
      factoryFunction = constr.bind.apply(constr, args);
      String(factoryFunction);
      return $T._as(new factoryFunction());
    },
    promiseToFuture(jsPromise, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      jsPromise.then(A.convertDartClosureToJS(new A.promiseToFuture_closure(completer, $T), 1), A.convertDartClosureToJS(new A.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    NullRejectionException: function NullRejectionException(t0) {
      this.isUndefined = t0;
    },
    JSListOfNum_get_toJS(_this) {
      return _this;
    },
    JSArrayOfJSString_get_toDart(_this) {
      return A.List_List$generate(A._asInt(_this.length), new A.JSArrayOfJSString_get_toDart_generator(_this), type$.String);
    },
    JSListOfString_get_toJS(_this) {
      return _this;
    },
    JSArrayOfJSString_get_toDart_generator: function JSArrayOfJSString_get_toDart_generator(t0) {
      this._this = t0;
    },
    awaitBlock(anchor, input, onPending, onValue, onError, $T) {
      var t1 = type$.Function,
        t2 = type$.JavaScriptFunction,
        jsOnValue = t2._as(A.allowInterop(new A.awaitBlock_closure(onValue), t1)),
        jsOnError = t2._as(A.allowInterop(new A.awaitBlock_closure0(onError), t1)),
        t3 = self.$$,
        t4 = t2._as(A.allowInterop(new A.awaitBlock_jsInput(input, $T), t1));
      t1 = t2._as(A.allowInterop(onPending, t1));
      A.callMethod(t3, "await_block", [anchor, t4, t1, jsOnValue, jsOnError], type$.void);
    },
    awaitBlock_jsInput: function awaitBlock_jsInput(t0, t1) {
      this.input = t0;
      this.T = t1;
    },
    awaitBlock_closure: function awaitBlock_closure(t0) {
      this.onValue = t0;
    },
    awaitBlock_closure0: function awaitBlock_closure0(t0) {
      this.onError = t0;
    },
    index(item, index, $T) {
      $T._as(item);
      return "" + index;
    },
    eachBlock(anchor, flags, collection, key, render, $T) {
      var t1 = self.$$,
        t2 = type$.Function,
        t3 = type$.JavaScriptFunction,
        t4 = t3._as(A.allowInterop(new A.eachBlock_jsCollection(collection, $T), t2)),
        t5 = t3._as(A.allowInterop(new A.eachBlock_jsKey(key), t2));
      t2 = t3._as(A.allowInterop(render, t2));
      A.callMethod(t1, "each", [anchor, flags, t4, t5, t2, null], type$.void);
    },
    eachBlock_jsCollection: function eachBlock_jsCollection(t0, t1) {
      this.collection = t0;
      this.T = t1;
    },
    eachBlock_jsKey: function eachBlock_jsKey(t0) {
      this.key = t0;
    },
    bindInt(input, getValue, update) {
      var t1 = type$.Function,
        t2 = type$.JavaScriptFunction;
      self.$$.bind_value(input, t2._as(A.allowInterop(getValue, t1)), t2._as(A.allowInterop(update, t1)));
    },
    bindIntGroup(inputs, groupIndex, input, getValue, update) {
      var t1 = type$.Function,
        t2 = type$.JavaScriptFunction;
      A.callMethod(self.$$, "bind_group", [inputs, A.JSListOfNum_get_toJS(groupIndex), input, t2._as(A.allowInterop(getValue, t1)), t2._as(A.allowInterop(update, t1))], type$.void);
    },
    bindStringGroup(inputs, groupIndex, input, getValue, update) {
      var jsGroupIndex = A.JSListOfNum_get_toJS(groupIndex),
        t1 = type$.Function,
        t2 = type$.JavaScriptFunction;
      A.callMethod(self.$$, "bind_group", [inputs, jsGroupIndex, input, t2._as(A.allowInterop(new A.bindStringGroup_jsGetValue(getValue), t1)), t2._as(A.allowInterop(new A.bindStringGroup_jsUpdate(update), t1))], type$.void);
    },
    bindStringGroup_jsGetValue: function bindStringGroup_jsGetValue(t0) {
      this.getValue = t0;
    },
    bindStringGroup_jsUpdate: function bindStringGroup_jsUpdate(t0) {
      this.update = t0;
    },
    once(handler, $T) {
      var t1 = {};
      t1.ran = false;
      return new A.once_closure(t1, handler, $T);
    },
    once_closure: function once_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.handler = t1;
      this.T = t2;
    },
    property(properties, key, $T) {
      return new A.property_closure(type$.JavaScriptFunction._as(self.$$.prop(properties, key)), $T);
    },
    propertyWithDefault(properties, key, flags, fallback, $T) {
      return new A.propertyWithDefault_closure(type$.JavaScriptFunction._as(self.$$.prop(properties, key, flags, A.ref(fallback))), $T);
    },
    property_closure: function property_closure(t0, t1) {
      this.jsFunction = t0;
      this.T = t1;
    },
    propertyWithDefault_closure: function propertyWithDefault_closure(t0, t1) {
      this.jsFunction = t0;
      this.T = t1;
    },
    createEventDispatcher() {
      return new A.createEventDispatcher_closure(type$.JavaScriptFunction._as(self.$$.createEventDispatcher()));
    },
    createEventDispatcher_closure: function createEventDispatcher_closure(t0) {
      this.jsFunction = t0;
    },
    App($$$anchor, $$$properties) {
      var point, div, t2, text,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      point = A.mutableSource(A._setArrayType([0, 0], type$.JSArray_int), type$.List_int);
      div = t1._as($.$get$_root13().call());
      A.assertHelper(A._asString(div.nodeName) === "DIV");
      t2 = self;
      text = t1._as(t2.$$.child(div));
      A.assertHelper(A._asString(text.nodeName) === "#text");
      t1._as(t2.$$.template_effect(type$.JavaScriptFunction._as(A.allowInterop(new A.App_closure31(text, point), type$.Function))));
      A.event("mousemove", div, new A.App_handleMousemove(point), false, t1);
      t2.$$.append($$$anchor, div);
      t2.$$.append_styles(null, "svelte-1c44y5p", string$.x09div_s);
    },
    App_handleMousemove: function App_handleMousemove(t0) {
      this.point = t0;
    },
    App_closure31: function App_closure31(t0, t1) {
      this.text = t0;
      this.point = t1;
    },
    App0($$$anchor, $$$properties) {
      var user, t2, fragment, t3, node, node1,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      user = A.mutableSource(new A.User0(false), type$.User);
      t2 = new A.App_toggle0(user);
      fragment = t1._as($.$get$_root23().call());
      t3 = self;
      node = t1._as(t3.$$.first_child(fragment));
      A.assertHelper(A._asString(node.nodeName) === "#comment");
      A.ifBlock(node, new A.App_closure51(user), new A.App_closure52(t2), null, false);
      node1 = t1._as(t3.$$.sibling(t1._as(t3.$$.sibling(node)), true));
      A.assertHelper(A._asString(node1.nodeName) === "#comment");
      A.ifBlock(node1, new A.App_closure53(user), new A.App_closure54(t2), null, false);
      t3.$$.append($$$anchor, fragment);
    },
    App_toggle0: function App_toggle0(t0) {
      this.user = t0;
    },
    App_closure51: function App_closure51(t0) {
      this.user = t0;
    },
    App_closure52: function App_closure52(t0) {
      this.toggle = t0;
    },
    App__closure15: function App__closure15(t0) {
      this.toggle = t0;
    },
    App_closure53: function App_closure53(t0) {
      this.user = t0;
    },
    App_closure54: function App_closure54(t0) {
      this.toggle = t0;
    },
    App__closure14: function App__closure14(t0) {
      this.toggle = t0;
    },
    App1($$$anchor, $$$properties) {
      var count, button, t2, text,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      count = A.mutableSource(0, type$.int);
      button = t1._as($.$get$_root33().call());
      A.assertHelper(A._asString(button.nodeName) === "BUTTON");
      t2 = self;
      text = t1._as(t2.$$.child(button));
      A.assertHelper(A._asString(text.nodeName) === "#text");
      t1._as(t2.$$.template_effect(type$.JavaScriptFunction._as(A.allowInterop(new A.App_closure65(text, count), type$.Function))));
      A.event("click", button, new A.App_closure66(new A.App_handleClick5(count)), false, t1);
      t2.$$.append($$$anchor, button);
    },
    App_handleClick5: function App_handleClick5(t0) {
      this.count = t0;
    },
    App_closure65: function App_closure65(t0, t1) {
      this.text = t0;
      this.count = t1;
    },
    App_closure66: function App_closure66(t0) {
      this.handleClick = t0;
    },
    App2($$$anchor, $$properties) {
      var $name, fragment, t2, input, p, text, t3, t4,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$properties);
      $name = A.mutableSource("", type$.String);
      fragment = t1._as($.$get$_root6().call());
      t2 = self;
      input = t1._as(t2.$$.first_child(fragment));
      t2.$$.remove_input_attr_defaults(input);
      p = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(input, true))));
      A.assertHelper(A._asString(p.nodeName) === "P");
      text = t1._as(t2.$$.child(p));
      A.assertHelper(A._asString(text.nodeName) === "#text");
      t3 = type$.Function;
      t4 = type$.JavaScriptFunction;
      t1._as(t2.$$.template_effect(t4._as(A.allowInterop(new A.App_closure25(text, $name), t3))));
      t2.$$.bind_value(input, t4._as(A.allowInterop(new A.App_closure26($name), t3)), t4._as(A.allowInterop(new A.App_closure27($name), t3)));
      t2.$$.append($$$anchor, fragment);
    },
    App_closure25: function App_closure25(t0, t1) {
      this.text = t0;
      this.name = t1;
    },
    App_closure26: function App_closure26(t0) {
      this.name = t0;
    },
    App_closure27: function App_closure27(t0) {
      this.name = t0;
    },
    App3($$$anchor, $$$properties) {
      var user, t2, t3, fragment, node,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      user = A.mutableSource(new A.User(false), type$.User_2);
      t2 = new A.App_toggle(user);
      t3 = self;
      fragment = t1._as(t3.$$.comment());
      node = t1._as(t3.$$.first_child(fragment));
      A.assertHelper(A._asString(node.nodeName) === "#text");
      A.ifBlock(node, new A.App_closure48(user), new A.App_closure49(t2), new A.App_closure50(t2), false);
      t3.$$.append($$$anchor, fragment);
    },
    App_toggle: function App_toggle(t0) {
      this.user = t0;
    },
    App_closure48: function App_closure48(t0) {
      this.user = t0;
    },
    App_closure49: function App_closure49(t0) {
      this.toggle = t0;
    },
    App__closure13: function App__closure13(t0) {
      this.toggle = t0;
    },
    App_closure50: function App_closure50(t0) {
      this.toggle = t0;
    },
    App__closure12: function App__closure12(t0) {
      this.toggle = t0;
    },
    App4($$$anchor, $$$properties) {
      var point, div, t2, text,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      point = A.mutableSource(A._setArrayType([0, 0], type$.JSArray_int), type$.List_int);
      div = t1._as($.$get$_root12().call());
      A.assertHelper(A._asString(div.nodeName) === "DIV");
      t2 = self;
      text = t1._as(t2.$$.child(div));
      A.assertHelper(A._asString(text.nodeName) === "#text");
      t1._as(t2.$$.template_effect(type$.JavaScriptFunction._as(A.allowInterop(new A.App_closure29(text, point), type$.Function))));
      A.event("mousemove", div, new A.App_closure30(point), false, t1);
      t2.$$.append($$$anchor, div);
      t2.$$.append_styles(null, "svelte-1c44y5p", string$.x09div_s);
    },
    App_closure29: function App_closure29(t0, t1) {
      this.text = t0;
      this.point = t1;
    },
    App_closure30: function App_closure30(t0) {
      this.point = t0;
    },
    App5($$$anchor, $$$properties) {
      var t2, a, b, fragment, label, input, input1, label1, input2, input3, p, text,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      t2 = type$.int;
      a = A.mutableSource(1, t2);
      b = A.mutableSource(2, t2);
      fragment = t1._as($.$get$_root3().call());
      t2 = self;
      label = t1._as(t2.$$.first_child(fragment));
      A.assertHelper(A._asString(label.nodeName) === "LABEL");
      input = t1._as(t2.$$.child(label));
      A.assertHelper(A._asString(input.nodeName) === "INPUT");
      t2.$$.remove_input_attr_defaults(input);
      input1 = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(input, true))));
      A.assertHelper(A._asString(input1.nodeName) === "INPUT");
      t2.$$.remove_input_attr_defaults(input1);
      label1 = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(label, true))));
      A.assertHelper(A._asString(label1.nodeName) === "LABEL");
      input2 = t1._as(t2.$$.child(label1));
      A.assertHelper(A._asString(input2.nodeName) === "INPUT");
      t2.$$.remove_input_attr_defaults(input2);
      input3 = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(input2, true))));
      A.assertHelper(A._asString(input3.nodeName) === "INPUT");
      t2.$$.remove_input_attr_defaults(input3);
      p = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(label1, true))));
      A.assertHelper(A._asString(p.nodeName) === "P");
      text = t1._as(t2.$$.child(p));
      A.assertHelper(A._asString(text.nodeName) === "#text");
      t1._as(t2.$$.template_effect(type$.JavaScriptFunction._as(A.allowInterop(new A.App_closure16(text, a, b), type$.Function))));
      A.bindInt(input, new A.App_closure17(a), new A.App_closure18(a));
      A.bindInt(input1, new A.App_closure19(a), new A.App_closure20(a));
      A.bindInt(input2, new A.App_closure21(b), new A.App_closure22(b));
      A.bindInt(input3, new A.App_closure23(b), new A.App_closure24(b));
      t2.$$.append($$$anchor, fragment);
    },
    App_closure16: function App_closure16(t0, t1, t2) {
      this.text = t0;
      this.a = t1;
      this.b = t2;
    },
    App_closure17: function App_closure17(t0) {
      this.a = t0;
    },
    App_closure18: function App_closure18(t0) {
      this.a = t0;
    },
    App_closure19: function App_closure19(t0) {
      this.a = t0;
    },
    App_closure20: function App_closure20(t0) {
      this.a = t0;
    },
    App_closure21: function App_closure21(t0) {
      this.b = t0;
    },
    App_closure22: function App_closure22(t0) {
      this.b = t0;
    },
    App_closure23: function App_closure23(t0) {
      this.b = t0;
    },
    App_closure24: function App_closure24(t0) {
      this.b = t0;
    },
    App6($$$anchor, $$$properties) {
      var t2, t3, count, doubled, quadrupled, fragment, button, text, p, text1, p1, text2,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      t2 = self;
      t2.$$.push($$$properties, false);
      t3 = type$.int;
      count = A.mutableSource(0, t3);
      doubled = A.mutableSource(null, t3);
      quadrupled = A.mutableSource(null, t3);
      A.legacyPreEffect(new A.App_closure59(count), new A.App_closure60(doubled, count));
      A.legacyPreEffect(new A.App_closure61(doubled), new A.App_closure62(quadrupled, doubled));
      t2.$$.legacy_pre_effect_reset();
      fragment = t1._as($.$get$_root32().call());
      button = t1._as(t2.$$.first_child(fragment));
      A.assertHelper(A._asString(button.nodeName) === "BUTTON");
      text = t1._as(t2.$$.child(button));
      A.assertHelper(A._asString(text.nodeName) === "#text");
      p = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(button, true))));
      A.assertHelper(A._asString(p.nodeName) === "P");
      text1 = t1._as(t2.$$.child(p));
      A.assertHelper(A._asString(text1.nodeName) === "#text");
      p1 = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(p, true))));
      A.assertHelper(A._asString(p.nodeName) === "P");
      text2 = t1._as(t2.$$.child(p1));
      A.assertHelper(A._asString(text2.nodeName) === "#text");
      t1._as(t2.$$.template_effect(type$.JavaScriptFunction._as(A.allowInterop(new A.App_closure63(text, count, text1, doubled, text2, quadrupled), type$.Function))));
      A.event("click", button, new A.App_closure64(new A.App_handleClick4(count)), false, t1);
      t2.$$.append($$$anchor, fragment);
      t2.$$.pop();
    },
    App_handleClick4: function App_handleClick4(t0) {
      this.count = t0;
    },
    App_closure59: function App_closure59(t0) {
      this.count = t0;
    },
    App_closure60: function App_closure60(t0, t1) {
      this.doubled = t0;
      this.count = t1;
    },
    App_closure61: function App_closure61(t0) {
      this.doubled = t0;
    },
    App_closure62: function App_closure62(t0, t1) {
      this.quadrupled = t0;
      this.doubled = t1;
    },
    App_closure63: function App_closure63(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.text = t0;
      _.count = t1;
      _.text1 = t2;
      _.doubled = t3;
      _.text2 = t4;
      _.quadrupled = t5;
    },
    App_closure64: function App_closure64(t0) {
      this.handleClick = t0;
    },
    App7($$$anchor, $$properties) {
      var yes, fragment, t2, label, input, node, button, t3, t4,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$properties);
      yes = A.mutableSource(false, type$.bool);
      fragment = t1._as($.$get$_root0().call());
      t2 = self;
      label = t1._as(t2.$$.first_child(fragment));
      A.assertHelper(A._asString(label.nodeName) === "LABEL");
      input = t1._as(t2.$$.child(label));
      A.assertHelper(A._asString(input.nodeName) === "INPUT");
      t2.$$.remove_input_attr_defaults(input);
      node = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(label, true))));
      A.assertHelper(A._asString(node.nodeName) === "#comment");
      A.ifBlock(node, new A.App_closure10(yes), new A.App_closure11(), new A.App_closure12(), false);
      button = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(node, true))));
      A.assertHelper(A._asString(button.nodeName) === "BUTTON");
      t3 = type$.Function;
      t4 = type$.JavaScriptFunction;
      t1._as(t2.$$.template_effect(t4._as(A.allowInterop(new A.App_closure13(button, yes), t3))));
      t2.$$.bind_checked(input, t4._as(A.allowInterop(new A.App_closure14(yes), t3)), t4._as(A.allowInterop(new A.App_closure15(yes), t3)));
      t2.$$.append($$$anchor, fragment);
    },
    App_closure10: function App_closure10(t0) {
      this.yes = t0;
    },
    App_closure11: function App_closure11() {
    },
    App_closure12: function App_closure12() {
    },
    App_closure13: function App_closure13(t0, t1) {
      this.button = t0;
      this.yes = t1;
    },
    App_closure14: function App_closure14(t0) {
      this.yes = t0;
    },
    App_closure15: function App_closure15(t0) {
      this.yes = t0;
    },
    App8($$$anchor, $$$properties) {
      var t2, fragment, node,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      t2 = self;
      fragment = t1._as(t2.$$.comment());
      node = t1._as(t2.$$.first_child(fragment));
      A.assertHelper(A._asString(node.nodeName) === "#text");
      A.ifBlock(node, new A.App_closure45(7), new A.App_closure46(7), new A.App_closure47(7), false);
      t2.$$.append($$$anchor, fragment);
    },
    App_closure45: function App_closure45(t0) {
      this.x = t0;
    },
    App_closure46: function App_closure46(t0) {
      this.x = t0;
    },
    App_closure47: function App_closure47(t0) {
      this.x = t0;
    },
    App__closure9: function App__closure9(t0) {
      this.x = t0;
    },
    App__closure10: function App__closure10(t0) {
      this.x = t0;
    },
    App__closure11: function App__closure11(t0) {
      this.x = t0;
    },
    App9($$$anchor, $$$properties) {
      var button,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      button = t1._as($.$get$_root11().call());
      A.assertHelper(A._asString(button.nodeName) === "BUTTON");
      A.event("click", button, A.once(new A.App_closure28(new A.App_handleClick0()), t1), false, t1);
      self.$$.append($$$anchor, button);
    },
    App_handleClick0: function App_handleClick0() {
    },
    App_closure28: function App_closure28(t0) {
      this.handleClick = t0;
    },
    App10($$$anchor, $$$properties) {
      var t2, count, button, text,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      t2 = self;
      t2.$$.push($$$properties, false);
      count = A.mutableSource(0, type$.int);
      A.legacyPreEffect(new A.App_closure55(count), new A.App_closure56(count));
      t2.$$.legacy_pre_effect_reset();
      button = t1._as($.$get$_root29().call());
      A.assertHelper(A._asString(button.nodeName) === "BUTTON");
      text = t1._as(t2.$$.child(button));
      A.assertHelper(A._asString(text.nodeName) === "#text");
      t1._as(t2.$$.template_effect(type$.JavaScriptFunction._as(A.allowInterop(new A.App_closure57(text, count), type$.Function))));
      A.event("click", button, new A.App_closure58(new A.App_handleClick3(count)), false, t1);
      t2.$$.append($$$anchor, button);
      t2.$$.pop();
    },
    App_handleClick3: function App_handleClick3(t0) {
      this.count = t0;
    },
    App_closure55: function App_closure55(t0) {
      this.count = t0;
    },
    App_closure56: function App_closure56(t0) {
      this.count = t0;
    },
    App_closure57: function App_closure57(t0, t1) {
      this.text = t0;
      this.count = t1;
    },
    App_closure58: function App_closure58(t0) {
      this.handleClick = t0;
    },
    App11($$$anchor, $$$properties) {
      var t2, fragment, node, _this,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      t2 = self;
      fragment = t1._as(t2.$$.comment());
      node = t1._as(t2.$$.first_child(fragment));
      A.assertHelper(A._asString(node.nodeName) === "#text");
      _this = {};
      _this.message = type$.JavaScriptFunction._as(A.allowInterop(new A.App_handleMessage0(), type$.Function));
      A.Inner0(node, {$$events: _this});
      t2.$$.append($$$anchor, fragment);
    },
    App_handleMessage0: function App_handleMessage0() {
    },
    App12($$$anchor, $$$properties) {
      var cats, fragment, t2, h1, ul,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      cats = A.mutableSource(A._setArrayType([B.Record2_rt1, B.Record2_id_z_AbfPXTKms_name_Maru, B.Record2_omC], type$.JSArray_Record_2_String_id_and_String_name), type$.List_Record_2_String_id_and_String_name);
      fragment = t1._as($.$get$_root18().call());
      t2 = self;
      h1 = t1._as(t2.$$.first_child(fragment));
      A.assertHelper(A._asString(h1.nodeName) === "H1");
      ul = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(h1, true))));
      A.assertHelper(A._asString(ul.nodeName) === "UL");
      A.eachBlock(ul, 9, new A.App_closure43(cats), B.CONSTANT, new A.App_closure44(), type$.Record_2_String_id_and_String_name);
      t2.$$.append($$$anchor, fragment);
    },
    App_closure43: function App_closure43(t0) {
      this.cats = t0;
    },
    App_closure44: function App_closure44() {
    },
    App_closure_id: function App_closure_id(t0) {
      this.$$$item = t0;
    },
    App_closure_name: function App_closure_name(t0) {
      this.$$$item = t0;
    },
    App__closure8: function App__closure8(t0, t1, t2, t3, t4) {
      var _ = this;
      _.a = t0;
      _.id = t1;
      _.text = t2;
      _.index = t3;
      _.name = t4;
    },
    App13($$$anchor, $$$properties) {
      var t2, t3, bindingGroup, bindingGroup1, scoops, t4, flavours, menu, fragment, h2, label, input, label1, input1, label2, input2, h21, node, node1,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      t2 = self;
      t2.$$.push($$$properties, false);
      t3 = type$.JSArray_nullable_Object;
      bindingGroup = t3._as(new t2.Array());
      bindingGroup1 = t3._as(new t2.Array());
      scoops = A.mutableSource(1, type$.int);
      t3 = type$.JSArray_String;
      t4 = type$.List_String;
      flavours = A.mutableSource(A._setArrayType(["Mint choc chip"], t3), t4);
      menu = A.mutableSource(A._setArrayType(["Cookies and cream", "Mint choc chip", "Raspberry ripple"], t3), t4);
      t2.$$.init();
      fragment = t1._as($.$get$_root().call());
      h2 = t1._as(t2.$$.first_child(fragment));
      A.assertHelper(A._asString(h2.nodeName) === "H2");
      label = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(h2, true))));
      A.assertHelper(A._asString(label.nodeName) === "LABEL");
      input = t1._as(t2.$$.child(label));
      A.assertHelper(A._asString(input.nodeName) === "INPUT");
      t2.$$.remove_input_attr_defaults(input);
      input.value = "1";
      input.__value = 1;
      input.__value = 1;
      label1 = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(label, true))));
      A.assertHelper(A._asString(label1.nodeName) === "LABEL");
      input1 = t1._as(t2.$$.child(label1));
      A.assertHelper(A._asString(input1.nodeName) === "INPUT");
      t2.$$.remove_input_attr_defaults(input1);
      input1.value = "2";
      input1.__value = 2;
      input1.__value = 2;
      label2 = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(label1, true))));
      A.assertHelper(A._asString(label2.nodeName) === "LABEL");
      input2 = t1._as(t2.$$.child(label2));
      A.assertHelper(A._asString(input2.nodeName) === "INPUT");
      t2.$$.remove_input_attr_defaults(input2);
      input2.value = "3";
      input2.__value = 3;
      input2.__value = 3;
      h21 = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(label2, true))));
      A.assertHelper(A._asString(input2.nodeName) === "INPUT");
      node = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(h21, true))));
      A.assertHelper(A._asString(node.nodeName) === "#comment");
      A.eachBlock(node, 1, new A.App_closure(menu), B.CONSTANT, new A.App_closure0(bindingGroup1, flavours), type$.String);
      node1 = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(node, true))));
      A.assertHelper(A._asString(node1.nodeName) === "#comment");
      A.ifBlock(node1, new A.App_closure1(flavours), new A.App_closure2(), new A.App_closure3(flavours, scoops, new A.App_join()), false);
      t1 = type$.JSArray_int;
      A.bindIntGroup(bindingGroup, A._setArrayType([], t1), input, new A.App_closure4(scoops), new A.App_closure5(scoops));
      A.bindIntGroup(bindingGroup, A._setArrayType([], t1), input1, new A.App_closure6(scoops), new A.App_closure7(scoops));
      A.bindIntGroup(bindingGroup, A._setArrayType([], t1), input2, new A.App_closure8(scoops), new A.App_closure9(scoops));
      t2.$$.append($$$anchor, fragment);
      t2.$$.pop();
    },
    App_join: function App_join() {
    },
    App_closure: function App_closure(t0) {
      this.menu = t0;
    },
    App_closure0: function App_closure0(t0, t1) {
      this.bindingGroup1 = t0;
      this.flavours = t1;
    },
    App__closure2: function App__closure2(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.flavour = t1;
      _.input3 = t2;
      _.text = t3;
    },
    App__closure3: function App__closure3(t0, t1) {
      this.flavour = t0;
      this.flavours = t1;
    },
    App__closure4: function App__closure4(t0) {
      this.flavours = t0;
    },
    App_closure1: function App_closure1(t0) {
      this.flavours = t0;
    },
    App_closure2: function App_closure2() {
    },
    App_closure3: function App_closure3(t0, t1, t2) {
      this.flavours = t0;
      this.scoops = t1;
      this.join = t2;
    },
    App__closure: function App__closure(t0, t1) {
      this.flavours = t0;
      this.scoops = t1;
    },
    App__closure0: function App__closure0() {
    },
    App__closure1: function App__closure1(t0, t1, t2) {
      this.scoops = t0;
      this.join = t1;
      this.flavours = t2;
    },
    App___closure: function App___closure(t0, t1, t2, t3) {
      var _ = this;
      _.text1 = t0;
      _.scoops = t1;
      _.join = t2;
      _.flavours = t3;
    },
    App_closure4: function App_closure4(t0) {
      this.scoops = t0;
    },
    App_closure5: function App_closure5(t0) {
      this.scoops = t0;
    },
    App_closure6: function App_closure6(t0) {
      this.scoops = t0;
    },
    App_closure7: function App_closure7(t0) {
      this.scoops = t0;
    },
    App_closure8: function App_closure8(t0) {
      this.scoops = t0;
    },
    App_closure9: function App_closure9(t0) {
      this.scoops = t0;
    },
    App14($$$anchor, $$$properties) {
      var t2, fragment, node, _this,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      t2 = self;
      fragment = t1._as(t2.$$.comment());
      node = t1._as(t2.$$.first_child(fragment));
      A.assertHelper(A._asString(node.nodeName) === "#text");
      _this = {};
      _this.message = type$.JavaScriptFunction._as(A.allowInterop(new A.App_handleMessage(), type$.Function));
      A.Outer(node, {$$events: _this});
      t2.$$.append($$$anchor, fragment);
    },
    App_handleMessage: function App_handleMessage() {
    },
    App15($$$anchor, $$$properties) {
      var p, t2, node,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      p = t1._as($.$get$_root34().call());
      A.assertHelper(A._asString(p.nodeName) === "P");
      t2 = self;
      node = t1._as(t2.$$.child(p));
      A.assertHelper(A._asString(node.nodeName) === "#comment");
      t2.$$.html(node, type$.JavaScriptFunction._as(A.allowInterop(new A.App_closure67("here's some <strong>HTML!!!</strong>"), type$.Function)), false, false);
      t2.$$.append($$$anchor, p);
    },
    App_closure67: function App_closure67(t0) {
      this.string = t0;
    },
    App16($$$anchor, $$$properties) {
      var things, fragment, t2, button, div, div1, h2, node, t3, div2, h21, node2,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      things = A.mutableSource(A._setArrayType([new A._Record_2_color_id("darkblue", 1), new A._Record_2_color_id("indigo", 2), new A._Record_2_color_id("deeppink", 3), new A._Record_2_color_id("salmon", 4), new A._Record_2_color_id("gold", 5)], type$.JSArray_Record_2_String_color_and_int_id), type$.List_Record_2_String_color_and_int_id);
      fragment = t1._as($.$get$_root16().call());
      t2 = self;
      button = t1._as(t2.$$.child(fragment));
      A.assertHelper(A._asString(button.nodeName) === "BUTTON");
      div = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(button))));
      A.assertHelper(A._asString(div.nodeName) === "DIV");
      div1 = t1._as(t2.$$.child(div));
      A.assertHelper(A._asString(div1.nodeName) === "DIV");
      h2 = t1._as(t2.$$.child(div1));
      A.assertHelper(A._asString(h2.nodeName) === "H2");
      node = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(h2))));
      A.assertHelper(A._asString(node.nodeName) === "#comment");
      t3 = type$.Record_2_String_color_and_int_id;
      A.eachBlock(node, 5, new A.App_closure37(things), new A.App_closure38(), new A.App_closure39(), t3);
      div2 = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(div1))));
      A.assertHelper(A._asString(div2.nodeName) === "DIV");
      h21 = t1._as(t2.$$.child(div2));
      A.assertHelper(A._asString(h21.nodeName) === "H2");
      node2 = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(h21))));
      A.assertHelper(A._asString(node2.nodeName) === "#comment");
      A.eachBlock(node2, 1, new A.App_closure40(things), B.CONSTANT, new A.App_closure41(), t3);
      A.event("click", button, new A.App_closure42(new A.App_handleClick2(things)), false, t1);
      t2.$$.append($$$anchor, fragment);
    },
    App_handleClick2: function App_handleClick2(t0) {
      this.things = t0;
    },
    App_closure37: function App_closure37(t0) {
      this.things = t0;
    },
    App_closure38: function App_closure38() {
    },
    App_closure39: function App_closure39() {
    },
    App__closure7: function App__closure7(t0) {
      this.thing = t0;
    },
    App_closure40: function App_closure40(t0) {
      this.things = t0;
    },
    App_closure41: function App_closure41() {
    },
    App__closure6: function App__closure6(t0) {
      this.thing = t0;
    },
    App_closure42: function App_closure42(t0) {
      this.handleClick = t0;
    },
    App17($$$anchor, $$$properties) {
      var t2, future, fragment, t3, button, node,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      t2 = new A.App_getRandomNumber();
      future = A.mutableSource(t2.call$0(), type$.Future_String);
      fragment = t1._as($.$get$_root14().call());
      t3 = self;
      button = t1._as(t3.$$.child(fragment));
      A.assertHelper(A._asString(button.nodeName) === "BUTTON");
      node = t1._as(t3.$$.sibling(t1._as(t3.$$.sibling(button))));
      A.assertHelper(A._asString(node.nodeName) === "#comment");
      A.awaitBlock(node, new A.App_closure32(future), new A.App_closure33(), new A.App_closure34(), new A.App_closure35(), type$.String);
      A.event("click", button, new A.App_closure36(new A.App_handleClick1(future, t2)), false, t1);
      t3.$$.append($$$anchor, fragment);
    },
    App_getRandomNumber: function App_getRandomNumber() {
    },
    App_handleClick1: function App_handleClick1(t0, t1) {
      this.future = t0;
      this.getRandomNumber = t1;
    },
    App_closure32: function App_closure32(t0) {
      this.future = t0;
    },
    App_closure33: function App_closure33() {
    },
    App_closure34: function App_closure34() {
    },
    App_closure35: function App_closure35() {
    },
    App__closure5: function App__closure5(t0, t1) {
      this.text2 = t0;
      this.error = t1;
    },
    App_closure36: function App_closure36(t0) {
      this.handleClick = t0;
    },
    App18($$$anchor, $$$properties) {
      var t2, fragment, node, _this,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      t2 = self;
      fragment = t1._as(t2.$$.comment());
      node = t1._as(t2.$$.first_child(fragment));
      A.assertHelper(A._asString(node.nodeName) === "#text");
      _this = {};
      _this.click = type$.JavaScriptFunction._as(A.allowInterop(new A.App_$click(new A.App_handleClick()), type$.Function));
      A.CustomButton(node, {$$events: _this});
      t2.$$.append($$$anchor, fragment);
    },
    App_handleClick: function App_handleClick() {
    },
    App_$click: function App_$click(t0) {
      this.handleClick = t0;
    },
    CustomButton($$$anchor, $$$properties) {
      var t1 = type$.JSObject,
        button = t1._as($.$get$_root7().call());
      A.assertHelper(A._asString(button.nodeName) === "BUTTON");
      A.event("click", button, new A.CustomButton_closure($$$properties), false, t1);
      t1 = self;
      t1.$$.append($$$anchor, button);
      t1.$$.append_styles(null, "svelte-urs9w7", "\tbutton.svelte-hg07jm {\n\t\theight: 4rem;\n\t\twidth: 8rem;\n\t\tbackground-color: #aaa;\n\t\tborder-color: #f1c40f;\n\t\tcolor: #f1c40f;\n\t\tfont-size: 1.25rem;\n\t\tbackground-image: linear-gradient(45deg, #f1c40f 50%, transparent 50%);\n\t\tbackground-position: 100%;\n\t\tbackground-size: 400%;\n\t\ttransition: background 300ms ease-in-out;\n\t}\n\t\n\tbutton.svelte-hg07jm:hover {\n\t\tbackground-position: 0;\n\t\tcolor: #aaa;\n\t}\n");
    },
    CustomButton_closure: function CustomButton_closure(t0) {
      this.$$$properties = t0;
    },
    Info($$$anchor, $$$properties) {
      var p, t2, code, text, text1, a, a1,
        t1 = type$.dynamic,
        $name = A.property($$$properties, "name", t1),
        version = A.property($$$properties, "version", t1),
        speed = A.property($$$properties, "speed", t1),
        website = A.property($$$properties, "website", t1);
      t1 = type$.JSObject;
      p = t1._as($.$get$_root25().call());
      A.assertHelper(A._asString(p.nodeName) === "P");
      t2 = self;
      code = t1._as(t2.$$.sibling(t1._as(t2.$$.child(p))));
      A.assertHelper(A._asString(code.nodeName) === "CODE");
      text = t1._as(t2.$$.child(code));
      A.assertHelper(A._asString(text.nodeName) === "#text");
      text1 = t1._as(t2.$$.sibling(code));
      A.assertHelper(A._asString(text1.nodeName) === "#text");
      a = t1._as(t2.$$.sibling(text1));
      A.assertHelper(A._asString(a.nodeName) === "A");
      a1 = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(a))));
      A.assertHelper(A._asString(a1.nodeName) === "A");
      t1._as(t2.$$.template_effect(type$.JavaScriptFunction._as(A.allowInterop(new A.Info_closure(text, $name, text1, speed, version, a, a1, website), type$.Function))));
      t2.$$.append($$$anchor, p);
    },
    Info_closure: function Info_closure(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.text = t0;
      _.name = t1;
      _.text1 = t2;
      _.speed = t3;
      _.version = t4;
      _.a = t5;
      _.a1 = t6;
      _.website = t7;
    },
    Inner0($$$anchor, $$$properties) {
      var dispatch, t2, button,
        t1 = self;
      t1.$$.push($$$properties, false);
      dispatch = A.createEventDispatcher();
      t1.$$.init();
      t2 = type$.JSObject;
      button = t2._as($.$get$_root9().call());
      A.assertHelper(A._asString(button.nodeName) === "BUTTON");
      A.event("click", button, new A.Inner_closure0(new A.Inner_sayHello0(dispatch)), false, t2);
      t1.$$.append($$$anchor, button);
      t1.$$.pop();
    },
    Inner_sayHello0: function Inner_sayHello0(t0) {
      this.dispatch = t0;
    },
    Inner_closure0: function Inner_closure0(t0) {
      this.sayHello = t0;
    },
    Inner($$$anchor, $$$properties) {
      var dispatch, t2, button,
        t1 = self;
      t1.$$.push($$$properties, false);
      dispatch = A.createEventDispatcher();
      t1.$$.init();
      t2 = type$.JSObject;
      button = t2._as($.$get$_root8().call());
      A.assertHelper(A._asString(button.nodeName) === "BUTTON");
      A.event("click", button, new A.Inner_closure(new A.Inner_sayHello(dispatch)), false, t2);
      t1.$$.append($$$anchor, button);
      t1.$$.pop();
    },
    Inner_sayHello: function Inner_sayHello(t0) {
      this.dispatch = t0;
    },
    Inner_closure: function Inner_closure(t0) {
      this.sayHello = t0;
    },
    mountComponent($name, target) {
      var t1;
      $label0$0: {
        if ("hello_world" === $name) {
          t1 = A.mount(A.app__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("dynamic_attributes" === $name) {
          t1 = A.mount(A.app0__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("styling" === $name) {
          t1 = A.mount(A.app1__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("nested_components" === $name) {
          t1 = A.mount(A.app2__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("html_tags" === $name) {
          t1 = A.mount(A.app3__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("reactive_assignments" === $name) {
          t1 = A.mount(A.app4__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("reactive_declarations" === $name) {
          t1 = A.mount(A.app5__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("reactive_statements" === $name) {
          t1 = A.mount(A.app6__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("declaring_properties" === $name) {
          t1 = A.mount(A.app7__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("default_values" === $name) {
          t1 = A.mount(A.app8__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("spread_properties" === $name) {
          t1 = A.mount(A.app9__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("if_blocks" === $name) {
          t1 = A.mount(A.app10__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("else_blocks" === $name) {
          t1 = A.mount(A.app11__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("else_if_blocks" === $name) {
          t1 = A.mount(A.app12__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("each_blocks" === $name) {
          t1 = A.mount(A.app13__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("keyed_each_blocks" === $name) {
          t1 = A.mount(A.app14__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("await_blocks" === $name) {
          t1 = A.mount(A.app15__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("dom_events" === $name) {
          t1 = A.mount(A.app16__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("inline_handlers" === $name) {
          t1 = A.mount(A.app17__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("event_modifiers" === $name) {
          t1 = A.mount(A.app18__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("component_events" === $name) {
          t1 = A.mount(A.app19__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("event_forwarding" === $name) {
          t1 = A.mount(A.app20__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("dom_event_forwarding" === $name) {
          t1 = A.mount(A.app21__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("text_inputs" === $name) {
          t1 = A.mount(A.app22__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("numeric_inputs" === $name) {
          t1 = A.mount(A.app23__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("checkbox_inputs" === $name) {
          t1 = A.mount(A.app24__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        if ("group_inputs" === $name) {
          t1 = A.mount(A.app25__App$closure(), target, type$.JSObject);
          break $label0$0;
        }
        t1 = null;
        break $label0$0;
      }
      return t1;
    },
    main() {
      var target, link, _1_0, t1 = {},
        t2 = self,
        t3 = type$.JSObject,
        t4 = type$.nullable_JSObject,
        select = t4._as(t3._as(t2.document).querySelector("nav select"));
      if (select == null)
        select = t3._as(select);
      target = t4._as(t3._as(t2.document).querySelector("main"));
      if (target == null)
        target = t3._as(target);
      link = t4._as(t3._as(t2.document).querySelector("nav a"));
      if (link == null)
        link = t3._as(link);
      t1.current = null;
      t1 = new A.main_onChange(t1, select, link, target);
      select.addEventListener("change", type$.JavaScriptFunction._as(A.allowInterop(t1, type$.Function)));
      _1_0 = A._asString(t3._as(t3._as(t2.window).location).hash);
      if (_1_0.length !== 0) {
        t4 = B.JSString_methods.substring$1(_1_0, 1);
        link.hash = t4;
        select.value = t4;
        t1.call$1(t3._as(new t2.Event("change")));
      }
    },
    main_onChange: function main_onChange(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.select = t1;
      _.link = t2;
      _.target = t3;
    },
    Nested0($$$anchor, $$$properties) {
      var t2, text,
        answer = A.property($$$properties, "answer", type$.dynamic),
        t1 = type$.JSObject,
        p = t1._as($.$get$_root28().call());
      A.assertHelper(A._asString(p.nodeName) === "P");
      t2 = self;
      text = t1._as(t2.$$.child(p));
      A.assertHelper(A._asString(text.nodeName) === "#text");
      t1._as(t2.$$.template_effect(type$.JavaScriptFunction._as(A.allowInterop(new A.Nested_closure0(text, answer), type$.Function))));
      t2.$$.append($$$anchor, p);
    },
    Nested_closure0: function Nested_closure0(t0, t1) {
      this.text = t0;
      this.answer = t1;
    },
    Nested($$$anchor, $$$properties) {
      var t2, text,
        answer = A.propertyWithDefault($$$properties, "answer", 0, "a mystery", type$.dynamic),
        t1 = type$.JSObject,
        p = t1._as($.$get$_root27().call());
      A.assertHelper(A._asString(p.nodeName) === "P");
      t2 = self;
      text = t1._as(t2.$$.child(p));
      A.assertHelper(A._asString(text.nodeName) === "#text");
      t1._as(t2.$$.template_effect(type$.JavaScriptFunction._as(A.allowInterop(new A.Nested_closure(text, answer), type$.Function))));
      t2.$$.append($$$anchor, p);
    },
    Nested_closure: function Nested_closure(t0, t1) {
      this.text = t0;
      this.answer = t1;
    },
    Outer($$$anchor, $$$properties) {
      var _this,
        t1 = self,
        t2 = type$.JSObject,
        fragment = t2._as(t1.$$.comment()),
        node = t2._as(t1.$$.child(fragment));
      A.assertHelper(A._asString(node.nodeName) === "#text");
      _this = {};
      _this.message = type$.JavaScriptFunction._as(A.allowInterop(new A.Outer_$message($$$properties), type$.Function));
      A.Inner(node, {$$events: _this});
      t1.$$.append($$$anchor, fragment);
    },
    Outer_$message: function Outer_$message(t0) {
      this.$$$properties = t0;
    },
    Thing($$$anchor, $$$properties) {
      var t2, span, t3, span1,
        current = A.property($$$properties, "current", type$.dynamic),
        initial = current.call$0(),
        t1 = type$.JSObject,
        p = t1._as($.$get$_root17().call());
      A.assertHelper(A._asString(p.nodeName) === "P");
      t2 = self;
      span = t1._as(t2.$$.child(p));
      A.assertHelper(A._asString(span.nodeName) === "SPAN");
      t3 = t2.$$;
      t3.set_attribute(span, "style", "background-color: " + (initial == null ? "" : A.S(initial)));
      span1 = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(span))));
      A.assertHelper(A._asString(span1.nodeName) === "SPAN");
      t1._as(t2.$$.template_effect(type$.JavaScriptFunction._as(A.allowInterop(new A.Thing_closure(span1, current), type$.Function))));
      t2.$$.append($$$anchor, p);
      t2.$$.append_styles(null, "svelte-dgndg6", "\tspan.svelte-dgndg6 {\n\t\tdisplay: inline-block;\n\t\tpadding: 0.2em 0.5em;\n\t\tmargin: 0 0.2em 0.2em 0;\n\t\twidth: 4em;\n\t\ttext-align: center;\n\t\tborder-radius: 0.2em;\n\t\tcolor: white;\n\t}");
    },
    Thing_closure: function Thing_closure(t0, t1) {
      this.span1 = t0;
      this.current = t1;
    },
    User0: function User0(t0) {
      this.loggedIn = t0;
    },
    User: function User(t0) {
      this.loggedIn = t0;
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    throwLateFieldADI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + "' has been assigned during initialization."), new Error());
    },
    ifBlock(anchor, condition, consequent, alternate, elseIf) {
      var t1 = self.$$,
        t2 = type$.Function,
        t3 = type$.JavaScriptFunction,
        t4 = t3._as(A.allowInterop(condition, t2)),
        t5 = t3._as(A.allowInterop(consequent, t2));
      A.callMethod(t1, "if_block", [anchor, t4, t5, alternate == null ? null : t3._as(A.allowInterop(alternate, t2)), elseIf], type$.void);
    },
    ComponentEvent_get_detail(_this) {
      return A.unref(_this.detail);
    },
    event(eventName, node, handler, capture, $T) {
      A.callMethod(self.$$, "event", [eventName, node, type$.JavaScriptFunction._as(A.allowInterop(handler, type$.Function)), false, false], type$.void);
    },
    template(html, $T) {
      return type$.JavaScriptFunction._as(self.$$.template(html));
    },
    fragment(html) {
      return type$.JavaScriptFunction._as(self.$$.template(html, 1));
    },
    legacyPreEffect(dependency, callback) {
      var t1 = type$.Function,
        t2 = type$.JavaScriptFunction;
      self.$$.legacy_pre_effect(t2._as(A.allowInterop(dependency, t1)), t2._as(A.allowInterop(callback, t1)));
    },
    mutableSource(value, $T) {
      return type$.JSObject._as(self.$$.mutable_source(A.ref(value)));
    },
    mutate(signal, value, $S, $T) {
      return A.unref(self.$$.mutate(signal, A.ref(value)));
    },
    set(source, value, $T) {
      return A.unref(self.$$.set(source, A.ref(value)));
    },
    arrayRefCast(list, $T) {
      return type$.JSArray_nullable_Object._as(list);
    },
    futureRefCast(future, $T) {
      return A.FutureOfJSAnyToJSPromise_get_toJS(future, type$.nullable_Object);
    },
    ref(object) {
      return object;
    },
    unref(reference) {
      return reference;
    },
    mount(component, target, $T) {
      return type$.JSObject._as(self.$$.mount(type$.JavaScriptFunction._as(A.allowInterop(component, type$.Function)), {anchor: null, target: target}));
    },
    get(signal) {
      return A.unref(self.$$.get(signal));
    },
    App19($$$anchor, $$$properties) {
      var t2, fragment, node,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      t2 = self;
      fragment = t1._as(t2.$$.comment());
      node = t1._as(t2.$$.first_child(fragment));
      A.assertHelper(A._asString(node.nodeName) === "#text");
      A.Nested0(node, {answer: A.ref(42)});
      t2.$$.append($$$anchor, fragment);
    },
    App20($$$anchor, $$$properties) {
      var h1, t2, text,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      h1 = t1._as($.$get$_root39().call());
      A.assertHelper(A._asString(h1.nodeName) === "H1");
      t2 = self;
      text = t1._as(t2.$$.child(h1));
      A.assertHelper(A._asString(text.nodeName) === "#text");
      text.nodeValue = "Hello world!";
      t2.$$.append($$$anchor, h1);
    },
    App21($$$anchor, $$$properties) {
      var fragment, t2, node, node1,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      fragment = t1._as($.$get$_root26().call());
      t2 = self;
      node = t1._as(t2.$$.first_child(fragment));
      A.assertHelper(A._asString(node.nodeName) === "#comment");
      A.Nested(node, {answer: A.ref(42)});
      node1 = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(node, true))));
      A.assertHelper(A._asString(node1.nodeName) === "#comment");
      A.Nested(node1, {});
      t2.$$.append($$$anchor, fragment);
    },
    App22($$$anchor, $$$properties) {
      var img,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      img = t1._as($.$get$_root38().call());
      A.assertHelper(A._asString(img.nodeName) === "IMG");
      t1 = self;
      t1.$$.set_attribute(img, "src", "/tutorial/image.gif");
      t1.$$.set_attribute(img, "alt", "Rick Astley dancing");
      t1.$$.append($$$anchor, img);
    },
    App23($$$anchor, $$$properties) {
      var properties, t2, fragment, node,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      properties = {name: A.ref("svelte"), version: A.ref(5), speed: A.ref("blazing"), website: A.ref("https://svelte.dev")};
      t2 = self;
      fragment = t1._as(t2.$$.comment());
      node = t1._as(t2.$$.child(fragment));
      A.assertHelper(A._asString(node.nodeName) === "#text");
      A.Info(node, t1._as(t2.$$.spread_props(properties)));
      t2.$$.append($$$anchor, fragment);
    },
    App24($$$anchor, $$$properties) {
      var p,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      p = t1._as($.$get$_root37().call());
      A.assertHelper(A._asString(p.nodeName) === "P");
      t1 = self;
      t1.$$.append($$$anchor, p);
      t1.$$.append_styles(null, "svelte-urs9w7", string$.x09p_sve);
    },
    App25($$$anchor, $$$properties) {
      var fragment, t2, p, node,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$properties);
      fragment = t1._as($.$get$_root35().call());
      t2 = self;
      p = t1._as(t2.$$.first_child(fragment));
      A.assertHelper(A._asString(p.nodeName) === "P");
      node = t1._as(t2.$$.sibling(t1._as(t2.$$.sibling(p, true))));
      A.assertHelper(A._asString(node.nodeName) === "#comment");
      p = t1._as($.$get$_root36().call());
      A.assertHelper(A._asString(p.nodeName) === "P");
      t2.$$.append(node, p);
      t2.$$.append($$$anchor, fragment);
      t2.$$.append_styles(null, "svelte-urs9w7", string$.x09p_sve);
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1(receiver, invocation) {
      throw A.wrapException(A.NoSuchMethodError_NoSuchMethodError$withInvocation(receiver, type$.Invocation._as(invocation)));
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._instanceTypeFromConstructor(this));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.bool);
    },
    $isTrustedGetRuntimeType: 1,
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    $isTrustedGetRuntimeType: 1,
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {$isJSObject: 1};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JavaScriptBigInt.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JavaScriptSymbol.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JSArray.prototype = {
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("add"));
      receiver.push(value);
    },
    addAll$1(receiver, collection) {
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("addAll"));
      this._addAllFromArray$1(receiver, collection);
      return;
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    sublist$2(receiver, start, end) {
      var end0 = receiver.length;
      if (start > end0)
        throw A.wrapException(A.RangeError$range(start, 0, end0, "start", null));
      if (end == null)
        end = end0;
      else if (end < start || end > end0)
        throw A.wrapException(A.RangeError$range(end, start, end0, "end", null));
      if (start === end)
        return A._setArrayType([], A._arrayInstanceType(receiver));
      return A._setArrayType(receiver.slice(start, end), A._arrayInstanceType(receiver));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    every$1(receiver, test) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (!A.boolConversionCheck(test.call$1(receiver[i])))
          return false;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("indexed set"));
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length) {
        t1 = A.throwConcurrentModificationError(t1);
        throw A.wrapException(t1);
      }
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  J.JSNumber.prototype = {
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.num);
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.int);
    },
    $isTrustedGetRuntimeType: 1,
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.double);
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JSString.prototype = {
    $add(receiver, other) {
      return receiver + other;
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1(receiver, start) {
      return this.substring$2(receiver, start, null);
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.String);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $isTrustedGetRuntimeType: 1,
    $isString: 1
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this._message;
    }
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      return new A.ListIterator(this, this.get$length(0), this.$ti._eval$1("ListIterator<1>"));
    }
  };
  A.SubListIterable.prototype = {
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength >= $length)
        return $length - t1;
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index,
        t1 = _this.get$_endIndex();
      if (realIndex >= t1)
        throw A.wrapException(A.IndexError$withLength(index, _this.get$length(0), _this, "index"));
      return J.$index$ax(_this.__internal$_iterable, realIndex);
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  A.FixedLengthListMixin.prototype = {};
  A.Symbol.prototype = {
    get$hashCode(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 664597 * B.JSString_methods.get$hashCode(this._name) & 536870911;
      this._hashCode = hash;
      return hash;
    },
    toString$0(_) {
      return 'Symbol("' + this._name + '")';
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Symbol && this._name === other._name;
    },
    $isSymbol0: 1
  };
  A._Record_1_tex78t.prototype = {$recipe: "+text(1)", $shape: 1};
  A._Record_2_color_id.prototype = {$recipe: "+color,id(1,2)", $shape: 2};
  A._Record_2_id_name.prototype = {$recipe: "+id,name(1,2)", $shape: 3};
  A.ConstantMapView.prototype = {};
  A.ConstantMap.prototype = {
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this._values.length;
    },
    forEach$1(_, f) {
      var keys, values, t1, i, _this = this;
      _this.$ti._eval$1("~(1,2)")._as(f);
      keys = _this.$keys;
      if (keys == null) {
        keys = Object.keys(_this._jsIndex);
        _this.$keys = keys;
      }
      keys = keys;
      values = _this._values;
      for (t1 = keys.length, i = 0; i < t1; ++i)
        f.call$2(keys[i], values[i]);
    }
  };
  A.Instantiation.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Instantiation1 && this._genericClosure.$eq(0, other._genericClosure) && A.getRuntimeTypeOfClosure(this) === A.getRuntimeTypeOfClosure(other);
    },
    get$hashCode(_) {
      return A.Object_hash(this._genericClosure, A.getRuntimeTypeOfClosure(this), B.C_SentinelValue, B.C_SentinelValue);
    },
    toString$0(_) {
      var t1 = B.JSArray_methods.join$1([A.createRuntimeType(this.$ti._precomputed1)], ", ");
      return this._genericClosure.toString$0(0) + " with " + ("<" + t1 + ">");
    }
  };
  A.Instantiation1.prototype = {
    call$2(a0, a1) {
      return this._genericClosure.call$1$2(a0, a1, this.$ti._rest[0]);
    },
    $signature() {
      return A.instantiatedGenericFunctionType(A.closureFunctionType(this._genericClosure), this.$ti);
    }
  };
  A.JSInvocationMirror.prototype = {
    get$memberName() {
      var t1 = this._memberName;
      if (t1 instanceof A.Symbol)
        return t1;
      return this._memberName = new A.Symbol(A._asString(t1));
    },
    get$positionalArguments() {
      var t1, t2, argumentCount, list, index, _this = this;
      if (_this.__js_helper$_kind === 1)
        return B.List_empty;
      t1 = _this._arguments;
      t2 = J.getInterceptor$asx(t1);
      argumentCount = t2.get$length(t1) - J.get$length$asx(_this._namedArgumentNames) - _this._typeArgumentCount;
      if (argumentCount === 0)
        return B.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index)
        list.push(t2.$index(t1, index));
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments() {
      var t1, t2, namedArgumentCount, t3, t4, namedArgumentsStartIndex, map, i, _this = this;
      if (_this.__js_helper$_kind !== 0)
        return B.Map_empty;
      t1 = _this._namedArgumentNames;
      t2 = J.getInterceptor$asx(t1);
      namedArgumentCount = t2.get$length(t1);
      t3 = _this._arguments;
      t4 = J.getInterceptor$asx(t3);
      namedArgumentsStartIndex = t4.get$length(t3) - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return B.Map_empty;
      map = new A.JsLinkedHashMap(type$.JsLinkedHashMap_Symbol_dynamic);
      for (i = 0; i < namedArgumentCount; ++i)
        map.$indexSet(0, new A.Symbol(A._asString(t2.$index(t1, i))), t4.$index(t3, namedArgumentsStartIndex + i));
      return new A.ConstantMapView(map, type$.ConstantMapView_Symbol_dynamic);
    },
    $isInvocation: 1
  };
  A.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2($name, argument) {
      var t1;
      A._asString($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + $name;
      B.JSArray_methods.add$1(this.namedArgumentList, $name);
      B.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 24
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      return "Null check operator used on a null value";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    }
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A._CyclicInitializationError.prototype = {
    toString$0(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A._AssertionError.prototype = {
    toString$0(_) {
      return "Assertion failed: " + A.Error_safeToString(this.message);
    }
  };
  A._Required.prototype = {};
  A.assertInteropArgs_closure.prototype = {
    call$1(arg) {
      return !type$.Function._is(arg) || typeof arg == "function";
    },
    $signature: 43
  };
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    containsKey$1(key) {
      var strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else {
        rest = _this.__js_helper$_rest;
        if (rest == null)
          rest = _this.__js_helper$_rest = _this._newHashTable$0();
        hash = _this.internalComputeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null) {
          t1 = [_this._newLinkedCell$2(key, value)];
          A.assertHelper(t1 != null);
          rest[hash] = t1;
        } else {
          index = _this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].hashMapCellValue = value;
          else
            bucket.push(_this._newLinkedCell$2(key, value));
        }
      }
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3(table, key, value) {
      var cell,
        t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    _newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else
        _this._last = _this._last._next = cell;
      ++_this.__js_helper$_length;
      _this._modifications = _this._modifications + 1 & 1073741823;
      return cell;
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      A.assertHelper(table != null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 27
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 28
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 29
  };
  A._Record.prototype = {
    toString$0(_) {
      return this._toString$1(false);
    },
    _toString$1(safe) {
      var t2, separator, i, key, value,
        keys = this._fieldKeys$0(),
        values = this._getFieldValues$0(),
        t1 = keys.length;
      A.assertHelper(t1 === values.length);
      t2 = (safe ? "" + "Record " : "") + "(";
      for (separator = "", i = 0; i < t1; ++i, separator = ", ") {
        t2 += separator;
        key = keys[i];
        if (typeof key == "string")
          t2 = t2 + key + ": ";
        if (!(i < values.length))
          return A.ioore(values, i);
        value = values[i];
        t2 = safe ? t2 + A.Primitives_safeToString(value) : t2 + A.S(value);
      }
      t1 = t2 + ")";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _fieldKeys$0() {
      var t1,
        shapeTag = this.$shape;
      for (; $._Record__computedFieldKeys.length <= shapeTag;)
        B.JSArray_methods.add$1($._Record__computedFieldKeys, null);
      t1 = $._Record__computedFieldKeys[shapeTag];
      if (t1 == null) {
        t1 = this._computeFieldKeys$0();
        B.JSArray_methods.$indexSet($._Record__computedFieldKeys, shapeTag, t1);
      }
      return t1;
    },
    _computeFieldKeys$0() {
      var i, names, last,
        recipe = this.$recipe,
        position = recipe.indexOf("("),
        joinedNames = recipe.substring(1, position),
        fields = recipe.substring(position),
        arity = fields === "()" ? 0 : fields.replace(/[^,]/g, "").length + 1,
        result = A._setArrayType(new Array(arity), type$.JSArray_Object);
      for (i = 0; i < arity; ++i)
        result[i] = i;
      if (joinedNames !== "") {
        names = joinedNames.split(",");
        i = names.length;
        for (last = arity; i > 0;) {
          --last;
          --i;
          B.JSArray_methods.$indexSet(result, last, names[i]);
        }
      }
      return J.JSArray_markUnmodifiableList(A.List_List$from(result, false, type$.Object));
    }
  };
  A._Record2.prototype = {
    _getFieldValues$0() {
      return [this._0, this._1];
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._Record2 && this.$shape === other.$shape && J.$eq$(this._0, other._0) && J.$eq$(this._1, other._1);
    },
    get$hashCode(_) {
      return A.Object_hash(this.$shape, this._0, this._1, B.C_SentinelValue);
    }
  };
  A._Record1.prototype = {
    _getFieldValues$0() {
      return [this._0];
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._Record1 && this.$shape === other.$shape && J.$eq$(this._0, other._0);
    },
    get$hashCode(_) {
      return A.Object_hash(this.$shape, this._0, B.C_SentinelValue, B.C_SentinelValue);
    }
  };
  A.NativeByteBuffer.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteBuffer_EOZ;
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeTypedData.prototype = {};
  A.NativeByteData.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteData_mF8;
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeFloat32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float32List_Ymk;
    },
    sublist$2(receiver, start, end) {
      return new Float32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeFloat64List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float64List_Ymk;
    },
    sublist$2(receiver, start, end) {
      return new Float64Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeInt16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int16List_cot;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeInt32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int32List_m1p;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeInt8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int8List_woc;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeUint16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint16List_2mh;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeUint32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint32List_2mh;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeUint8ClampedList.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8ClampedList_9Bb;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8ClampedArray(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeUint8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8List_CSc;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1
  };
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    }
  };
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 15
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      type$.void_Function._as(callback);
      t1 = this._box_0;
      A.assertHelper(t1.storedCallback == null);
      t1.storedCallback = callback;
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 46
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 11
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 11
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 0
  };
  A._AsyncAwaitCompleter.prototype = {
    complete$1(value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        value = t1._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value)) {
          A.assertHelper((t2._state & 24) === 0);
          t2._chainFuture$1(value);
        } else
          t2._completeWithValue$1(value);
      }
    },
    completeError$2(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    }
  };
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 10
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 42
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(A._asInt(errorCode), result);
    },
    $signature: 38
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A._Completer.prototype = {
    completeError$2(error, stackTrace) {
      var t1;
      A.checkNotNullable(error, "error", type$.Object);
      t1 = this.future;
      if ((t1._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      t1._asyncCompleteError$2(error, stackTrace);
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    }
  };
  A._AsyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    }
  };
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var result, errorCallback, t2, t3, t4, t5, exception, _this = this,
        t1 = _this.state;
      A.assertHelper((t1 & 2) !== 0 && _this.errorCallback != null);
      errorCallback = _this.errorCallback;
      result = null;
      t2 = type$.dynamic;
      t3 = type$.Object;
      t4 = asyncError.error;
      t5 = _this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t5.runBinary$3$3(errorCallback, t4, asyncError.stackTrace, t2, t3, type$.StackTrace);
      else
        result = t5.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t4, t2, t3);
      try {
        t2 = _this.$ti._eval$1("2/")._as(result);
        return t2;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((t1 & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    _setChained$1(source) {
      var _this = this;
      A.assertHelper(_this._state <= 3);
      _this._state = _this._state & 1 | 4;
      _this._resultOrListeners = source;
    },
    then$1$2$onError(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        if (onError != null)
          onError = A._registerErrorHandler(onError, currentZone);
      }
      result = new A._Future(currentZone, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new A._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _setPendingComplete$0() {
      A.assertHelper((this._state & 30) === 0);
      this._state ^= 2;
    },
    _setErrorObject$1(error) {
      var _this = this;
      A.assertHelper((_this._state & 24) === 0);
      _this._state = _this._state & 1 | 16;
      _this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      var _this = this;
      A.assertHelper((_this._state & 24) === 0);
      A.assertHelper((source._state & 24) !== 0);
      _this._state = source._state & 30 | _this._state & 1;
      _this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var t1, source, _this = this;
      A.assertHelper(listener._nextListener == null);
      t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        A.assertHelper((_this._state & 24) !== 0);
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__addListener_closure(_this, listener)));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        A.assertHelper((_this._state & 24) !== 0);
        _box_0.listeners = _this._reverseListeners$1(listeners);
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__prependListeners_closure(_box_0, _this)));
      }
    },
    _removeListeners$0() {
      var current, _this = this;
      A.assertHelper((_this._state & 24) === 0);
      current = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
      _this._resultOrListeners = null;
      return _this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1(source) {
      var e, s, exception, _this = this;
      A.assertHelper((_this._state & 24) === 0);
      A.assertHelper(false);
      _this._setPendingComplete$0();
      try {
        source.then$1$2$onError(new A._Future__chainForeignFuture_closure(_this), new A._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A.scheduleMicrotask(new A._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      A.assertHelper((_this._state & 24) === 0);
      listeners = _this._removeListeners$0();
      A.assertHelper((_this._state & 24) === 0);
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2(error, stackTrace) {
      var listeners, _this = this;
      type$.StackTrace._as(stackTrace);
      A.assertHelper((_this._state & 24) === 0);
      listeners = _this._removeListeners$0();
      _this._setErrorObject$1(A.AsyncError$(error, stackTrace));
      A._Future__propagateToListeners(_this, listeners);
    },
    _asyncComplete$1(value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      A.assertHelper((_this._state & 24) === 0);
      if (t1._eval$1("Future<1>")._is(value)) {
        _this._chainFuture$1(value);
        return;
      }
      _this._asyncCompleteWithValue$1(value);
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._setPendingComplete$0();
      A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__asyncCompleteWithValue_closure(_this, value)));
    },
    _chainFuture$1(value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("Future<1>")._as(value);
      A.assertHelper((_this._state & 30) === 0);
      if (t1._is(value)) {
        A._Future__chainCoreFutureAsync(value, _this);
        return;
      }
      _this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2(error, stackTrace) {
      var _this = this;
      A.assertHelper((_this._state & 24) === 0);
      _this._setPendingComplete$0();
      A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__asyncCompleteError_closure(_this, error, stackTrace)));
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  A._Future__chainForeignFuture_closure.prototype = {
    call$1(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      A.assertHelper((t1._state & 2) !== 0);
      A.assertHelper((t1._state & 2) !== 0);
      t1._state ^= 2;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 15
  };
  A._Future__chainForeignFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this.$this;
      A.assertHelper((t1._state & 2) !== 0);
      t1._completeError$2(error, stackTrace);
    },
    $signature: 36
  };
  A._Future__chainForeignFuture_closure1.prototype = {
    call$0() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  A._Future__chainCoreFutureAsync_closure.prototype = {
    call$0() {
      A._Future__chainCoreFutureSync(this._box_0.source, this.target);
    },
    $signature: 0
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  A._Future__asyncCompleteError_closure.prototype = {
    call$0() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var completeResult, e, s, t2, t3, exception, originalSource, _this = this,
        t1 = _this._box_0;
      A.assertHelper((t1.listener.state & 1) === 0);
      A.assertHelper((t1.listener.state & 2) === 0);
      completeResult = null;
      try {
        t2 = t1.listener;
        t3 = t2.state;
        A.assertHelper((t3 & 2) === 0);
        A.assertHelper((t3 & 15) === 8);
        completeResult = t2.result._zone.run$1$1(type$.dynamic_Function._as(t2.callback), type$.dynamic);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (_this.hasError) {
          t2 = _this._box_1.source;
          A.assertHelper((t2._state & 16) !== 0);
          t2 = type$.AsyncError._as(t2._resultOrListeners).error === e;
        } else
          t2 = false;
        if (t2) {
          t2 = _this._box_1.source;
          A.assertHelper((t2._state & 16) !== 0);
          t1.listenerValueOrError = type$.AsyncError._as(t2._resultOrListeners);
        } else
          t1.listenerValueOrError = A.AsyncError$(e, s);
        t1.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t2 = completeResult;
          A.assertHelper((t2._state & 16) !== 0);
          t1.listenerValueOrError = type$.AsyncError._as(t2._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (completeResult instanceof A._Future) {
        originalSource = _this._box_1.source;
        t1.listenerValueOrError = completeResult.then$1$1(new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
      return this.originalSource;
    },
    $signature: 33
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        A.assertHelper((t2.state & 1) !== 0);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = A.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, t2, exception, t3, t4, _this = this;
      try {
        t1 = _this._box_1.source;
        A.assertHelper((t1._state & 16) !== 0);
        asyncError = type$.AsyncError._as(t1._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError)) {
          t2 = t1.listener;
          A.assertHelper((t2.state & 2) !== 0);
          t2 = t2.errorCallback != null;
        } else
          t2 = false;
        if (t2) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this._box_1;
        t2 = t1.source;
        A.assertHelper((t2._state & 16) !== 0);
        t3 = type$.AsyncError;
        t4 = _this._box_0;
        if (t3._as(t2._resultOrListeners).error === e) {
          t1 = t1.source;
          A.assertHelper((t1._state & 16) !== 0);
          t4.listenerValueOrError = t3._as(t1._resultOrListeners);
        } else
          t4.listenerValueOrError = A.AsyncError$(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._AsyncCallbackEntry.prototype = {};
  A._StreamIterator.prototype = {};
  A._Zone.prototype = {$isZone: 1};
  A._rootHandleError_closure.prototype = {
    call$0() {
      A.Error_throwWithStackTrace(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._RootZone.prototype = {
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  A.ListBase.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListBase.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    join$1(receiver, separator) {
      var t1;
      if (this.get$length(receiver) === 0)
        return "";
      t1 = A.StringBuffer__writeAll("", receiver, separator);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    sublist$2(receiver, start, end) {
      var t1,
        listLength = this.get$length(receiver);
      if (end == null)
        end = listLength;
      A.RangeError_checkValidRange(start, end, listLength);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      t1 = A.instanceType(receiver);
      A.RangeError_checkNotNegative(start, "start");
      A.RangeError_checkNotNegative(end, "end");
      if (start > end)
        A.throwExpression(A.RangeError$range(start, 0, end, "start", null));
      return A.List_List$from(new A.SubListIterable(receiver, start, end, t1._eval$1("SubListIterable<ListBase.E>")), true, t1._eval$1("ListBase.E"));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    }
  };
  A.MapBase.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = A.S(k);
      t2 = t1._contents += t2;
      t1._contents = t2 + ": ";
      t2 = A.S(v);
      t1._contents += t2;
    },
    $signature: 32
  };
  A._UnmodifiableMapMixin.prototype = {};
  A.MapView.prototype = {
    forEach$1(_, action) {
      this._map.forEach$1(0, this.$ti._eval$1("~(1,2)")._as(action));
    },
    get$length(_) {
      return this._map.__js_helper$_length;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this._map);
    },
    $isMap: 1
  };
  A.UnmodifiableMapView.prototype = {};
  A._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  A.NoSuchMethodError_toString_closure.prototype = {
    call$2(key, value) {
      var t1, t2, t3;
      type$.Symbol._as(key);
      t1 = this.sb;
      t2 = this._box_0;
      t3 = t1._contents += t2.comma;
      t3 += key._name;
      t1._contents = t3;
      t1._contents = t3 + ": ";
      t3 = A.Error_safeToString(value);
      t1._contents += t3;
      t2.comma = ", ";
    },
    $signature: 30
  };
  A.Error.prototype = {
    get$stackTrace() {
      return A.Primitives_extractStackTrace(this);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + message,
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue());
    },
    get$invalidValue() {
      return this.invalidValue;
    }
  };
  A.RangeError.prototype = {
    get$invalidValue() {
      return A._asNumQ(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var start, end, explanation;
      A.assertHelper(this._hasValue);
      start = this.start;
      end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$invalidValue() {
      return A._asInt(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      A.assertHelper(this._hasValue);
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.NoSuchMethodError.prototype = {
    toString$0(_) {
      var $arguments, t1, _i, t2, t3, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new A.StringBuffer("");
      _box_0.comma = "";
      $arguments = _this._core$_arguments;
      for (t1 = $arguments.length, _i = 0, t2 = "", t3 = ""; _i < t1; ++_i, t3 = ", ") {
        argument = $arguments[_i];
        sb._contents = t2 + t3;
        t2 = A.Error_safeToString(argument);
        t2 = sb._contents += t2;
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new A.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = A.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      return "NoSuchMethodError: method not found: '" + _this._core$_memberName._name + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      return "UnimplementedError: " + this.message;
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    }
  };
  A.Iterable.prototype = {
    get$length(_) {
      var it, count;
      A.assertHelper(!type$.EfficientLengthIterable_dynamic._is(this));
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    toString$0(_) {
      return A.Iterable_iterableToShortString(this, "(", ")");
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, 0);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1(_, invocation) {
      throw A.wrapException(A.NoSuchMethodError_NoSuchMethodError$withInvocation(this, type$.Invocation._as(invocation)));
    },
    get$runtimeType(_) {
      return A.getRuntimeTypeOfDartObject(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return "";
    },
    $isStackTrace: 1
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.FutureOfJSAnyToJSPromise_get_toJS_closure.prototype = {
    call$2(resolve, reject) {
      var t1 = type$.JavaScriptFunction;
      this._this.then$1$2$onError(new A.FutureOfJSAnyToJSPromise_get_toJS__closure(t1._as(resolve)), new A.FutureOfJSAnyToJSPromise_get_toJS__closure0(t1._as(reject)), type$.nullable_Object);
    },
    $signature: 40
  };
  A.FutureOfJSAnyToJSPromise_get_toJS__closure.prototype = {
    call$1(value) {
      var t1 = this.resolve;
      t1.call(t1, value);
      return value;
    },
    $signature: 23
  };
  A.FutureOfJSAnyToJSPromise_get_toJS__closure0.prototype = {
    call$2(error, stackTrace) {
      var t1, errorConstructor, box, t2;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = type$.JSObject;
      errorConstructor = type$.JavaScriptFunction._as(t1._as(self).Error);
      t1 = A.callConstructor(errorConstructor, ["Dart exception thrown from converted Future. Use the properties 'error' to fetch the boxed error and 'stack' to recover the stack trace."], t1);
      if (type$.JavaScriptObject._is(error))
        A.throwExpression("Attempting to box non-Dart object.");
      box = {};
      box[$.$get$_jsBoxedDartObjectProperty()] = error;
      t1.error = box;
      t1.stack = stackTrace.toString$0(0);
      t2 = this.reject;
      t2.call(t2, t1);
      return t1;
    },
    $signature: 18
  };
  A.promiseToFuture_closure.prototype = {
    call$1(r) {
      return this.completer.complete$1(this.T._eval$1("0/?")._as(r));
    },
    $signature: 10
  };
  A.promiseToFuture_closure0.prototype = {
    call$1(e) {
      if (e == null)
        return this.completer.completeError$1(new A.NullRejectionException(e === undefined));
      return this.completer.completeError$1(e);
    },
    $signature: 10
  };
  A.NullRejectionException.prototype = {
    toString$0(_) {
      return "Promise was rejected with a value of `" + (this.isUndefined ? "undefined" : "null") + "`.";
    }
  };
  A.JSArrayOfJSString_get_toDart_generator.prototype = {
    call$1(index) {
      return A._asString(this._this[index]);
    },
    $signature: 19
  };
  A.awaitBlock_jsInput.prototype = {
    call$0() {
      return A.futureRefCast(this.input.call$0(), this.T);
    },
    $signature: 20
  };
  A.awaitBlock_closure.prototype = {
    call$2(anchor, value) {
      this.onValue.call$2(type$.JSObject._as(anchor), A.unref(value));
    },
    $signature: 21
  };
  A.awaitBlock_closure0.prototype = {
    call$2(anchor, wrappedError) {
      var val,
        t1 = type$.JSObject;
      t1._as(anchor);
      val = t1._as(t1._as(wrappedError).error)[$.$get$_jsBoxedDartObjectProperty()];
      if (val == null)
        A.throwExpression("Expected a wrapped Dart object, but got a JS object or a wrapped Dart object from a separate runtime instead.");
      this.onError.call$2(anchor, val);
    },
    $signature: 22
  };
  A.eachBlock_jsCollection.prototype = {
    call$0() {
      return A.arrayRefCast(this.collection.call$0(), this.T);
    },
    $signature: 17
  };
  A.eachBlock_jsKey.prototype = {
    call$2(item, index) {
      A._asInt(index);
      return this.key.call$2(A.unref(item), index);
    },
    $signature: 48
  };
  A.bindStringGroup_jsGetValue.prototype = {
    call$0() {
      return A.JSListOfString_get_toJS(this.getValue.call$0());
    },
    $signature: 17
  };
  A.bindStringGroup_jsUpdate.prototype = {
    call$1(jsValues) {
      this.update.call$1(A.JSArrayOfJSString_get_toDart(type$.JSArray_nullable_Object._as(jsValues)));
    },
    $signature: 25
  };
  A.once_closure.prototype = {
    call$1($event) {
      var t1;
      this.T._as($event);
      t1 = this._box_0;
      if (t1.ran)
        return;
      t1.ran = true;
      this.handler.call$1($event);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A.property_closure.prototype = {
    call$0() {
      return A.unref(this.jsFunction.call());
    },
    $signature() {
      return this.T._eval$1("0()");
    }
  };
  A.propertyWithDefault_closure.prototype = {
    call$0() {
      return A.unref(this.jsFunction.call());
    },
    $signature() {
      return this.T._eval$1("0()");
    }
  };
  A.createEventDispatcher_closure.prototype = {
    call$4$bubbles$cancelable(type, detail, bubbles, cancelable) {
      var jsOptions = {bubbles: false, cancelable: false};
      return A._asBool(this.jsFunction.call(null, type, A.ref(detail), jsOptions));
    },
    call$2(type, detail) {
      return this.call$4$bubbles$cancelable(type, detail, false, false);
    },
    $signature: 26
  };
  A.App_handleMousemove.prototype = {
    call$1($event) {
      var t1, t2, t3, t4, t5;
      type$.JSObject._as($event);
      t1 = this.point;
      t2 = A.get(t1);
      t3 = A._asInt($event.clientX);
      J.$indexSet$ax(t2, 0, t3);
      t2 = type$.List_int;
      t4 = type$.int;
      A.mutate(t1, t3, t2, t4);
      t3 = A.get(t1);
      t5 = A._asInt($event.clientY);
      J.$indexSet$ax(t3, 1, t5);
      A.mutate(t1, t5, t2, t4);
    },
    $signature: 2
  };
  A.App_closure31.prototype = {
    call$0() {
      var t1 = this.point;
      self.$$.set_text(this.text, "The mouse position is " + A.S(J.$index$ax(A.get(t1), 0)) + " x " + A.S(J.$index$ax(A.get(t1), 1)));
    },
    $signature: 0
  };
  A.App_toggle0.prototype = {
    call$0() {
      var t1 = this.user,
        t2 = A.get(t1),
        t3 = !A.get(t1).loggedIn;
      t2.loggedIn = t3;
      A.mutate(t1, t3, type$.User, type$.bool);
    },
    $signature: 0
  };
  A.App_closure51.prototype = {
    call$0() {
      return A.get(this.user).loggedIn;
    },
    $signature: 4
  };
  A.App_closure52.prototype = {
    call$1($$$anchor) {
      var button,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      button = t1._as($.$get$_root112().call());
      A.assertHelper(A._asString(button.nodeName) === "BUTTON");
      A.event("click", button, new A.App__closure15(this.toggle), false, t1);
      self.$$.append($$$anchor, button);
    },
    $signature: 2
  };
  A.App__closure15.prototype = {
    call$1($event) {
      return this.toggle.call$0();
    },
    $signature: 3
  };
  A.App_closure53.prototype = {
    call$0() {
      return !A.get(this.user).loggedIn;
    },
    $signature: 4
  };
  A.App_closure54.prototype = {
    call$1($$$anchor) {
      var button1,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      button1 = t1._as($.$get$_root24().call());
      A.assertHelper(A._asString(button1.nodeName) === "BUTTON");
      A.event("click", button1, new A.App__closure14(this.toggle), false, t1);
      self.$$.append($$$anchor, button1);
    },
    $signature: 2
  };
  A.App__closure14.prototype = {
    call$1($event) {
      return this.toggle.call$0();
    },
    $signature: 3
  };
  A.App_handleClick5.prototype = {
    call$0() {
      var t1 = this.count,
        t2 = A.get(t1);
      if (typeof t2 !== "number")
        return t2.$add();
      A.set(t1, t2 + 1, type$.int);
    },
    $signature: 0
  };
  A.App_closure65.prototype = {
    call$0() {
      var t1 = self.$$,
        t2 = this.count,
        t3 = A.S(A.get(t2));
      t2 = J.$eq$(A.get(t2), 1) ? "time" : "times";
      t1.set_text(this.text, "Clicked " + t3 + " " + t2);
    },
    $signature: 0
  };
  A.App_closure66.prototype = {
    call$1($event) {
      return this.handleClick.call$0();
    },
    $signature: 3
  };
  A.App_closure25.prototype = {
    call$0() {
      var t1 = self.$$,
        t2 = this.name;
      t1.set_text(this.text, "Hello, " + A.S(J.get$length$asx(A.get(t2)) !== 0 ? A.get(t2) : "stranger") + "!");
    },
    $signature: 0
  };
  A.App_closure26.prototype = {
    call$0() {
      return A.get(this.name);
    },
    $signature: 8
  };
  A.App_closure27.prototype = {
    call$1($$$value) {
      return A.set(this.name, A._asString($$$value), type$.nullable_Object);
    },
    $signature: 31
  };
  A.App_toggle.prototype = {
    call$0() {
      var t1 = this.user,
        t2 = A.get(t1),
        t3 = !A.get(t1).loggedIn;
      t2.loggedIn = t3;
      A.mutate(t1, t3, type$.User_2, type$.bool);
    },
    $signature: 0
  };
  A.App_closure48.prototype = {
    call$0() {
      return A.get(this.user).loggedIn;
    },
    $signature: 4
  };
  A.App_closure49.prototype = {
    call$1($$$anchor) {
      var button,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      button = t1._as($.$get$_root111().call());
      A.assertHelper(A._asString(button.nodeName) === "BUTTON");
      A.event("click", button, new A.App__closure13(this.toggle), false, t1);
      self.$$.append($$$anchor, button);
    },
    $signature: 2
  };
  A.App__closure13.prototype = {
    call$1($event) {
      return this.toggle.call$0();
    },
    $signature: 3
  };
  A.App_closure50.prototype = {
    call$1($$$anchor) {
      var button1,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      button1 = t1._as($.$get$_root22().call());
      A.assertHelper(A._asString(button1.nodeName) === "BUTTON");
      A.event("click", button1, new A.App__closure12(this.toggle), false, t1);
      self.$$.append($$$anchor, button1);
    },
    $signature: 2
  };
  A.App__closure12.prototype = {
    call$1($event) {
      return this.toggle.call$0();
    },
    $signature: 3
  };
  A.App_closure29.prototype = {
    call$0() {
      var t1 = this.point;
      self.$$.set_text(this.text, "The mouse position is " + A.S(J.$index$ax(A.get(t1), 0)) + " x " + A.S(J.$index$ax(A.get(t1), 1)));
    },
    $signature: 0
  };
  A.App_closure30.prototype = {
    call$1($event) {
      var t1, t2, t3, t4, t5;
      type$.JSObject._as($event);
      t1 = this.point;
      t2 = A.get(t1);
      t3 = A._asInt($event.clientX);
      J.$indexSet$ax(t2, 0, t3);
      t2 = type$.List_int;
      t4 = type$.int;
      A.mutate(t1, t3, t2, t4);
      t3 = A.get(t1);
      t5 = A._asInt($event.clientY);
      J.$indexSet$ax(t3, 1, t5);
      A.mutate(t1, t5, t2, t4);
    },
    $signature: 2
  };
  A.App_closure16.prototype = {
    call$0() {
      var t1 = self.$$,
        t2 = this.a,
        t3 = A.S(A.get(t2)),
        t4 = this.b,
        t5 = A.S(A.get(t4));
      t2 = A.get(t2);
      t4 = A.get(t4);
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t4 !== "number")
        return A.iae(t4);
      t1.set_text(this.text, t3 + " + " + t5 + " = " + A.S(t2 + t4));
    },
    $signature: 0
  };
  A.App_closure17.prototype = {
    call$0() {
      return A.get(this.a);
    },
    $signature: 5
  };
  A.App_closure18.prototype = {
    call$1($$value) {
      return A.set(this.a, A._asInt($$value), type$.nullable_Object);
    },
    $signature: 6
  };
  A.App_closure19.prototype = {
    call$0() {
      return A.get(this.a);
    },
    $signature: 5
  };
  A.App_closure20.prototype = {
    call$1($$value) {
      return A.set(this.a, A._asInt($$value), type$.nullable_Object);
    },
    $signature: 6
  };
  A.App_closure21.prototype = {
    call$0() {
      return A.get(this.b);
    },
    $signature: 5
  };
  A.App_closure22.prototype = {
    call$1($$value) {
      return A.set(this.b, A._asInt($$value), type$.nullable_Object);
    },
    $signature: 6
  };
  A.App_closure23.prototype = {
    call$0() {
      return A.get(this.b);
    },
    $signature: 5
  };
  A.App_closure24.prototype = {
    call$1($$value) {
      return A.set(this.b, A._asInt($$value), type$.nullable_Object);
    },
    $signature: 6
  };
  A.App_handleClick4.prototype = {
    call$0() {
      var t1 = this.count,
        t2 = A.get(t1);
      if (typeof t2 !== "number")
        return t2.$add();
      A.set(t1, t2 + 1, type$.int);
    },
    $signature: 0
  };
  A.App_closure59.prototype = {
    call$0() {
      return A.get(this.count);
    },
    $signature: 0
  };
  A.App_closure60.prototype = {
    call$0() {
      var t1 = A.get(this.count);
      if (typeof t1 !== "number")
        return t1.$mul();
      A.set(this.doubled, t1 * 2, type$.int);
    },
    $signature: 0
  };
  A.App_closure61.prototype = {
    call$0() {
      return A.get(this.doubled);
    },
    $signature: 0
  };
  A.App_closure62.prototype = {
    call$0() {
      var t1 = A.get(this.doubled);
      if (typeof t1 !== "number")
        return t1.$mul();
      A.set(this.quadrupled, t1 * 2, type$.int);
    },
    $signature: 0
  };
  A.App_closure63.prototype = {
    call$0() {
      var t3, _this = this,
        t1 = self,
        t2 = _this.count;
      t1.$$.set_text(_this.text, "Count: " + A.S(A.get(t2)));
      t3 = _this.doubled;
      t1.$$.set_text(_this.text1, A.S(A.get(t2)) + " * 2 = " + A.S(A.get(t3)));
      t1.$$.set_text(_this.text2, A.S(A.get(t3)) + " * 2 = " + A.S(A.get(_this.quadrupled)));
    },
    $signature: 0
  };
  A.App_closure64.prototype = {
    call$1($event) {
      return this.handleClick.call$0();
    },
    $signature: 3
  };
  A.App_closure10.prototype = {
    call$0() {
      return A.get(this.yes);
    },
    $signature: 4
  };
  A.App_closure11.prototype = {
    call$1($$$anchor) {
      var p,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      p = t1._as($.$get$_root10().call());
      A.assertHelper(A._asString(p.nodeName) === "P");
      self.$$.append($$$anchor, p);
    },
    $signature: 2
  };
  A.App_closure12.prototype = {
    call$1($$$anchor) {
      var p1,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      p1 = t1._as($.$get$_root20().call());
      A.assertHelper(A._asString(p1.nodeName) === "P");
      self.$$.append($$$anchor, p1);
    },
    $signature: 2
  };
  A.App_closure13.prototype = {
    call$0() {
      this.button.disabled = !A.boolConversionCheck(A.get(this.yes));
    },
    $signature: 0
  };
  A.App_closure14.prototype = {
    call$0() {
      return A.get(this.yes);
    },
    $signature: 4
  };
  A.App_closure15.prototype = {
    call$1($$$value) {
      return A.set(this.yes, A._asBool($$$value), type$.nullable_Object);
    },
    $signature: 34
  };
  A.App_closure45.prototype = {
    call$0() {
      return this.x > 10;
    },
    $signature: 4
  };
  A.App_closure46.prototype = {
    call$1($$$anchor) {
      var p, t2, text,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      p = t1._as($.$get$_root110().call());
      A.assertHelper(A._asString(p.nodeName) === "P");
      t2 = self;
      text = t1._as(t2.$$.child(p));
      A.assertHelper(A._asString(text.nodeName) === "#text");
      text.nodeValue = "" + this.x + " is greater than 10";
      t2.$$.append($$$anchor, p);
    },
    $signature: 2
  };
  A.App_closure47.prototype = {
    call$1($$$anchor) {
      var t2, fragment1, node1,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t2 = self;
      fragment1 = t1._as(t2.$$.comment());
      node1 = t1._as(t2.$$.first_child(fragment1));
      A.assertHelper(A._asString(node1.nodeName) === "#text");
      t1 = this.x;
      A.ifBlock(node1, new A.App__closure9(t1), new A.App__closure10(t1), new A.App__closure11(t1), true);
      t2.$$.append($$$anchor, fragment1);
    },
    $signature: 2
  };
  A.App__closure9.prototype = {
    call$0() {
      return 5 > this.x;
    },
    $signature: 4
  };
  A.App__closure10.prototype = {
    call$1($$$anchor) {
      var p1, t2, text1,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      p1 = t1._as($.$get$_root31().call());
      A.assertHelper(A._asString(p1.nodeName) === "P");
      t2 = self;
      text1 = t1._as(t2.$$.child(p1));
      A.assertHelper(A._asString(text1.nodeName) === "#text");
      text1.nodeValue = "" + this.x + " is less than 5";
      t2.$$.append($$$anchor, p1);
    },
    $signature: 2
  };
  A.App__closure11.prototype = {
    call$1($$$anchor) {
      var p2, t2, text2,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      p2 = t1._as($.$get$_root40().call());
      A.assertHelper(A._asString(p2.nodeName) === "P");
      t2 = self;
      text2 = t1._as(t2.$$.child(p2));
      A.assertHelper(A._asString(text2.nodeName) === "#text");
      text2.nodeValue = "" + this.x + " is between 5 and 10";
      t2.$$.append($$$anchor, p2);
    },
    $signature: 2
  };
  A.App_handleClick0.prototype = {
    call$0() {
      type$.JSObject._as(self.window).alert("no more alerts");
    },
    $signature: 0
  };
  A.App_closure28.prototype = {
    call$1($event) {
      return this.handleClick.call$0();
    },
    $signature: 3
  };
  A.App_handleClick3.prototype = {
    call$0() {
      var t1 = this.count,
        t2 = A.get(t1);
      if (typeof t2 !== "number")
        return t2.$add();
      A.set(t1, t2 + 1, type$.int);
    },
    $signature: 0
  };
  A.App_closure55.prototype = {
    call$0() {
      return A.get(this.count);
    },
    $signature: 0
  };
  A.App_closure56.prototype = {
    call$0() {
      var t1 = this.count,
        t2 = A.get(t1);
      if (typeof t2 !== "number")
        return t2.$ge();
      if (t2 >= 10) {
        type$.JSObject._as(self.window).alert("count is dangerously high!");
        A.set(t1, 9, type$.int);
      }
    },
    $signature: 0
  };
  A.App_closure57.prototype = {
    call$0() {
      var t1 = self.$$,
        t2 = this.count,
        t3 = A.S(A.get(t2));
      t2 = J.$eq$(A.get(t2), 1) ? "time" : "times";
      t1.set_text(this.text, "Clicked " + t3 + " " + t2);
    },
    $signature: 0
  };
  A.App_closure58.prototype = {
    call$1($event) {
      return this.handleClick.call$0();
    },
    $signature: 3
  };
  A.App_handleMessage0.prototype = {
    call$1($event) {
      var t1 = type$.JSObject;
      t1._as($event);
      t1._as(self.window).alert(A.ComponentEvent_get_detail($event)._0);
    },
    $signature: 2
  };
  A.App_closure43.prototype = {
    call$0() {
      return A.get(this.cats);
    },
    $signature: 35
  };
  A.App_closure44.prototype = {
    call$3($$$anchor, $$$item, index) {
      var li, t2, a, text,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as($$$item);
      A._asInt(index);
      li = t1._as($.$get$_root19().call());
      A.assertHelper(A._asString(li.nodeName) === "LI");
      t2 = self;
      a = t1._as(t2.$$.child(li));
      A.assertHelper(A._asString(a.nodeName) === "A");
      text = t1._as(t2.$$.child(a));
      A.assertHelper(A._asString(text.nodeName) === "#text");
      t1._as(t2.$$.template_effect(type$.JavaScriptFunction._as(A.allowInterop(new A.App__closure8(a, new A.App_closure_id($$$item), text, index, new A.App_closure_name($$$item)), type$.Function))));
      t2.$$.append($$$anchor, li);
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 7
  };
  A.App_closure_id.prototype = {
    call$0() {
      return A.get(this.$$$item)._0;
    },
    $signature: 8
  };
  A.App_closure_name.prototype = {
    call$0() {
      return A.get(this.$$$item)._1;
    },
    $signature: 8
  };
  A.App__closure8.prototype = {
    call$0() {
      var _this = this,
        t1 = self;
      t1.$$.set_attribute(_this.a, "href", "https://www.youtube.com/watch?v=" + A.S(_this.id.call$0()));
      t1.$$.set_text(_this.text, "" + (_this.index + 1) + ": " + A.S(_this.name.call$0()));
    },
    $signature: 0
  };
  A.App_join.prototype = {
    call$1(flavours) {
      var t1, $length;
      type$.List_String._as(flavours);
      t1 = J.getInterceptor$asx(flavours);
      if (t1.get$length(flavours) === 1)
        return t1.$index(flavours, 0);
      $length = t1.get$length(flavours) - 1;
      return J.join$1$ax(t1.sublist$2(flavours, 0, $length), ", ") + " and " + A.S(t1.$index(flavours, $length));
    },
    $signature: 37
  };
  A.App_closure.prototype = {
    call$0() {
      return A.get(this.menu);
    },
    $signature: 14
  };
  A.App_closure0.prototype = {
    call$3($$$anchor, flavour, $$$index) {
      var label3, t3, input3, text, t1 = {},
        t2 = type$.JSObject;
      t2._as($$$anchor);
      t2._as(flavour);
      A._asInt($$$index);
      label3 = t2._as($.$get$_root1().call());
      t3 = self;
      input3 = t2._as(t3.$$.child(label3));
      A.assertHelper(A._asString(input3.nodeName) === "INPUT");
      t3.$$.remove_input_attr_defaults(input3);
      t1.input3value = null;
      text = t2._as(t3.$$.sibling(input3, true));
      A.assertHelper(A._asString(text.nodeName) === "#text");
      t2._as(t3.$$.template_effect(type$.JavaScriptFunction._as(A.allowInterop(new A.App__closure2(t1, flavour, input3, text), type$.Function))));
      t1 = this.flavours;
      A.bindStringGroup(this.bindingGroup1, A._setArrayType([], type$.JSArray_int), input3, new A.App__closure3(flavour, t1), new A.App__closure4(t1));
      t3.$$.append($$$anchor, label3);
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 7
  };
  A.App__closure2.prototype = {
    call$0() {
      var _this = this,
        t1 = _this._box_0,
        t2 = t1.input3value,
        t3 = _this.flavour,
        input3value = A.get(t3);
      t1.input3value = input3value;
      if (t2 != input3value) {
        t1 = _this.input3;
        t1.__value = A.get(t3);
        t2 = A.get(t3);
        t1.value = t2;
      }
      self.$$.set_text(_this.text, " " + A.S(A.get(t3)));
    },
    $signature: 0
  };
  A.App__closure3.prototype = {
    call$0() {
      A.get(this.flavour);
      return A.get(this.flavours);
    },
    $signature: 14
  };
  A.App__closure4.prototype = {
    call$1($$$value) {
      var t1 = type$.List_String;
      A.set(this.flavours, t1._as($$$value), t1);
    },
    $signature: 39
  };
  A.App_closure1.prototype = {
    call$0() {
      return J.get$isEmpty$asx(A.get(this.flavours));
    },
    $signature: 4
  };
  A.App_closure2.prototype = {
    call$1($$$anchor) {
      var p,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      p = t1._as($.$get$_root2().call());
      A.assertHelper(A._asString(p.nodeName) === "P");
      self.$$.append($$$anchor, p);
    },
    $signature: 2
  };
  A.App_closure3.prototype = {
    call$1($$$anchor) {
      var t2, fragment1, node2, t3,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t2 = self;
      fragment1 = t1._as(t2.$$.comment());
      node2 = t1._as(t2.$$.first_child(fragment1));
      A.assertHelper(A._asString(node2.nodeName) === "#text");
      t1 = this.flavours;
      t3 = this.scoops;
      A.ifBlock(node2, new A.App__closure(t1, t3), new A.App__closure0(), new A.App__closure1(t3, this.join, t1), true);
      t2.$$.append($$$anchor, fragment1);
    },
    $signature: 2
  };
  A.App__closure.prototype = {
    call$0() {
      var t1 = J.get$length$asx(A.get(this.flavours)),
        t2 = A.get(this.scoops);
      if (typeof t2 !== "number")
        return A.iae(t2);
      return t1 > t2;
    },
    $signature: 4
  };
  A.App__closure0.prototype = {
    call$1($$$anchor) {
      var p1,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      p1 = t1._as($.$get$_root4().call());
      A.assertHelper(A._asString(p1.nodeName) === "P");
      self.$$.append($$$anchor, p1);
    },
    $signature: 2
  };
  A.App__closure1.prototype = {
    call$1($$$anchor) {
      var p2, t2, text1,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      p2 = t1._as($.$get$_root5().call());
      A.assertHelper(A._asString(p2.nodeName) === "P");
      t2 = self;
      text1 = t1._as(t2.$$.child(p2));
      A.assertHelper(A._asString(text1.nodeName) === "#text");
      t1._as(t2.$$.template_effect(type$.JavaScriptFunction._as(A.allowInterop(new A.App___closure(text1, this.scoops, this.join, this.flavours), type$.Function))));
      t2.$$.append($$$anchor, p2);
    },
    $signature: 2
  };
  A.App___closure.prototype = {
    call$0() {
      var _this = this,
        t1 = self.$$,
        t2 = _this.scoops,
        t3 = A.S(A.get(t2));
      t2 = J.$eq$(A.get(t2), 1) ? "scoop" : "scoops";
      t1.set_text(_this.text1, "You ordered " + t3 + " " + t2 + " of " + A.S(_this.join.call$1(A.get(_this.flavours))));
    },
    $signature: 0
  };
  A.App_closure4.prototype = {
    call$0() {
      return A.get(this.scoops);
    },
    $signature: 5
  };
  A.App_closure5.prototype = {
    call$1($$$value) {
      A.set(this.scoops, A._asInt($$$value), type$.int);
    },
    $signature: 6
  };
  A.App_closure6.prototype = {
    call$0() {
      return A.get(this.scoops);
    },
    $signature: 5
  };
  A.App_closure7.prototype = {
    call$1($$$value) {
      A.set(this.scoops, A._asInt($$$value), type$.int);
    },
    $signature: 6
  };
  A.App_closure8.prototype = {
    call$0() {
      return A.get(this.scoops);
    },
    $signature: 5
  };
  A.App_closure9.prototype = {
    call$1($$$value) {
      A.set(this.scoops, A._asInt($$$value), type$.int);
    },
    $signature: 6
  };
  A.App_handleMessage.prototype = {
    call$1($event) {
      var t1 = type$.JSObject;
      t1._as($event);
      t1._as(self.window).alert(A.ComponentEvent_get_detail($event)._0);
    },
    $signature: 2
  };
  A.App_closure67.prototype = {
    call$0() {
      return this.string;
    },
    $signature: 8
  };
  A.App_handleClick2.prototype = {
    call$0() {
      var t1 = this.things;
      A.set(t1, J.sublist$1$ax(A.get(t1), 1), type$.List_Record_2_String_color_and_int_id);
    },
    $signature: 0
  };
  A.App_closure37.prototype = {
    call$0() {
      return A.get(this.things);
    },
    $signature: 16
  };
  A.App_closure38.prototype = {
    call$2(thing, index) {
      return "" + type$.Record_2_String_color_and_int_id._as(thing)._1;
    },
    $signature: 41
  };
  A.App_closure39.prototype = {
    call$3($$$anchor, thing, index) {
      var t2, fragment1, node1, thingProperties,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as(thing);
      A._asInt(index);
      t2 = self;
      fragment1 = t1._as(t2.$$.comment());
      node1 = t1._as(t2.$$.child(fragment1));
      A.assertHelper(A._asString(node1.nodeName) === "#text");
      thingProperties = {};
      t2.$$.set_getter(thingProperties, "current", type$.JavaScriptFunction._as(A.allowInterop(new A.App__closure7(thing), type$.Function)));
      A.Thing(node1, thingProperties);
      t2.$$.append($$$anchor, fragment1);
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 7
  };
  A.App__closure7.prototype = {
    call$0() {
      return A.ref(A.get(this.thing)._0);
    },
    $signature: 13
  };
  A.App_closure40.prototype = {
    call$0() {
      return A.get(this.things);
    },
    $signature: 16
  };
  A.App_closure41.prototype = {
    call$3($$$anchor, thing, $$$index) {
      var t2, fragment2, node3, thing$properties,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      t1._as(thing);
      A._asInt($$$index);
      t2 = self;
      fragment2 = t1._as(t2.$$.comment());
      node3 = t1._as(t2.$$.child(fragment2));
      A.assertHelper(A._asString(node3.nodeName) === "#text");
      thing$properties = {};
      t2.$$.set_getter(thing$properties, "current", type$.JavaScriptFunction._as(A.allowInterop(new A.App__closure6(thing), type$.Function)));
      A.Thing(node3, thing$properties);
      t2.$$.append($$$anchor, fragment2);
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 7
  };
  A.App__closure6.prototype = {
    call$0() {
      return A.ref(A.get(this.thing)._0);
    },
    $signature: 13
  };
  A.App_closure42.prototype = {
    call$1($event) {
      return this.handleClick.call$0();
    },
    $signature: 3
  };
  A.App_getRandomNumber.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, t1, response, text;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSObject;
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(t1._as(t1._as(self.window).fetch("https://svelte.dev/tutorial/random-number")), t1), $async$call$0);
            case 3:
              // returning from await.
              response = $async$result;
              $async$goto = 4;
              return A._asyncAwait(A.promiseToFuture(t1._as(response.text()), type$.String), $async$call$0);
            case 4:
              // returning from await.
              text = $async$result;
              if (A._asBool(response.ok)) {
                $async$returnValue = text;
                // goto return
                $async$goto = 1;
                break;
              }
              throw A.wrapException(A.Exception_Exception(A.JSStringToString_get_toDart(text)));
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 12
  };
  A.App_handleClick1.prototype = {
    call$0() {
      A.set(this.future, this.getRandomNumber.call$0(), type$.Future_String);
    },
    $signature: 0
  };
  A.App_closure32.prototype = {
    call$0() {
      return A.get(this.future);
    },
    $signature: 12
  };
  A.App_closure33.prototype = {
    call$1($$$anchor) {
      var p,
        t1 = type$.JSObject;
      t1._as($$$anchor);
      p = t1._as($.$get$_root15().call());
      A.assertHelper(A._asString(p.nodeName) === "P");
      self.$$.append($$$anchor, p);
    },
    $signature: 2
  };
  A.App_closure34.prototype = {
    call$2($$$anchor, number) {
      var t1, p1, t2, text1;
      A._asString(number);
      t1 = type$.JSObject;
      p1 = t1._as($.$get$_root21().call());
      A.assertHelper(A._asString(p1.nodeName) === "P");
      t2 = self;
      text1 = t1._as(t2.$$.child(p1));
      A.assertHelper(A._asString(text1.nodeName) === "#text");
      text1.nodeValue = "The number is " + number;
      t2.$$.append($$$anchor, p1);
    },
    $signature: 44
  };
  A.App_closure35.prototype = {
    call$2($$$anchor, error) {
      var t2, text2,
        t1 = type$.JSObject,
        p2 = t1._as($.$get$_root30().call());
      A.assertHelper(A._asString(p2.nodeName) === "P");
      t2 = self;
      text2 = t1._as(t2.$$.child(p2));
      A.assertHelper(A._asString(text2.nodeName) === "#text");
      t1._as(t2.$$.template_effect(type$.JavaScriptFunction._as(A.allowInterop(new A.App__closure5(text2, error), type$.Function))));
      t2.$$.append($$$anchor, p2);
    },
    $signature: 45
  };
  A.App__closure5.prototype = {
    call$0() {
      self.$$.set_text(this.text2, A.S(this.error));
    },
    $signature: 0
  };
  A.App_closure36.prototype = {
    call$1($event) {
      return this.handleClick.call$0();
    },
    $signature: 3
  };
  A.App_handleClick.prototype = {
    call$0() {
      type$.JSObject._as(self.window).alert("clicked");
    },
    $signature: 0
  };
  A.App_$click.prototype = {
    call$1($event) {
      type$.JSObject._as($event);
      this.handleClick.call$0();
    },
    $signature: 2
  };
  A.CustomButton_closure.prototype = {
    call$1($event) {
      type$.JSObject._as($event);
      self.$$.bubble_event(this.$$$properties, $event);
    },
    $signature: 2
  };
  A.Info_closure.prototype = {
    call$0() {
      var t5, _this = this,
        t1 = self,
        t2 = t1.$$,
        t3 = _this.name,
        t4 = t3.call$0();
      t4 = t4 == null ? "" : A.S(t4);
      t2.set_text(_this.text, t4);
      t4 = t1.$$;
      t2 = _this.speed.call$0();
      t2 = t2 == null ? "" : A.S(t2);
      t5 = _this.version.call$0();
      t5 = t5 == null ? "" : A.S(t5);
      t4.set_text(_this.text1, " package is " + t2 + " fast. Download version " + t5 + " from ");
      t5 = t1.$$;
      t3 = t3.call$0();
      t2 = t3 == null ? "" : A.S(t3);
      t5.set_attribute(_this.a, "href", "https://www.npmjs.com/package/" + t2);
      t1 = t1.$$;
      t2 = _this.website.call$0();
      t2 = t2 == null ? "" : A.S(t2);
      t1.set_attribute(_this.a1, "href", t2);
    },
    $signature: 0
  };
  A.Inner_sayHello0.prototype = {
    call$0() {
      this.dispatch.call$2("message", B.Record1_MXO);
    },
    $signature: 0
  };
  A.Inner_closure0.prototype = {
    call$1($event) {
      return this.sayHello.call$0();
    },
    $signature: 3
  };
  A.Inner_sayHello.prototype = {
    call$0() {
      this.dispatch.call$2("message", B.Record1_MXO);
    },
    $signature: 0
  };
  A.Inner_closure.prototype = {
    call$1($event) {
      return this.sayHello.call$0();
    },
    $signature: 3
  };
  A.main_onChange.prototype = {
    call$1($event) {
      var _0_0, component, error, stackTrace, t2, t3, t4, exception, _this = this,
        t1 = type$.JSObject;
      t1._as($event);
      try {
        t2 = _this._box_0;
        _0_0 = t2.current;
        component = null;
        if (_0_0 != null) {
          component = _0_0;
          self.$$.unmount(component);
        }
        t1 = t1._as(t1._as(self.window).location);
        t3 = _this.select;
        t4 = A._asString(t3.value);
        _this.link.hash = t4;
        t1.hash = t4;
        t2.current = A.mountComponent(A._asString(t3.value), _this.target);
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        A.print(error);
        A.print(stackTrace);
        throw exception;
      }
    },
    $signature: 2
  };
  A.Nested_closure0.prototype = {
    call$0() {
      var t1 = self.$$,
        t2 = this.answer.call$0();
      t2 = t2 == null ? "" : A.S(t2);
      t1.set_text(this.text, "The answer is " + t2);
    },
    $signature: 0
  };
  A.Nested_closure.prototype = {
    call$0() {
      self.$$.set_text(this.text, "The answer is " + A.S(this.answer.call$0()));
    },
    $signature: 0
  };
  A.Outer_$message.prototype = {
    call$1($event) {
      type$.JSObject._as($event);
      self.$$.bubble_event(this.$$$properties, $event);
    },
    $signature: 2
  };
  A.Thing_closure.prototype = {
    call$0() {
      var t1 = self.$$,
        t2 = this.current.call$0();
      t2 = t2 == null ? "" : A.S(t2);
      t1.set_attribute(this.span1, "style", "background-color: " + t2);
    },
    $signature: 0
  };
  A.User0.prototype = {};
  A.User.prototype = {};
  (function aliases() {
    var _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static = hunkHelpers.installStaticTearOff,
      _static_2 = hunkHelpers._static_2;
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 9);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 9);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 9);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static(A, "each__index$closure", 2, null, ["call$1$2", "call$2"], ["index", function(item, index) {
      return A.index(item, index, type$.nullable_Object);
    }], 47, 0);
    _static_2(A, "app16__App$closure", "App", 1);
    _static_2(A, "app10__App$closure", "App0", 1);
    _static_2(A, "app4__App$closure", "App1", 1);
    _static_2(A, "app22__App$closure", "App2", 1);
    _static_2(A, "app11__App$closure", "App3", 1);
    _static_2(A, "app17__App$closure", "App4", 1);
    _static_2(A, "app23__App$closure", "App5", 1);
    _static_2(A, "app5__App$closure", "App6", 1);
    _static_2(A, "app24__App$closure", "App7", 1);
    _static_2(A, "app12__App$closure", "App8", 1);
    _static_2(A, "app18__App$closure", "App9", 1);
    _static_2(A, "app6__App$closure", "App10", 1);
    _static_2(A, "app19__App$closure", "App11", 1);
    _static_2(A, "app13__App$closure", "App12", 1);
    _static_2(A, "app25__App$closure", "App13", 1);
    _static_2(A, "app20__App$closure", "App14", 1);
    _static_2(A, "app3__App$closure", "App15", 1);
    _static_2(A, "app14__App$closure", "App16", 1);
    _static_2(A, "app15__App$closure", "App17", 1);
    _static_2(A, "app21__App$closure", "App18", 1);
    _static_2(A, "app7__App$closure", "App19", 1);
    _static_2(A, "app__App$closure", "App20", 1);
    _static_2(A, "app8__App$closure", "App21", 1);
    _static_2(A, "app0__App$closure", "App22", 1);
    _static_2(A, "app9__App$closure", "App23", 1);
    _static_2(A, "app1__App$closure", "App24", 1);
    _static_2(A, "app2__App$closure", "App25", 1);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Error, A.SentinelValue, A.Iterable, A.ListIterator, A.FixedLengthListMixin, A.Symbol, A._Record, A.MapView, A.ConstantMap, A.Closure, A.JSInvocationMirror, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A._Required, A.MapBase, A.LinkedHashMapCell, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A.AsyncError, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A._StreamIterator, A._Zone, A.ListBase, A._UnmodifiableMapMixin, A.StackOverflowError, A._Exception, A.Null, A._StringStackTrace, A.StringBuffer, A.NullRejectionException, A.User0, A.User]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JavaScriptBigInt, J.JavaScriptSymbol, J.JSNumber, J.JSString]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, J.JSArray, A.NativeByteBuffer, A.NativeTypedData]);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A._CyclicInitializationError, A.RuntimeError, A.AssertionError, A._Error, A.ArgumentError, A.NoSuchMethodError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError]);
    _inherit(A.EfficientLengthIterable, A.Iterable);
    _inherit(A.ListIterable, A.EfficientLengthIterable);
    _inherit(A.SubListIterable, A.ListIterable);
    _inheritMany(A._Record, [A._Record1, A._Record2]);
    _inherit(A._Record_1_tex78t, A._Record1);
    _inheritMany(A._Record2, [A._Record_2_color_id, A._Record_2_id_name]);
    _inherit(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A.MapView);
    _inherit(A.UnmodifiableMapView, A._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(A.ConstantMapView, A.UnmodifiableMapView);
    _inherit(A.ConstantStringMap, A.ConstantMap);
    _inheritMany(A.Closure, [A.Instantiation, A.Closure2Args, A.Closure0Args, A.TearOffClosure, A.assertInteropArgs_closure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A._Future__chainForeignFuture_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A.FutureOfJSAnyToJSPromise_get_toJS__closure, A.promiseToFuture_closure, A.promiseToFuture_closure0, A.JSArrayOfJSString_get_toDart_generator, A.bindStringGroup_jsUpdate, A.once_closure, A.createEventDispatcher_closure, A.App_handleMousemove, A.App_closure52, A.App__closure15, A.App_closure54, A.App__closure14, A.App_closure66, A.App_closure27, A.App_closure49, A.App__closure13, A.App_closure50, A.App__closure12, A.App_closure30, A.App_closure18, A.App_closure20, A.App_closure22, A.App_closure24, A.App_closure64, A.App_closure11, A.App_closure12, A.App_closure15, A.App_closure46, A.App_closure47, A.App__closure10, A.App__closure11, A.App_closure28, A.App_closure58, A.App_handleMessage0, A.App_closure44, A.App_join, A.App_closure0, A.App__closure4, A.App_closure2, A.App_closure3, A.App__closure0, A.App__closure1, A.App_closure5, A.App_closure7, A.App_closure9, A.App_handleMessage, A.App_closure39, A.App_closure41, A.App_closure42, A.App_closure33, A.App_closure36, A.App_$click, A.CustomButton_closure, A.Inner_closure0, A.Inner_closure, A.main_onChange, A.Outer_$message]);
    _inherit(A.Instantiation1, A.Instantiation);
    _inheritMany(A.Closure2Args, [A.Primitives_functionNoSuchMethod_closure, A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A._Future__chainForeignFuture_closure0, A.MapBase_mapToString_closure, A.NoSuchMethodError_toString_closure, A.FutureOfJSAnyToJSPromise_get_toJS_closure, A.FutureOfJSAnyToJSPromise_get_toJS__closure0, A.awaitBlock_closure, A.awaitBlock_closure0, A.eachBlock_jsKey, A.App_closure38, A.App_closure34, A.App_closure35]);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A._AssertionError, A.AssertionError);
    _inherit(A.JsLinkedHashMap, A.MapBase);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfDouble, [A.NativeFloat32List, A.NativeFloat64List]);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8ClampedList, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A.Closure0Args, [A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainForeignFuture_closure1, A._Future__chainCoreFutureAsync_closure, A._Future__asyncCompleteWithValue_closure, A._Future__asyncCompleteError_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A._rootHandleError_closure, A._RootZone_bindCallbackGuarded_closure, A.awaitBlock_jsInput, A.eachBlock_jsCollection, A.bindStringGroup_jsGetValue, A.property_closure, A.propertyWithDefault_closure, A.App_closure31, A.App_toggle0, A.App_closure51, A.App_closure53, A.App_handleClick5, A.App_closure65, A.App_closure25, A.App_closure26, A.App_toggle, A.App_closure48, A.App_closure29, A.App_closure16, A.App_closure17, A.App_closure19, A.App_closure21, A.App_closure23, A.App_handleClick4, A.App_closure59, A.App_closure60, A.App_closure61, A.App_closure62, A.App_closure63, A.App_closure10, A.App_closure13, A.App_closure14, A.App_closure45, A.App__closure9, A.App_handleClick0, A.App_handleClick3, A.App_closure55, A.App_closure56, A.App_closure57, A.App_closure43, A.App_closure_id, A.App_closure_name, A.App__closure8, A.App_closure, A.App__closure2, A.App__closure3, A.App_closure1, A.App__closure, A.App___closure, A.App_closure4, A.App_closure6, A.App_closure8, A.App_closure67, A.App_handleClick2, A.App_closure37, A.App__closure7, A.App_closure40, A.App__closure6, A.App_getRandomNumber, A.App_handleClick1, A.App_closure32, A.App__closure5, A.App_handleClick, A.Info_closure, A.Inner_sayHello0, A.Inner_sayHello, A.Nested_closure0, A.Nested_closure, A.Thing_closure]);
    _inherit(A._AsyncCompleter, A._Completer);
    _inherit(A._RootZone, A._Zone);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._UnmodifiableMapMixin);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List", Object: "Object", Map: "Map"},
    mangledNames: {},
    types: ["~()", "~(JSObject,JSObject)", "~(JSObject)", "~(Object?)", "bool()", "int()", "~(int)", "~(JSObject,JSObject,int)", "String()", "~(~())", "~(@)", "Null()", "Future<String>()", "Object?()", "List<String>()", "Null(@)", "List<+color,id(String,int)>()", "JSArray<Object?>()", "JSObject(Object,StackTrace)", "String(int)", "JSObject()", "Null(JSObject,Object?)", "Null(JSObject,JSObject)", "Object?(Object?)", "~(String,@)", "~(JSArray<Object?>)", "bool(String,Object?{bubbles:bool,cancelable:bool})", "@(@)", "@(@,String)", "@(String)", "~(Symbol0,@)", "~(String)", "~(Object?,Object?)", "_Future<@>(@)", "~(bool)", "List<+id,name(String,String)>()", "Null(Object,StackTrace)", "String(List<String>)", "~(int,@)", "~(List<String>)", "Null(JavaScriptFunction,JavaScriptFunction)", "String(+color,id(String,int),int)", "Null(@,StackTrace)", "bool(Object?)", "~(JSObject,String)", "~(JSObject,Object)", "Null(~())", "String(0^,int)<Object?>", "String(Object?,int)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti"),
    rttc: {
      "1;text": t1 => o => o instanceof A._Record_1_tex78t && t1._is(o._0),
      "2;color,id": (t1, t2) => o => o instanceof A._Record_2_color_id && t1._is(o._0) && t2._is(o._1),
      "2;id,name": (t1, t2) => o => o instanceof A._Record_2_id_name && t1._is(o._0) && t2._is(o._1)
    }
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"JavaScriptFunction":"LegacyJavaScriptObject","PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JSArray":{"List":["1"],"JavaScriptObject":[],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"]},"JSBool":{"bool":[],"TrustedGetRuntimeType":[]},"JSNull":{"Null":[],"TrustedGetRuntimeType":[]},"JavaScriptObject":{"JSObject":[]},"LegacyJavaScriptObject":{"JavaScriptObject":[],"JSObject":[]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"JavaScriptObject":[],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"]},"JSNumber":{"double":[],"num":[]},"JSInt":{"double":[],"int":[],"num":[],"TrustedGetRuntimeType":[]},"JSNumNotInt":{"double":[],"num":[],"TrustedGetRuntimeType":[]},"JSString":{"String":[],"TrustedGetRuntimeType":[]},"LateError":{"Error":[]},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"Symbol":{"Symbol0":[]},"_Record_1_tex78t":{"_Record1":[],"_Record":[]},"_Record_2_color_id":{"_Record2":[],"_Record":[]},"_Record_2_id_name":{"_Record2":[],"_Record":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"Instantiation":{"Closure":[],"Function":[]},"Instantiation1":{"Closure":[],"Function":[]},"JSInvocationMirror":{"Invocation":[]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Closure":[],"Function":[]},"Closure2Args":{"Closure":[],"Function":[]},"TearOffClosure":{"Closure":[],"Function":[]},"StaticClosure":{"Closure":[],"Function":[]},"BoundClosure":{"Closure":[],"Function":[]},"_CyclicInitializationError":{"Error":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapBase":["1","2"],"Map":["1","2"]},"_Record2":{"_Record":[]},"_Record1":{"_Record":[]},"NativeByteBuffer":{"JavaScriptObject":[],"JSObject":[],"TrustedGetRuntimeType":[]},"NativeTypedData":{"JavaScriptObject":[],"JSObject":[]},"NativeByteData":{"JavaScriptObject":[],"JSObject":[],"TrustedGetRuntimeType":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"JavaScriptObject":[],"JSObject":[]},"NativeTypedArrayOfDouble":{"ListBase":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"JavaScriptObject":[],"EfficientLengthIterable":["double"],"JSObject":[],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"ListBase":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"JavaScriptObject":[],"EfficientLengthIterable":["double"],"JSObject":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double"},"NativeFloat64List":{"ListBase":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"JavaScriptObject":[],"EfficientLengthIterable":["double"],"JSObject":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double"},"NativeInt16List":{"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeInt32List":{"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeInt8List":{"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeUint16List":{"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeUint32List":{"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeUint8ClampedList":{"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeUint8List":{"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"_Future":{"Future":["1"]},"AsyncError":{"Error":[]},"_AsyncCompleter":{"_Completer":["1"]},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"MapBase":{"Map":["1","2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"double":{"num":[]},"int":{"num":[]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"NoSuchMethodError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"StackOverflowError":{"Error":[]},"_StringStackTrace":{"StackTrace":[]},"Int8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8ClampedList":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Float32List":{"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"Float64List":{"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"EfficientLengthIterable":1,"NativeTypedArray":1}'));
  var string$ = {
    x09div_s: "\tdiv.svelte-1c44y5p {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}",
    x09p_sve: "\tp.svelte-urs9w7 {\n\t\tcolor: purple;\n\t\tfont-family: 'Comic Sans MS', cursive;\n\t\tfont-size: 2em;\n\t}\n",
    x3cp_Tha: "<p>Thank you. We will bombard your inbox and sell your personal details.</p>",
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type"
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      AsyncError: findType("AsyncError"),
      ConstantMapView_Symbol_dynamic: findType("ConstantMapView<Symbol0,@>"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Error: findType("Error"),
      Function: findType("Function"),
      Future_String: findType("Future<String>"),
      Future_dynamic: findType("Future<@>"),
      Invocation: findType("Invocation"),
      Iterable_dynamic: findType("Iterable<@>"),
      JSArray_Object: findType("JSArray<Object>"),
      JSArray_Record_2_String_color_and_int_id: findType("JSArray<+color,id(String,int)>"),
      JSArray_Record_2_String_id_and_String_name: findType("JSArray<+id,name(String,String)>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_Object: findType("JSArray<Object?>"),
      JSNull: findType("JSNull"),
      JSObject: findType("JSObject"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      JavaScriptObject: findType("JavaScriptObject"),
      JsLinkedHashMap_Symbol_dynamic: findType("JsLinkedHashMap<Symbol0,@>"),
      List_Record_2_String_color_and_int_id: findType("List<+color,id(String,int)>"),
      List_Record_2_String_id_and_String_name: findType("List<+id,name(String,String)>"),
      List_String: findType("List<String>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      Null: findType("Null"),
      Object: findType("Object"),
      Record: findType("Record"),
      Record_0: findType("+()"),
      Record_2_String_color_and_int_id: findType("+color,id(String,int)"),
      Record_2_String_id_and_String_name: findType("+id,name(String,String)"),
      StackTrace: findType("StackTrace"),
      String: findType("String"),
      Symbol: findType("Symbol0"),
      TrustedGetRuntimeType: findType("TrustedGetRuntimeType"),
      TypeError: findType("TypeError"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      User: findType("User0"),
      User_2: findType("User"),
      _Future_dynamic: findType("_Future<@>"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_JSObject: findType("JSObject?"),
      nullable_Object: findType("Object?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.CONSTANT = new A.Instantiation1(A.each__index$closure(), A.findType("Instantiation1<Object?>"));
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof HTMLElement == "function";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (typeof userAgent != "string") return hooks;
    if (userAgent.indexOf("DumpRenderTree") >= 0) return hooks;
    if (userAgent.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST5 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_SentinelValue = new A.SentinelValue();
    B.C__Required = new A._Required();
    B.C__RootZone = new A._RootZone();
    B.C__StringStackTrace = new A._StringStackTrace();
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_dynamic);
    B.Object_empty = {};
    B.Map_empty = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<Symbol0,@>"));
    B.Record1_MXO = new A._Record_1_tex78t("Hello!");
    B.Record2_id_z_AbfPXTKms_name_Maru = new A._Record_2_id_name("z_AbfPXTKms", "Maru");
    B.Record2_omC = new A._Record_2_id_name("OUtn3pvWmpg", "Henri The Existential Cat");
    B.Record2_rt1 = new A._Record_2_id_name("J---aiyznGQ", "Keyboard Cat");
    B.Symbol_call = new A.Symbol("call");
    B.Type_ByteBuffer_EOZ = A.typeLiteral("ByteBuffer");
    B.Type_ByteData_mF8 = A.typeLiteral("ByteData");
    B.Type_Float32List_Ymk = A.typeLiteral("Float32List");
    B.Type_Float64List_Ymk = A.typeLiteral("Float64List");
    B.Type_Int16List_cot = A.typeLiteral("Int16List");
    B.Type_Int32List_m1p = A.typeLiteral("Int32List");
    B.Type_Int8List_woc = A.typeLiteral("Int8List");
    B.Type_Object_QJv = A.typeLiteral("Object");
    B.Type_Uint16List_2mh = A.typeLiteral("Uint16List");
    B.Type_Uint32List_2mh = A.typeLiteral("Uint32List");
    B.Type_Uint8ClampedList_9Bb = A.typeLiteral("Uint8ClampedList");
    B.Type_Uint8List_CSc = A.typeLiteral("Uint8List");
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.toStringVisiting = A._setArrayType([], type$.JSArray_Object);
    $.Primitives__identityHashCodeProperty = null;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._Record__computedFieldKeys = A._setArrayType([], A.findType("JSArray<List<Object>?>"));
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_QJv));
    _lazyFinal($, "_jsBoxedDartObjectProperty", "$get$_jsBoxedDartObjectProperty", () => Symbol("jsBoxedDartObjectProperty"));
    _lazyFinal($, "_root", "$get$_root13", () => A.template('<div class="svelte-1c44y5p"> </div>', type$.JSObject));
    _lazyFinal($, "_root0", "$get$_root39", () => A.template("<h1> </h1>", type$.JSObject));
    _lazyFinal($, "_root1", "$get$_root112", () => A.template("<button>Log out</button>", type$.JSObject));
    _lazyFinal($, "_root2", "$get$_root24", () => A.template("<button>Log in</button>", type$.JSObject));
    _lazyFinal($, "_root3", "$get$_root23", () => A.fragment("<!> <!>"));
    _lazyFinal($, "_root4", "$get$_root33", () => A.template("<button> </button>", type$.JSObject));
    _lazyFinal($, "_root5", "$get$_root6", () => A.fragment('<input placeholder="Enter your name"> <p> </p>'));
    _lazyFinal($, "_root6", "$get$_root26", () => A.fragment("<!> <!>"));
    _lazyFinal($, "_root7", "$get$_root38", () => A.template("<img>", type$.JSObject));
    _lazyFinal($, "_root10", "$get$_root111", () => A.template("<button>Log out</button>", type$.JSObject));
    _lazyFinal($, "_root20", "$get$_root22", () => A.template("<button>Log in</button>", type$.JSObject));
    _lazyFinal($, "_root8", "$get$_root12", () => A.template('<div class="svelte-1c44y5p"> </div>', type$.JSObject));
    _lazyFinal($, "_root9", "$get$_root3", () => A.fragment('<label><input type="number" min="0" max="10"> <input type="range" min="0" max="10"></label> <label><input type="number" min="0" max="10"> <input type="range" min="0" max="10"></label> <p> </p>'));
    _lazyFinal($, "_root11", "$get$_root32", () => A.fragment("<button> </button> <p> </p> <p> </p>"));
    _lazyFinal($, "_root12", "$get$_root10", () => A.template(string$.x3cp_Tha, type$.JSObject));
    _lazyFinal($, "_root21", "$get$_root20", () => A.template(string$.x3cp_Tha, type$.JSObject));
    _lazyFinal($, "_root13", "$get$_root0", () => A.fragment('<label><input type="checkbox"> Yes! Send me regular email spam</label> <!> <button>Subscribe</button>'));
    _lazyFinal($, "_root14", "$get$_root110", () => A.template("<p> </p>", type$.JSObject));
    _lazyFinal($, "_root30", "$get$_root31", () => A.template("<p> </p>", type$.JSObject));
    _lazyFinal($, "_root40", "$get$_root40", () => A.template("<p> </p>", type$.JSObject));
    _lazyFinal($, "_root15", "$get$_root11", () => A.template("<button>Click me</button>", type$.JSObject));
    _lazyFinal($, "_root16", "$get$_root29", () => A.template("<button> </button>", type$.JSObject));
    _lazyFinal($, "_root17", "$get$_root37", () => A.template('<p class="svelte-urs9w7">Styled!</p>', type$.JSObject));
    _lazyFinal($, "_root18", "$get$_root19", () => A.template('<li><a target="_blank" rel="noreferrer"> </a></li>', type$.JSObject));
    _lazyFinal($, "_root19", "$get$_root18", () => A.fragment("<h1>The Famous Cats of YouTube</h1> <ul></ul>"));
    _lazyFinal($, "_root110", "$get$_root1", () => A.template('<label><input type="checkbox"> </label>', type$.JSObject));
    _lazyFinal($, "_root22", "$get$_root2", () => A.template("<p>Please select at least one flavour</p>", type$.JSObject));
    _lazyFinal($, "_root41", "$get$_root4", () => A.template("<p>Can't order more flavours than scoops!</p>", type$.JSObject));
    _lazyFinal($, "_root50", "$get$_root5", () => A.template("<p> </p>", type$.JSObject));
    _lazyFinal($, "_root23", "$get$_root", () => A.fragment('<h2>Size</h2> <label><input type="radio"> One scoop</label> <label><input type="radio"> Two scoops</label> <label><input type="radio"> Three scoops</label> <h2>Flavours</h2> <!> <!>'));
    _lazyFinal($, "_root24", "$get$_root35", () => A.fragment('<p class="svelte-urs9w7">These styles...</p> <!>'));
    _lazyFinal($, "_root25", "$get$_root34", () => A.template("<p><!></p>", type$.JSObject));
    _lazyFinal($, "_root26", "$get$_root16", () => A.fragment('<button>Remove first thing</button> <div style="display: grid; grid-template-columns: 1fr 1fr; grid-gap: 1em"><div><h2>Keyed</h2> <!></div> <div><h2>Unkeyed</h2> <!></div></div>'));
    _lazyFinal($, "_root111", "$get$_root15", () => A.template("<p>...waiting</p>", type$.JSObject));
    _lazyFinal($, "_root27", "$get$_root21", () => A.template("<p> </p>", type$.JSObject));
    _lazyFinal($, "_root31", "$get$_root30", () => A.template('<p style="color: red"> </p>', type$.JSObject));
    _lazyFinal($, "_root28", "$get$_root14", () => A.fragment("<button>generate random number</button> <!>"));
    _lazyFinal($, "_root29", "$get$_root7", () => A.template('<button class="svelte-hg07jm">Click me</button>', type$.JSObject));
    _lazyFinal($, "_root32", "$get$_root25", () => A.template("<p>The <code> </code> <a>npm</a> and <a>learn more here</a>.</p>", type$.JSObject));
    _lazyFinal($, "_root33", "$get$_root9", () => A.template("<button>Click to say hello</button>", type$.JSObject));
    _lazyFinal($, "_root34", "$get$_root8", () => A.template("<button>Click to say hello</button>", type$.JSObject));
    _lazyFinal($, "_root35", "$get$_root28", () => A.template("<p> </p>", type$.JSObject));
    _lazyFinal($, "_root36", "$get$_root27", () => A.template("<p> </p>", type$.JSObject));
    _lazyFinal($, "_root37", "$get$_root36", () => A.template("<p>...don't affect this element</p>", type$.JSObject));
    _lazyFinal($, "_root38", "$get$_root17", () => A.template('<p><span class="svelte-dgndg6">initial</span> <span class="svelte-dgndg6">current</span></p>', type$.JSObject));
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: A.NativeByteBuffer, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Float32Array: A.NativeFloat32List, Float64Array: A.NativeFloat64List, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8ClampedArray: A.NativeUint8ClampedList, CanvasPixelArray: A.NativeUint8ClampedList, Uint8Array: A.NativeUint8List});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i) {
        scripts[i].removeEventListener("load", onLoad, false);
      }
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].addEventListener("load", onLoad, false);
    }
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function") {
      dartMainRunner(callMain, []);
    } else {
      callMain([]);
    }
  });
})();

//# sourceMappingURL=main.dart.js.map
