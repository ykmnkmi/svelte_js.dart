{"version":3,"file":"svelte.js","sources":["../../../node_modules/svelte/src/internal/client/utils.js","../../../node_modules/svelte/src/internal/client/constants.js","../../../node_modules/svelte/src/internal/client/reactivity/equality.js","../../../node_modules/svelte/src/constants.js","../../../node_modules/svelte/src/internal/client/reactivity/sources.js","../../../node_modules/svelte/src/internal/shared/utils.js","../../../node_modules/svelte/src/internal/client/dom/task.js","../../../node_modules/svelte/src/internal/client/reactivity/deriveds.js","../../../node_modules/svelte/src/internal/client/runtime.js","../../../node_modules/svelte/src/internal/client/dom/reconciler.js","../../../node_modules/svelte/src/internal/client/reactivity/effects.js","../../../node_modules/svelte/src/internal/client/dom/operations.js","../../../node_modules/svelte/src/internal/client/dom/elements/events.js","../../../node_modules/svelte/src/internal/client/render.js","../../../node_modules/svelte/src/internal/client/dom/blocks/await.js","../../../node_modules/svelte/src/internal/client/dom/blocks/if.js","../../../node_modules/svelte/src/internal/client/dom/template.js","../../../node_modules/svelte/src/internal/client/dom/blocks/each.js","../../../node_modules/svelte/src/internal/client/dom/blocks/html.js","../../../node_modules/svelte/src/internal/client/dom/elements/attributes.js","../../../node_modules/svelte/src/internal/client/reactivity/props.js","../../../src/svelte.js"],"sourcesContent":["// Store the references to globals in case someone tries to monkey patch these, causing the below\n// to de-opt (this occurs often when using popular extensions).\nexport var is_array = Array.isArray;\nexport var array_from = Array.from;\nexport var object_keys = Object.keys;\nexport var object_assign = Object.assign;\nexport var is_frozen = Object.isFrozen;\nexport var object_freeze = Object.freeze;\nexport var define_property = Object.defineProperty;\nexport var get_descriptor = Object.getOwnPropertyDescriptor;\nexport var get_descriptors = Object.getOwnPropertyDescriptors;\nexport var object_prototype = Object.prototype;\nexport var array_prototype = Array.prototype;\nexport var get_prototype_of = Object.getPrototypeOf;\n\n/** @type {Map<any, any>} */\nvar map_prototype = Map.prototype;\nvar map_set_method = map_prototype.set;\nvar map_get_method = map_prototype.get;\n\n/**\n * @template K\n * @template V\n * @param {Map<K, V>} map\n * @param {K} key\n * @param {V} value\n */\nexport function map_set(map, key, value) {\n\tmap_set_method.call(map, key, value);\n}\n\n/**\n * @template K\n * @template V\n * @param {Map<K, V>} map\n * @param {K} key\n * @return {V}\n */\nexport function map_get(map, key) {\n\treturn map_get_method.call(map, key);\n}\n\n/**\n * @param {any} thing\n * @returns {thing is Function}\n */\nexport function is_function(thing) {\n\treturn typeof thing === 'function';\n}\n","export const DERIVED = 1 << 1;\nexport const EFFECT = 1 << 2;\nexport const RENDER_EFFECT = 1 << 3;\nexport const BLOCK_EFFECT = 1 << 4;\nexport const BRANCH_EFFECT = 1 << 5;\nexport const ROOT_EFFECT = 1 << 6;\nexport const UNOWNED = 1 << 7;\nexport const CLEAN = 1 << 8;\nexport const DIRTY = 1 << 9;\nexport const MAYBE_DIRTY = 1 << 10;\nexport const INERT = 1 << 11;\nexport const DESTROYED = 1 << 12;\nexport const EFFECT_RAN = 1 << 13;\n\n/** 'Transparent' effects do not create a transition boundary */\nexport const EFFECT_TRANSPARENT = 1 << 14;\n\nexport const STATE_SYMBOL = Symbol('$state');\n","/** @type {import('#client').Equals} */\nexport function equals(value) {\n\treturn value === this.v;\n}\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nexport function safe_not_equal(a, b) {\n\treturn a != a\n\t\t? b == b\n\t\t: a !== b || (a !== null && typeof a === 'object') || typeof a === 'function';\n}\n\n/** @type {import('#client').Equals} */\nexport function safe_equals(value) {\n\treturn !safe_not_equal(value, this.v);\n}\n","export const EACH_ITEM_REACTIVE = 1;\nexport const EACH_INDEX_REACTIVE = 1 << 1;\nexport const EACH_KEYED = 1 << 2;\n\n/** See EachBlock interface metadata.is_controlled for an explanation what this is */\nexport const EACH_IS_CONTROLLED = 1 << 3;\nexport const EACH_IS_ANIMATED = 1 << 4;\nexport const EACH_IS_STRICT_EQUALS = 1 << 6;\n\nexport const PROPS_IS_IMMUTABLE = 1;\nexport const PROPS_IS_RUNES = 1 << 1;\nexport const PROPS_IS_UPDATED = 1 << 2;\nexport const PROPS_IS_LAZY_INITIAL = 1 << 3;\n\nexport const TRANSITION_IN = 1;\nexport const TRANSITION_OUT = 1 << 1;\nexport const TRANSITION_GLOBAL = 1 << 2;\n\nexport const TEMPLATE_FRAGMENT = 1;\nexport const TEMPLATE_USE_IMPORT_NODE = 1 << 1;\n\nexport const HYDRATION_START = '[';\nexport const HYDRATION_END = ']';\nexport const HYDRATION_END_ELSE = `${HYDRATION_END}!`; // used to indicate that an `{:else}...` block was rendered\n\nexport const UNINITIALIZED = Symbol();\n\n/** List of elements that require raw contents and should not have SSR comments put in them */\nexport const RawTextElements = ['textarea', 'script', 'style', 'title'];\n\n/** List of Element events that will be delegated */\nexport const DelegatedEvents = [\n\t'beforeinput',\n\t'click',\n\t'dblclick',\n\t'contextmenu',\n\t'focusin',\n\t'focusout',\n\t// 'input', This conflicts with bind:input\n\t'keydown',\n\t'keyup',\n\t'mousedown',\n\t'mousemove',\n\t'mouseout',\n\t'mouseover',\n\t'mouseup',\n\t'pointerdown',\n\t'pointermove',\n\t'pointerout',\n\t'pointerover',\n\t'pointerup',\n\t'touchend',\n\t'touchmove',\n\t'touchstart'\n];\n\n/** List of Element events that will be delegated and are passive */\nexport const PassiveDelegatedEvents = ['touchstart', 'touchmove', 'touchend'];\n\n/**\n * @type {Record<string, string>}\n * List of attribute names that should be aliased to their property names\n * because they behave differently between setting them as an attribute and\n * setting them as a property.\n */\nexport const AttributeAliases = {\n\t// no `class: 'className'` because we handle that separately\n\tformnovalidate: 'formNoValidate',\n\tismap: 'isMap',\n\tnomodule: 'noModule',\n\tplaysinline: 'playsInline',\n\treadonly: 'readOnly'\n};\n\n/**\n * Attributes that are boolean, i.e. they are present or not present.\n */\nexport const DOMBooleanAttributes = [\n\t'allowfullscreen',\n\t'async',\n\t'autofocus',\n\t'autoplay',\n\t'checked',\n\t'controls',\n\t'default',\n\t'disabled',\n\t'formnovalidate',\n\t'hidden',\n\t'indeterminate',\n\t'ismap',\n\t'loop',\n\t'multiple',\n\t'muted',\n\t'nomodule',\n\t'novalidate',\n\t'open',\n\t'playsinline',\n\t'readonly',\n\t'required',\n\t'reversed',\n\t'seamless',\n\t'selected',\n\t'webkitdirectory'\n];\n\nexport const namespace_svg = 'http://www.w3.org/2000/svg';\n\n// while `input` is also an interactive element, it is never moved by the browser, so we don't need to check for it\nexport const interactive_elements = new Set([\n\t'a',\n\t'button',\n\t'iframe',\n\t'embed',\n\t'select',\n\t'textarea'\n]);\n\nexport const disallowed_paragraph_contents = [\n\t'address',\n\t'article',\n\t'aside',\n\t'blockquote',\n\t'details',\n\t'div',\n\t'dl',\n\t'fieldset',\n\t'figcapture',\n\t'figure',\n\t'footer',\n\t'form',\n\t'h1',\n\t'h2',\n\t'h3',\n\t'h4',\n\t'h5',\n\t'h6',\n\t'header',\n\t'hr',\n\t'menu',\n\t'nav',\n\t'ol',\n\t'pre',\n\t'section',\n\t'table',\n\t'ul'\n];\n\n// https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags\nconst implied_end_tags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];\n\n/**\n * @param {string} tag\n * @param {string} parent_tag\n * @returns {boolean}\n */\nexport function is_tag_valid_with_parent(tag, parent_tag) {\n\t// First, let's check if we're in an unusual parsing mode...\n\tswitch (parent_tag) {\n\t\t// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect\n\t\tcase 'select':\n\t\t\treturn tag === 'option' || tag === 'optgroup' || tag === '#text';\n\t\tcase 'optgroup':\n\t\t\treturn tag === 'option' || tag === '#text';\n\t\t// Strictly speaking, seeing an <option> doesn't mean we're in a <select>\n\t\t// but\n\t\tcase 'option':\n\t\t\treturn tag === '#text';\n\t\t// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd\n\t\t// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption\n\t\t// No special behavior since these rules fall back to \"in body\" mode for\n\t\t// all except special table nodes which cause bad parsing behavior anyway.\n\n\t\t// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr\n\t\tcase 'tr':\n\t\t\treturn (\n\t\t\t\ttag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template'\n\t\t\t);\n\t\t// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody\n\t\tcase 'tbody':\n\t\tcase 'thead':\n\t\tcase 'tfoot':\n\t\t\treturn tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';\n\t\t// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup\n\t\tcase 'colgroup':\n\t\t\treturn tag === 'col' || tag === 'template';\n\t\t// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable\n\t\tcase 'table':\n\t\t\treturn (\n\t\t\t\ttag === 'caption' ||\n\t\t\t\ttag === 'colgroup' ||\n\t\t\t\ttag === 'tbody' ||\n\t\t\t\ttag === 'tfoot' ||\n\t\t\t\ttag === 'thead' ||\n\t\t\t\ttag === 'style' ||\n\t\t\t\ttag === 'script' ||\n\t\t\t\ttag === 'template'\n\t\t\t);\n\t\t// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead\n\t\tcase 'head':\n\t\t\treturn (\n\t\t\t\ttag === 'base' ||\n\t\t\t\ttag === 'basefont' ||\n\t\t\t\ttag === 'bgsound' ||\n\t\t\t\ttag === 'link' ||\n\t\t\t\ttag === 'meta' ||\n\t\t\t\ttag === 'title' ||\n\t\t\t\ttag === 'noscript' ||\n\t\t\t\ttag === 'noframes' ||\n\t\t\t\ttag === 'style' ||\n\t\t\t\ttag === 'script' ||\n\t\t\t\ttag === 'template'\n\t\t\t);\n\t\t// https://html.spec.whatwg.org/multipage/semantics.html#the-html-element\n\t\tcase 'html':\n\t\t\treturn tag === 'head' || tag === 'body' || tag === 'frameset';\n\t\tcase 'frameset':\n\t\t\treturn tag === 'frame';\n\t\tcase '#document':\n\t\t\treturn tag === 'html';\n\t}\n\n\t// Probably in the \"in body\" parsing mode, so we outlaw only tag combos\n\t// where the parsing rules cause implicit opens or closes to be added.\n\t// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n\tswitch (tag) {\n\t\tcase 'h1':\n\t\tcase 'h2':\n\t\tcase 'h3':\n\t\tcase 'h4':\n\t\tcase 'h5':\n\t\tcase 'h6':\n\t\t\treturn (\n\t\t\t\tparent_tag !== 'h1' &&\n\t\t\t\tparent_tag !== 'h2' &&\n\t\t\t\tparent_tag !== 'h3' &&\n\t\t\t\tparent_tag !== 'h4' &&\n\t\t\t\tparent_tag !== 'h5' &&\n\t\t\t\tparent_tag !== 'h6'\n\t\t\t);\n\n\t\tcase 'rp':\n\t\tcase 'rt':\n\t\t\treturn implied_end_tags.indexOf(parent_tag) === -1;\n\n\t\tcase 'body':\n\t\tcase 'caption':\n\t\tcase 'col':\n\t\tcase 'colgroup':\n\t\tcase 'frameset':\n\t\tcase 'frame':\n\t\tcase 'head':\n\t\tcase 'html':\n\t\tcase 'tbody':\n\t\tcase 'td':\n\t\tcase 'tfoot':\n\t\tcase 'th':\n\t\tcase 'thead':\n\t\tcase 'tr':\n\t\t\t// These tags are only valid with a few parents that have special child\n\t\t\t// parsing rules -- if we're down here, then none of those matched and\n\t\t\t// so we allow it only if we don't know what the parent is, as all other\n\t\t\t// cases are invalid.\n\t\t\treturn parent_tag == null;\n\t}\n\n\treturn true;\n}\n","import { DEV } from 'esm-env';\nimport {\n\tcurrent_component_context,\n\tcurrent_reaction,\n\tcurrent_dependencies,\n\tcurrent_effect,\n\tcurrent_untracked_writes,\n\tcurrent_untracking,\n\tget,\n\tis_batching_effect,\n\tis_runes,\n\tmark_reactions,\n\tschedule_effect,\n\tset_current_untracked_writes,\n\tset_last_inspected_signal,\n\tset_signal_status,\n\tuntrack\n} from '../runtime.js';\nimport { equals, safe_equals } from './equality.js';\nimport { CLEAN, DERIVED, DIRTY, BRANCH_EFFECT } from '../constants.js';\nimport { UNINITIALIZED } from '../../../constants.js';\n\n/**\n * @template V\n * @param {V} value\n * @returns {import('#client').Source<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function source(value) {\n\t/** @type {import('#client').Source<V>} */\n\tconst source = {\n\t\tf: 0, // TODO ideally we could skip this altogether, but it causes type errors\n\t\treactions: null,\n\t\tequals: equals,\n\t\tv: value,\n\t\tversion: 0\n\t};\n\n\tif (DEV) {\n\t\t/** @type {import('#client').ValueDebug<V>} */ (source).inspect = new Set();\n\t}\n\n\treturn source;\n}\n\n/**\n * @template V\n * @param {V} initial_value\n * @returns {import('#client').Source<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function mutable_source(initial_value) {\n\tconst s = source(initial_value);\n\ts.equals = safe_equals;\n\n\t// bind the signal to the component context, in case we need to\n\t// track updates to trigger beforeUpdate/afterUpdate callbacks\n\tif (current_component_context) {\n\t\t(current_component_context.d ??= []).push(s);\n\t}\n\n\treturn s;\n}\n\n/**\n * @template V\n * @param {import('#client').Value<V>} source\n * @param {V} value\n */\nexport function mutate(source, value) {\n\tset(\n\t\tsource,\n\t\tuntrack(() => get(source))\n\t);\n\treturn value;\n}\n\n/**\n * @template V\n * @param {import('#client').Source<V>} signal\n * @param {V} value\n * @returns {V}\n */\nexport function set(signal, value) {\n\tvar initialized = signal.v !== UNINITIALIZED;\n\n\tif (\n\t\t!current_untracking &&\n\t\tinitialized &&\n\t\tcurrent_reaction !== null &&\n\t\tis_runes() &&\n\t\t(current_reaction.f & DERIVED) !== 0\n\t) {\n\t\tthrow new Error(\n\t\t\t'ERR_SVELTE_UNSAFE_MUTATION' +\n\t\t\t\t(DEV\n\t\t\t\t\t? \": Unsafe mutations during Svelte's render or derived phase are not permitted in runes mode. \" +\n\t\t\t\t\t\t'This can lead to unexpected errors and possibly cause infinite loops.\\n\\nIf this mutation is not meant ' +\n\t\t\t\t\t\t'to be reactive do not use the \"$state\" rune for that declaration.'\n\t\t\t\t\t: '')\n\t\t);\n\t}\n\n\tif (!signal.equals(value)) {\n\t\tsignal.v = value;\n\n\t\t// Increment write version so that unowned signals can properly track dirtiness\n\t\tsignal.version++;\n\n\t\t// If the current signal is running for the first time, it won't have any\n\t\t// reactions as we only allocate and assign the reactions after the signal\n\t\t// has fully executed. So in the case of ensuring it registers the reaction\n\t\t// properly for itself, we need to ensure the current effect actually gets\n\t\t// scheduled. i.e:\n\t\t//\n\t\t// $effect(() => x++)\n\t\t//\n\t\t// We additionally want to skip this logic when initialising store sources\n\t\tif (\n\t\t\tis_runes() &&\n\t\t\tinitialized &&\n\t\t\tcurrent_effect !== null &&\n\t\t\t(current_effect.f & CLEAN) !== 0 &&\n\t\t\t(current_effect.f & BRANCH_EFFECT) === 0\n\t\t) {\n\t\t\tif (current_dependencies !== null && current_dependencies.includes(signal)) {\n\t\t\t\tset_signal_status(current_effect, DIRTY);\n\t\t\t\tschedule_effect(current_effect);\n\t\t\t} else {\n\t\t\t\tif (current_untracked_writes === null) {\n\t\t\t\t\tset_current_untracked_writes([signal]);\n\t\t\t\t} else {\n\t\t\t\t\tcurrent_untracked_writes.push(signal);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmark_reactions(signal, DIRTY, true);\n\n\t\tif (DEV) {\n\t\t\tif (is_batching_effect) {\n\t\t\t\tset_last_inspected_signal(/** @type {import('#client').ValueDebug} */ (signal));\n\t\t\t} else {\n\t\t\t\tfor (const fn of /** @type {import('#client').ValueDebug} */ (signal).inspect) fn();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn value;\n}\n","export const noop = () => {};\n\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\n\n/**\n * @template [T=any]\n * @param {any} value\n * @returns {value is PromiseLike<T>}\n */\nexport function is_promise(value) {\n\treturn typeof value?.then === 'function';\n}\n\n/** @param {Function} fn */\nexport function run(fn) {\n\treturn fn();\n}\n\n/** @param {Array<() => void>} arr */\nexport function run_all(arr) {\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tarr[i]();\n\t}\n}\n","import { run_all } from '../../shared/utils.js';\n\nlet is_task_queued = false;\n\n/** @type {Array<() => void>} */\nlet current_queued_tasks = [];\n\nfunction process_task() {\n\tis_task_queued = false;\n\tconst tasks = current_queued_tasks.slice();\n\tcurrent_queued_tasks = [];\n\trun_all(tasks);\n}\n\n/**\n * @param {() => void} fn\n */\nexport function queue_task(fn) {\n\tif (!is_task_queued) {\n\t\tis_task_queued = true;\n\t\tqueueMicrotask(process_task);\n\t}\n\tcurrent_queued_tasks.push(fn);\n}\n\n/**\n * Synchronously run any queued tasks.\n */\nexport function flush_tasks() {\n\tif (is_task_queued) {\n\t\tprocess_task();\n\t}\n}\n","import { DEV } from 'esm-env';\nimport { CLEAN, DERIVED, DESTROYED, DIRTY, MAYBE_DIRTY, UNOWNED } from '../constants.js';\nimport {\n\tcurrent_reaction,\n\tcurrent_effect,\n\tremove_reactions,\n\tset_signal_status,\n\tmark_reactions,\n\tcurrent_skip_reaction,\n\texecute_reaction_fn,\n\tdestroy_effect_children\n} from '../runtime.js';\nimport { equals, safe_equals } from './equality.js';\n\nexport let updating_derived = false;\n\n/**\n * @template V\n * @param {() => V} fn\n * @returns {import('#client').Derived<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function derived(fn) {\n\tlet flags = DERIVED | DIRTY;\n\tif (current_effect === null) flags |= UNOWNED;\n\n\t/** @type {import('#client').Derived<V>} */\n\tconst signal = {\n\t\tdeps: null,\n\t\tderiveds: null,\n\t\tequals,\n\t\tf: flags,\n\t\tfirst: null,\n\t\tfn,\n\t\tlast: null,\n\t\treactions: null,\n\t\tv: /** @type {V} */ (null),\n\t\tversion: 0\n\t};\n\n\tif (DEV) {\n\t\t/** @type {import('#client').DerivedDebug} */ (signal).inspect = new Set();\n\t}\n\n\tif (current_reaction !== null && (current_reaction.f & DERIVED) !== 0) {\n\t\tvar current_derived = /** @type {import('#client').Derived<V>} */ (current_reaction);\n\t\tif (current_derived.deriveds === null) {\n\t\t\tcurrent_derived.deriveds = [signal];\n\t\t} else {\n\t\t\tcurrent_derived.deriveds.push(signal);\n\t\t}\n\t}\n\n\treturn signal;\n}\n\n/**\n * @template V\n * @param {() => V} fn\n * @returns {import('#client').Derived<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function derived_safe_equal(fn) {\n\tconst signal = derived(fn);\n\tsignal.equals = safe_equals;\n\treturn signal;\n}\n\n/**\n * @param {import('./types.js').Derived} signal\n * @returns {void}\n */\nfunction destroy_derived_children(signal) {\n\tdestroy_effect_children(signal);\n\tvar deriveds = signal.deriveds;\n\n\tif (deriveds !== null) {\n\t\tsignal.deriveds = null;\n\t\tfor (var i = 0; i < deriveds.length; i += 1) {\n\t\t\tdestroy_derived(deriveds[i]);\n\t\t}\n\t}\n}\n\n/**\n * @param {import('#client').Derived} derived\n * @param {boolean} force_schedule\n * @returns {void}\n */\nexport function update_derived(derived, force_schedule) {\n\tvar previous_updating_derived = updating_derived;\n\tupdating_derived = true;\n\tdestroy_derived_children(derived);\n\tvar value = execute_reaction_fn(derived);\n\tupdating_derived = previous_updating_derived;\n\n\tvar status =\n\t\t(current_skip_reaction || (derived.f & UNOWNED) !== 0) && derived.deps !== null\n\t\t\t? MAYBE_DIRTY\n\t\t\t: CLEAN;\n\n\tset_signal_status(derived, status);\n\n\tif (!derived.equals(value)) {\n\t\tderived.v = value;\n\t\tmark_reactions(derived, DIRTY, force_schedule);\n\n\t\tif (DEV && force_schedule) {\n\t\t\tfor (var fn of /** @type {import('#client').DerivedDebug} */ (derived).inspect) fn();\n\t\t}\n\t}\n}\n\n/**\n * @param {import('#client').Derived} signal\n * @returns {void}\n */\nexport function destroy_derived(signal) {\n\tdestroy_derived_children(signal);\n\tremove_reactions(signal, 0);\n\tset_signal_status(signal, DESTROYED);\n\n\t// TODO we need to ensure we remove the derived from any parent derives\n\n\tsignal.first =\n\t\tsignal.last =\n\t\tsignal.deps =\n\t\tsignal.reactions =\n\t\t// @ts-expect-error `signal.fn` cannot be `null` while the signal is alive\n\t\tsignal.fn =\n\t\t\tnull;\n}\n","import { DEV } from 'esm-env';\nimport {\n\tarray_prototype,\n\tget_descriptors,\n\tget_prototype_of,\n\tis_frozen,\n\tobject_freeze,\n\tobject_prototype\n} from './utils.js';\nimport { snapshot } from './proxy.js';\nimport {\n\tdestroy_effect,\n\teffect,\n\texecute_effect_teardown,\n\tuser_pre_effect\n} from './reactivity/effects.js';\nimport {\n\tEFFECT,\n\tRENDER_EFFECT,\n\tDIRTY,\n\tMAYBE_DIRTY,\n\tCLEAN,\n\tDERIVED,\n\tUNOWNED,\n\tDESTROYED,\n\tINERT,\n\tBRANCH_EFFECT,\n\tSTATE_SYMBOL,\n\tBLOCK_EFFECT,\n\tROOT_EFFECT\n} from './constants.js';\nimport { flush_tasks } from './dom/task.js';\nimport { add_owner } from './dev/ownership.js';\nimport { mutate, set, source } from './reactivity/sources.js';\nimport { update_derived } from './reactivity/deriveds.js';\n\nconst FLUSH_MICROTASK = 0;\nconst FLUSH_SYNC = 1;\n\n// Used for controlling the flush of effects.\nlet current_scheduler_mode = FLUSH_MICROTASK;\n// Used for handling scheduling\nlet is_micro_task_queued = false;\nexport let is_flushing_effect = false;\nexport let is_destroying_effect = false;\n\n/** @param {boolean} value */\nexport function set_is_flushing_effect(value) {\n\tis_flushing_effect = value;\n}\n\n/** @param {boolean} value */\nexport function set_is_destroying_effect(value) {\n\tis_destroying_effect = value;\n}\n\n// Used for $inspect\nexport let is_batching_effect = false;\nlet is_inspecting_signal = false;\n\n// Handle effect queues\n\n/** @type {import('./types.js').Effect[]} */\nlet current_queued_root_effects = [];\n\nlet flush_count = 0;\n// Handle signal reactivity tree dependencies and reactions\n\n/** @type {null | import('./types.js').Reaction} */\nexport let current_reaction = null;\n\n/** @param {null | import('./types.js').Reaction} reaction */\nexport function set_current_reaction(reaction) {\n\tcurrent_reaction = reaction;\n}\n\n/** @type {null | import('./types.js').Effect} */\nexport let current_effect = null;\n\n/** @param {null | import('./types.js').Effect} effect */\nexport function set_current_effect(effect) {\n\tcurrent_effect = effect;\n}\n\n/** @type {null | import('./types.js').Value[]} */\nexport let current_dependencies = null;\nlet current_dependencies_index = 0;\n/**\n * Tracks writes that the effect it's executed in doesn't listen to yet,\n * so that the dependency can be added to the effect later on if it then reads it\n * @type {null | import('./types.js').Source[]}\n */\nexport let current_untracked_writes = null;\n\n/** @param {null | import('./types.js').Source[]} value */\nexport function set_current_untracked_writes(value) {\n\tcurrent_untracked_writes = value;\n}\n\n/** @type {null | import('./types.js').ValueDebug} */\nexport let last_inspected_signal = null;\n\n/** @param {null | import('./types.js').ValueDebug} signal */\nexport function set_last_inspected_signal(signal) {\n\tlast_inspected_signal = signal;\n}\n\n/** If `true`, `get`ting the signal should not register it as a dependency */\nexport let current_untracking = false;\n\n// If we are working with a get() chain that has no active container,\n// to prevent memory leaks, we skip adding the reaction.\nexport let current_skip_reaction = false;\n// Handle collecting all signals which are read during a specific time frame\nexport let is_signals_recorded = false;\nlet captured_signals = new Set();\n\n/** @type {Function | null} */\nexport let inspect_fn = null;\n\n/** @type {Array<import('./types.js').ValueDebug>} */\nlet inspect_captured_signals = [];\n\n// Handling runtime component context\n/** @type {import('./types.js').ComponentContext | null} */\nexport let current_component_context = null;\n\n/** @param {import('./types.js').ComponentContext | null} context */\nexport function set_current_component_context(context) {\n\tcurrent_component_context = context;\n}\n\n/** @returns {boolean} */\nexport function is_runes() {\n\treturn current_component_context !== null && current_component_context.r;\n}\n\n/**\n * @param {import('./types.js').ProxyStateObject} target\n * @param {string | symbol} prop\n * @param {any} receiver\n */\nexport function batch_inspect(target, prop, receiver) {\n\tconst value = Reflect.get(target, prop, receiver);\n\t/**\n\t * @this {any}\n\t */\n\treturn function () {\n\t\tconst previously_batching_effect = is_batching_effect;\n\t\tis_batching_effect = true;\n\t\ttry {\n\t\t\treturn Reflect.apply(value, this, arguments);\n\t\t} finally {\n\t\t\tis_batching_effect = previously_batching_effect;\n\t\t\tif (last_inspected_signal !== null && !is_inspecting_signal) {\n\t\t\t\tis_inspecting_signal = true;\n\t\t\t\ttry {\n\t\t\t\t\tfor (const fn of last_inspected_signal.inspect) {\n\t\t\t\t\t\tfn();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tis_inspecting_signal = false;\n\t\t\t\t}\n\t\t\t\tlast_inspected_signal = null;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Determines whether a derived or effect is dirty.\n * If it is MAYBE_DIRTY, will set the status to CLEAN\n * @param {import('./types.js').Reaction} reaction\n * @returns {boolean}\n */\nexport function check_dirtiness(reaction) {\n\tvar flags = reaction.f;\n\n\tif ((flags & DIRTY) !== 0) {\n\t\treturn true;\n\t}\n\n\tif ((flags & MAYBE_DIRTY) !== 0) {\n\t\tvar dependencies = reaction.deps;\n\t\tvar is_unowned = (flags & UNOWNED) !== 0;\n\n\t\tif (dependencies !== null) {\n\t\t\tvar length = dependencies.length;\n\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\tvar dependency = dependencies[i];\n\n\t\t\t\tif (check_dirtiness(/** @type {import('#client').Derived} */ (dependency))) {\n\t\t\t\t\tupdate_derived(/** @type {import('#client').Derived} **/ (dependency), true);\n\n\t\t\t\t\t// `signal` might now be dirty, as a result of calling `update_derived`\n\t\t\t\t\tif ((reaction.f & DIRTY) !== 0) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If we're working with an unowned derived signal, then we need to check\n\t\t\t\t// if our dependency write version is higher. If it is then we can assume\n\t\t\t\t// that state has changed to a newer version and thus this unowned signal\n\t\t\t\t// is also dirty.\n\t\t\t\tvar version = dependency.version;\n\n\t\t\t\tif (is_unowned) {\n\t\t\t\t\tif (version > /** @type {import('#client').Derived} */ (reaction).version) {\n\t\t\t\t\t\t/** @type {import('#client').Derived} */ (reaction).version = version;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if (!current_skip_reaction && !dependency?.reactions?.includes(reaction)) {\n\t\t\t\t\t\t// If we are working with an unowned signal as part of an effect (due to !current_skip_reaction)\n\t\t\t\t\t\t// and the version hasn't changed, we still need to check that this reaction\n\t\t\t\t\t\t// if linked to the dependency source – otherwise future updates will not be caught.\n\t\t\t\t\t\tvar reactions = dependency.reactions;\n\t\t\t\t\t\tif (reactions === null) {\n\t\t\t\t\t\t\tdependency.reactions = [reaction];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treactions.push(reaction);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Unowned signals are always maybe dirty, as we instead check their dependency versions.\n\t\tif (!is_unowned) {\n\t\t\tset_signal_status(reaction, CLEAN);\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @template V\n * @param {import('./types.js').Reaction} signal\n * @returns {V}\n */\nexport function execute_reaction_fn(signal) {\n\tconst previous_dependencies = current_dependencies;\n\tconst previous_dependencies_index = current_dependencies_index;\n\tconst previous_untracked_writes = current_untracked_writes;\n\tconst previous_reaction = current_reaction;\n\tconst previous_skip_reaction = current_skip_reaction;\n\tconst previous_untracking = current_untracking;\n\n\tcurrent_dependencies = /** @type {null | import('./types.js').Value[]} */ (null);\n\tcurrent_dependencies_index = 0;\n\tcurrent_untracked_writes = null;\n\tcurrent_reaction = signal;\n\tcurrent_skip_reaction = !is_flushing_effect && (signal.f & UNOWNED) !== 0;\n\tcurrent_untracking = false;\n\n\ttry {\n\t\tlet res = signal.fn();\n\t\tlet dependencies = /** @type {import('./types.js').Value<unknown>[]} **/ (signal.deps);\n\t\tif (current_dependencies !== null) {\n\t\t\tlet i;\n\t\t\tif (dependencies !== null) {\n\t\t\t\tconst deps_length = dependencies.length;\n\t\t\t\t// Include any dependencies up until the current_dependencies_index.\n\t\t\t\tconst full_current_dependencies =\n\t\t\t\t\tcurrent_dependencies_index === 0\n\t\t\t\t\t\t? current_dependencies\n\t\t\t\t\t\t: dependencies.slice(0, current_dependencies_index).concat(current_dependencies);\n\t\t\t\tconst current_dep_length = full_current_dependencies.length;\n\t\t\t\t// If we have more than 16 elements in the array then use a Set for faster performance\n\t\t\t\t// TODO: evaluate if we should always just use a Set or not here?\n\t\t\t\tconst full_current_dependencies_set =\n\t\t\t\t\tcurrent_dep_length > 16 && deps_length - current_dependencies_index > 1\n\t\t\t\t\t\t? new Set(full_current_dependencies)\n\t\t\t\t\t\t: null;\n\t\t\t\tfor (i = current_dependencies_index; i < deps_length; i++) {\n\t\t\t\t\tconst dependency = dependencies[i];\n\t\t\t\t\tif (\n\t\t\t\t\t\tfull_current_dependencies_set !== null\n\t\t\t\t\t\t\t? !full_current_dependencies_set.has(dependency)\n\t\t\t\t\t\t\t: !full_current_dependencies.includes(dependency)\n\t\t\t\t\t) {\n\t\t\t\t\t\tremove_reaction(signal, dependency);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (dependencies !== null && current_dependencies_index > 0) {\n\t\t\t\tdependencies.length = current_dependencies_index + current_dependencies.length;\n\t\t\t\tfor (i = 0; i < current_dependencies.length; i++) {\n\t\t\t\t\tdependencies[current_dependencies_index + i] = current_dependencies[i];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsignal.deps = /** @type {import('./types.js').Value<V>[]} **/ (\n\t\t\t\t\tdependencies = current_dependencies\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!current_skip_reaction) {\n\t\t\t\tfor (i = current_dependencies_index; i < dependencies.length; i++) {\n\t\t\t\t\tconst dependency = dependencies[i];\n\t\t\t\t\tconst reactions = dependency.reactions;\n\n\t\t\t\t\tif (reactions === null) {\n\t\t\t\t\t\tdependency.reactions = [signal];\n\t\t\t\t\t} else if (reactions[reactions.length - 1] !== signal) {\n\t\t\t\t\t\t// TODO: should this be:\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// } else if (!reactions.includes(signal)) {\n\t\t\t\t\t\t//\n\t\t\t\t\t\treactions.push(signal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (dependencies !== null && current_dependencies_index < dependencies.length) {\n\t\t\tremove_reactions(signal, current_dependencies_index);\n\t\t\tdependencies.length = current_dependencies_index;\n\t\t}\n\t\treturn res;\n\t} finally {\n\t\tcurrent_dependencies = previous_dependencies;\n\t\tcurrent_dependencies_index = previous_dependencies_index;\n\t\tcurrent_untracked_writes = previous_untracked_writes;\n\t\tcurrent_reaction = previous_reaction;\n\t\tcurrent_skip_reaction = previous_skip_reaction;\n\t\tcurrent_untracking = previous_untracking;\n\t}\n}\n\n/**\n * @template V\n * @param {import('./types.js').Reaction} signal\n * @param {import('./types.js').Value<V>} dependency\n * @returns {void}\n */\nfunction remove_reaction(signal, dependency) {\n\tconst reactions = dependency.reactions;\n\tlet reactions_length = 0;\n\tif (reactions !== null) {\n\t\treactions_length = reactions.length - 1;\n\t\tconst index = reactions.indexOf(signal);\n\t\tif (index !== -1) {\n\t\t\tif (reactions_length === 0) {\n\t\t\t\tdependency.reactions = null;\n\t\t\t} else {\n\t\t\t\t// Swap with last element and then remove.\n\t\t\t\treactions[index] = reactions[reactions_length];\n\t\t\t\treactions.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (reactions_length === 0 && (dependency.f & UNOWNED) !== 0) {\n\t\t// If the signal is unowned then we need to make sure to change it to dirty.\n\t\tset_signal_status(dependency, DIRTY);\n\t\tremove_reactions(/** @type {import('./types.js').Derived} **/ (dependency), 0);\n\t}\n}\n\n/**\n * @param {import('./types.js').Reaction} signal\n * @param {number} start_index\n * @returns {void}\n */\nexport function remove_reactions(signal, start_index) {\n\tconst dependencies = signal.deps;\n\tif (dependencies !== null) {\n\t\tconst active_dependencies = start_index === 0 ? null : dependencies.slice(0, start_index);\n\t\tlet i;\n\t\tfor (i = start_index; i < dependencies.length; i++) {\n\t\t\tconst dependency = dependencies[i];\n\t\t\t// Avoid removing a reaction if we know that it is active (start_index will not be 0)\n\t\t\tif (active_dependencies === null || !active_dependencies.includes(dependency)) {\n\t\t\t\tremove_reaction(signal, dependency);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./types.js').Reaction} signal\n * @returns {void}\n */\nexport function destroy_effect_children(signal) {\n\tlet effect = signal.first;\n\tsignal.first = null;\n\tsignal.last = null;\n\tvar sibling;\n\twhile (effect !== null) {\n\t\tsibling = effect.next;\n\t\tdestroy_effect(effect);\n\t\teffect = sibling;\n\t}\n}\n\n/**\n * @param {import('./types.js').Effect} effect\n * @returns {void}\n */\nexport function execute_effect(effect) {\n\tvar flags = effect.f;\n\n\tif ((flags & DESTROYED) !== 0) {\n\t\treturn;\n\t}\n\n\tset_signal_status(effect, CLEAN);\n\n\tvar component_context = effect.ctx;\n\n\tvar previous_effect = current_effect;\n\tvar previous_component_context = current_component_context;\n\n\tcurrent_effect = effect;\n\tcurrent_component_context = component_context;\n\n\ttry {\n\t\tif ((flags & BLOCK_EFFECT) === 0) {\n\t\t\tdestroy_effect_children(effect);\n\t\t}\n\n\t\texecute_effect_teardown(effect);\n\t\tvar teardown = execute_reaction_fn(effect);\n\t\teffect.teardown = typeof teardown === 'function' ? teardown : null;\n\t} finally {\n\t\tcurrent_effect = previous_effect;\n\t\tcurrent_component_context = previous_component_context;\n\t}\n}\n\nfunction infinite_loop_guard() {\n\tif (flush_count > 1000) {\n\t\tflush_count = 0;\n\t\tthrow new Error(\n\t\t\t'ERR_SVELTE_TOO_MANY_UPDATES' +\n\t\t\t\t(DEV\n\t\t\t\t\t? ': Maximum update depth exceeded. This can happen when a reactive block or effect ' +\n\t\t\t\t\t\t'repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops.'\n\t\t\t\t\t: '')\n\t\t);\n\t}\n\tflush_count++;\n}\n\n/**\n * @param {Array<import('./types.js').Effect>} root_effects\n * @returns {void}\n */\nfunction flush_queued_root_effects(root_effects) {\n\tfor (var i = 0; i < root_effects.length; i++) {\n\t\tvar signal = root_effects[i];\n\t\tflush_nested_effects(signal, RENDER_EFFECT | EFFECT);\n\t}\n}\n\n/**\n * @param {Array<import('./types.js').Effect>} effects\n * @returns {void}\n */\nfunction flush_queued_effects(effects) {\n\tvar length = effects.length;\n\tif (length === 0) return;\n\n\tinfinite_loop_guard();\n\tfor (var i = 0; i < length; i++) {\n\t\tvar effect = effects[i];\n\n\t\tif ((effect.f & (DESTROYED | INERT)) === 0 && check_dirtiness(effect)) {\n\t\t\texecute_effect(effect);\n\t\t}\n\t}\n}\n\nfunction process_microtask() {\n\tis_micro_task_queued = false;\n\tif (flush_count > 101) {\n\t\treturn;\n\t}\n\tconst previous_queued_root_effects = current_queued_root_effects;\n\tcurrent_queued_root_effects = [];\n\tflush_queued_root_effects(previous_queued_root_effects);\n\tif (!is_micro_task_queued) {\n\t\tflush_count = 0;\n\t}\n}\n\n/**\n * @param {import('./types.js').Effect} signal\n * @returns {void}\n */\nexport function schedule_effect(signal) {\n\tif (current_scheduler_mode === FLUSH_MICROTASK) {\n\t\tif (!is_micro_task_queued) {\n\t\t\tis_micro_task_queued = true;\n\t\t\tqueueMicrotask(process_microtask);\n\t\t}\n\t}\n\n\tvar effect = signal;\n\n\twhile (effect.parent !== null) {\n\t\teffect = effect.parent;\n\t\tvar flags = effect.f;\n\n\t\tif ((flags & BRANCH_EFFECT) !== 0) {\n\t\t\tif ((flags & CLEAN) === 0) return;\n\t\t\tset_signal_status(effect, MAYBE_DIRTY);\n\t\t}\n\t}\n\n\tcurrent_queued_root_effects.push(effect);\n}\n\n/**\n *\n * This function both runs render effects and collects user effects in topological order\n * from the starting effect passed in. Effects will be collected when they match the filtered\n * bitwise flag passed in only. The collected effects array will be populated with all the user\n * effects to be flushed.\n *\n * @param {import('./types.js').Effect} effect\n * @param {number} filter_flags\n * @param {boolean} shallow\n * @param {import('./types.js').Effect[]} collected_effects\n * @returns {void}\n */\nfunction process_effects(effect, filter_flags, shallow, collected_effects) {\n\tvar current_effect = effect.first;\n\tvar effects = [];\n\n\tmain_loop: while (current_effect !== null) {\n\t\tvar flags = current_effect.f;\n\t\t// TODO: we probably don't need to check for destroyed as it shouldn't be encountered?\n\t\tvar is_active = (flags & (DESTROYED | INERT)) === 0;\n\t\tvar is_branch = flags & BRANCH_EFFECT;\n\t\tvar is_clean = (flags & CLEAN) !== 0;\n\t\tvar child = current_effect.first;\n\n\t\t// Skip this branch if it's clean\n\t\tif (is_active && (!is_branch || !is_clean)) {\n\t\t\tif (is_branch) {\n\t\t\t\tset_signal_status(current_effect, CLEAN);\n\t\t\t}\n\n\t\t\tif ((flags & RENDER_EFFECT) !== 0) {\n\t\t\t\tif (is_branch) {\n\t\t\t\t\tif (!shallow && child !== null) {\n\t\t\t\t\t\tcurrent_effect = child;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (check_dirtiness(current_effect)) {\n\t\t\t\t\t\texecute_effect(current_effect);\n\t\t\t\t\t\t// Child might have been mutated since running the effect\n\t\t\t\t\t\tchild = current_effect.first;\n\t\t\t\t\t}\n\t\t\t\t\tif (!shallow && child !== null) {\n\t\t\t\t\t\tcurrent_effect = child;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ((flags & EFFECT) !== 0) {\n\t\t\t\tif (is_branch || is_clean) {\n\t\t\t\t\tif (!shallow && child !== null) {\n\t\t\t\t\t\tcurrent_effect = child;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\teffects.push(current_effect);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar sibling = current_effect.next;\n\n\t\tif (sibling === null) {\n\t\t\tlet parent = current_effect.parent;\n\n\t\t\twhile (parent !== null) {\n\t\t\t\tif (effect === parent) {\n\t\t\t\t\tbreak main_loop;\n\t\t\t\t}\n\t\t\t\tvar parent_sibling = parent.next;\n\t\t\t\tif (parent_sibling !== null) {\n\t\t\t\t\tcurrent_effect = parent_sibling;\n\t\t\t\t\tcontinue main_loop;\n\t\t\t\t}\n\t\t\t\tparent = parent.parent;\n\t\t\t}\n\t\t}\n\n\t\tcurrent_effect = sibling;\n\t}\n\n\tif (effects.length > 0) {\n\t\tif ((filter_flags & EFFECT) !== 0) {\n\t\t\tcollected_effects.push(...effects);\n\t\t}\n\n\t\tif (!shallow) {\n\t\t\tfor (var i = 0; i < effects.length; i++) {\n\t\t\t\tprocess_effects(effects[i], filter_flags, false, collected_effects);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n *\n * This function recursively collects effects in topological order from the starting effect passed in.\n * Effects will be collected when they match the filtered bitwise flag passed in only. The collected\n * array will be populated with all the effects.\n *\n * @param {import('./types.js').Effect} effect\n * @param {number} filter_flags\n * @param {boolean} [shallow]\n * @returns {void}\n */\nfunction flush_nested_effects(effect, filter_flags, shallow = false) {\n\t/** @type {import('#client').Effect[]} */\n\tvar collected_effects = [];\n\n\tvar previously_flushing_effect = is_flushing_effect;\n\tis_flushing_effect = true;\n\n\ttry {\n\t\t// When working with custom elements, the root effects might not have a root\n\t\tif (effect.first === null && (effect.f & BRANCH_EFFECT) === 0) {\n\t\t\tflush_queued_effects([effect]);\n\t\t} else {\n\t\t\tprocess_effects(effect, filter_flags, shallow, collected_effects);\n\t\t\tflush_queued_effects(collected_effects);\n\t\t}\n\t} finally {\n\t\tis_flushing_effect = previously_flushing_effect;\n\t}\n}\n\n/**\n * @param {import('./types.js').Effect} effect\n * @returns {void}\n */\nexport function flush_local_render_effects(effect) {\n\t// We are entering a new flush sequence, so ensure counter is reset.\n\tflush_count = 0;\n\tflush_nested_effects(effect, RENDER_EFFECT, true);\n}\n\n/**\n * Internal version of `flushSync` with the option to not flush previous effects.\n * Returns the result of the passed function, if given.\n * @param {() => any} [fn]\n * @param {boolean} [flush_previous]\n * @returns {any}\n */\nexport function flush_sync(fn, flush_previous = true) {\n\tvar previous_scheduler_mode = current_scheduler_mode;\n\tvar previous_queued_root_effects = current_queued_root_effects;\n\n\ttry {\n\t\tinfinite_loop_guard();\n\n\t\t/** @type {import('./types.js').Effect[]} */\n\t\tconst root_effects = [];\n\n\t\tcurrent_scheduler_mode = FLUSH_SYNC;\n\t\tcurrent_queued_root_effects = root_effects;\n\n\t\tif (flush_previous) {\n\t\t\tflush_queued_root_effects(previous_queued_root_effects);\n\t\t}\n\n\t\tvar result = fn?.();\n\n\t\tflush_tasks();\n\t\tif (current_queued_root_effects.length > 0 || root_effects.length > 0) {\n\t\t\tflush_sync();\n\t\t}\n\n\t\tflush_count = 0;\n\n\t\treturn result;\n\t} finally {\n\t\tcurrent_scheduler_mode = previous_scheduler_mode;\n\t\tcurrent_queued_root_effects = previous_queued_root_effects;\n\t}\n}\n\n/**\n * Returns a promise that resolves once any pending state changes have been applied.\n * @returns {Promise<void>}\n */\nexport async function tick() {\n\tawait Promise.resolve();\n\t// By calling flush_sync we guarantee that any pending state changes are applied after one tick.\n\t// TODO look into whether we can make flushing subsequent updates synchronously in the future.\n\tflush_sync();\n}\n\n/**\n * @template V\n * @param {import('./types.js').Value<V>} signal\n * @returns {V}\n */\nexport function get(signal) {\n\t// @ts-expect-error\n\tif (DEV && signal.inspect && inspect_fn) {\n\t\t/** @type {import('./types.js').ValueDebug} */ (signal).inspect.add(inspect_fn);\n\t\t// @ts-expect-error\n\t\tinspect_captured_signals.push(signal);\n\t}\n\n\tconst flags = signal.f;\n\tif ((flags & DESTROYED) !== 0) {\n\t\treturn signal.v;\n\t}\n\n\tif (is_signals_recorded) {\n\t\tcaptured_signals.add(signal);\n\t}\n\n\t// Register the dependency on the current reaction signal.\n\tif (\n\t\tcurrent_reaction !== null &&\n\t\t(current_reaction.f & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 &&\n\t\t!current_untracking\n\t) {\n\t\tconst unowned = (current_reaction.f & UNOWNED) !== 0;\n\t\tconst dependencies = current_reaction.deps;\n\t\tif (\n\t\t\tcurrent_dependencies === null &&\n\t\t\tdependencies !== null &&\n\t\t\tdependencies[current_dependencies_index] === signal &&\n\t\t\t!(unowned && current_effect !== null)\n\t\t) {\n\t\t\tcurrent_dependencies_index++;\n\t\t} else if (\n\t\t\tdependencies === null ||\n\t\t\tcurrent_dependencies_index === 0 ||\n\t\t\tdependencies[current_dependencies_index - 1] !== signal\n\t\t) {\n\t\t\tif (current_dependencies === null) {\n\t\t\t\tcurrent_dependencies = [signal];\n\t\t\t} else {\n\t\t\t\tcurrent_dependencies.push(signal);\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\tcurrent_untracked_writes !== null &&\n\t\t\tcurrent_effect !== null &&\n\t\t\t(current_effect.f & CLEAN) !== 0 &&\n\t\t\t(current_effect.f & BRANCH_EFFECT) === 0 &&\n\t\t\tcurrent_untracked_writes.includes(signal)\n\t\t) {\n\t\t\tset_signal_status(current_effect, DIRTY);\n\t\t\tschedule_effect(current_effect);\n\t\t}\n\t}\n\n\tif (\n\t\t(flags & DERIVED) !== 0 &&\n\t\tcheck_dirtiness(/** @type {import('#client').Derived} */ (signal))\n\t) {\n\t\tif (DEV) {\n\t\t\t// we want to avoid tracking indirect dependencies\n\t\t\tconst previous_inspect_fn = inspect_fn;\n\t\t\tinspect_fn = null;\n\t\t\tupdate_derived(/** @type {import('./types.js').Derived} **/ (signal), false);\n\t\t\tinspect_fn = previous_inspect_fn;\n\t\t} else {\n\t\t\tupdate_derived(/** @type {import('./types.js').Derived} **/ (signal), false);\n\t\t}\n\t}\n\n\treturn signal.v;\n}\n\n/**\n * Invokes a function and captures all signals that are read during the invocation,\n * then invalidates them.\n * @param {() => any} fn\n */\nexport function invalidate_inner_signals(fn) {\n\tvar previous_is_signals_recorded = is_signals_recorded;\n\tvar previous_captured_signals = captured_signals;\n\tis_signals_recorded = true;\n\tcaptured_signals = new Set();\n\tvar captured = captured_signals;\n\tvar signal;\n\ttry {\n\t\tuntrack(fn);\n\t} finally {\n\t\tis_signals_recorded = previous_is_signals_recorded;\n\t\tif (is_signals_recorded) {\n\t\t\tfor (signal of captured_signals) {\n\t\t\t\tprevious_captured_signals.add(signal);\n\t\t\t}\n\t\t}\n\t\tcaptured_signals = previous_captured_signals;\n\t}\n\tfor (signal of captured) {\n\t\tmutate(signal, null /* doesnt matter */);\n\t}\n}\n\n/**\n * @param {import('#client').Value} signal\n * @param {number} to_status\n * @param {boolean} force_schedule\n * @returns {void}\n */\nexport function mark_reactions(signal, to_status, force_schedule) {\n\tvar reactions = signal.reactions;\n\tif (reactions === null) return;\n\n\tvar runes = is_runes();\n\tvar length = reactions.length;\n\n\tfor (var i = 0; i < length; i++) {\n\t\tvar reaction = reactions[i];\n\n\t\t// We skip any effects that are already dirty (but not unowned). Additionally, we also\n\t\t// skip if the reaction is the same as the current effect (except if we're not in runes or we\n\t\t// are in force schedule mode).\n\t\tif ((!force_schedule || !runes) && reaction === current_effect) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar flags = reaction.f;\n\t\tset_signal_status(reaction, to_status);\n\n\t\t// If the signal is not clean, then skip over it – with the exception of unowned signals that\n\t\t// are already maybe dirty. Unowned signals might be dirty because they are not captured as part of an\n\t\t// effect.\n\t\tvar maybe_dirty = (flags & MAYBE_DIRTY) !== 0;\n\t\tvar unowned = (flags & UNOWNED) !== 0;\n\n\t\tif ((flags & CLEAN) !== 0 || (maybe_dirty && unowned)) {\n\t\t\tif ((reaction.f & DERIVED) !== 0) {\n\t\t\t\tmark_reactions(\n\t\t\t\t\t/** @type {import('#client').Derived} */ (reaction),\n\t\t\t\t\tMAYBE_DIRTY,\n\t\t\t\t\tforce_schedule\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tschedule_effect(/** @type {import('#client').Effect} */ (reaction));\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Use `untrack` to prevent something from being treated as an `$effect`/`$derived` dependency.\n *\n * https://svelte-5-preview.vercel.app/docs/functions#untrack\n * @template T\n * @param {() => T} fn\n * @returns {T}\n */\nexport function untrack(fn) {\n\tconst previous_untracking = current_untracking;\n\ttry {\n\t\tcurrent_untracking = true;\n\t\treturn fn();\n\t} finally {\n\t\tcurrent_untracking = previous_untracking;\n\t}\n}\n\nconst STATUS_MASK = ~(DIRTY | MAYBE_DIRTY | CLEAN);\n\n/**\n * @param {import('./types.js').Signal} signal\n * @param {number} status\n * @returns {void}\n */\nexport function set_signal_status(signal, status) {\n\tsignal.f = (signal.f & STATUS_MASK) | status;\n}\n\n/**\n * @template V\n * @param {V | import('./types.js').Value<V>} val\n * @returns {val is import('./types.js').Value<V>}\n */\nexport function is_signal(val) {\n\treturn (\n\t\ttypeof val === 'object' &&\n\t\tval !== null &&\n\t\ttypeof (/** @type {import('./types.js').Value<V>} */ (val).f) === 'number'\n\t);\n}\n\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#getcontext\n * @template T\n * @param {any} key\n * @returns {T}\n */\nexport function getContext(key) {\n\tconst context_map = get_or_init_context_map();\n\tconst result = /** @type {T} */ (context_map.get(key));\n\n\tif (DEV) {\n\t\t// @ts-expect-error\n\t\tconst fn = current_component_context?.function;\n\t\tif (fn) {\n\t\t\tadd_owner(result, fn, true);\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#setcontext\n * @template T\n * @param {any} key\n * @param {T} context\n * @returns {T}\n */\nexport function setContext(key, context) {\n\tconst context_map = get_or_init_context_map();\n\tcontext_map.set(key, context);\n\treturn context;\n}\n\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#hascontext\n * @param {any} key\n * @returns {boolean}\n */\nexport function hasContext(key) {\n\tconst context_map = get_or_init_context_map();\n\treturn context_map.has(key);\n}\n\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs/svelte#getallcontexts\n * @template {Map<any, any>} [T=Map<any, any>]\n * @returns {T}\n */\nexport function getAllContexts() {\n\tconst context_map = get_or_init_context_map();\n\n\tif (DEV) {\n\t\t// @ts-expect-error\n\t\tconst fn = current_component_context?.function;\n\t\tif (fn) {\n\t\t\tfor (const value of context_map.values()) {\n\t\t\t\tadd_owner(value, fn, true);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn /** @type {T} */ (context_map);\n}\n\n/** @returns {Map<unknown, unknown>} */\nfunction get_or_init_context_map() {\n\tconst component_context = current_component_context;\n\tif (component_context === null) {\n\t\tthrow new Error(\n\t\t\t'ERR_SVELTE_ORPHAN_CONTEXT' +\n\t\t\t\t(DEV ? 'Context can only be used during component initialisation.' : '')\n\t\t);\n\t}\n\treturn (component_context.c ??= new Map(get_parent_context(component_context) || undefined));\n}\n\n/**\n * @param {import('./types.js').ComponentContext} component_context\n * @returns {Map<unknown, unknown> | null}\n */\nfunction get_parent_context(component_context) {\n\tlet parent = component_context.p;\n\twhile (parent !== null) {\n\t\tconst context_map = parent.c;\n\t\tif (context_map !== null) {\n\t\t\treturn context_map;\n\t\t}\n\t\tparent = parent.p;\n\t}\n\treturn null;\n}\n\n/**\n * @param {import('./types.js').Value<number>} signal\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update(signal, d = 1) {\n\tconst value = get(signal);\n\tset(signal, value + d);\n\treturn value;\n}\n\n/**\n * @param {import('./types.js').Value<number>} signal\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update_pre(signal, d = 1) {\n\tconst value = get(signal) + d;\n\tset(signal, value);\n\treturn value;\n}\n\n/**\n * @param {Record<string, unknown>} obj\n * @param {string[]} keys\n * @returns {Record<string, unknown>}\n */\nexport function exclude_from_object(obj, keys) {\n\tobj = { ...obj };\n\tlet key;\n\tfor (key of keys) {\n\t\tdelete obj[key];\n\t}\n\treturn obj;\n}\n\n/**\n * @template V\n * @param {V} value\n * @param {() => V} fallback lazy because could contain side effects\n * @returns {V}\n */\nexport function value_or_fallback(value, fallback) {\n\treturn value === undefined ? fallback() : value;\n}\n\n/**\n * @template V\n * @param {V} value\n * @param {() => Promise<V>} fallback lazy because could contain side effects\n * @returns {Promise<V>}\n */\nexport async function value_or_fallback_async(value, fallback) {\n\treturn value === undefined ? fallback() : value;\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {any} runes\n * @param {Function} [fn]\n * @returns {void}\n */\nexport function push(props, runes = false, fn) {\n\tcurrent_component_context = {\n\t\t// exports (and props, if `accessors: true`)\n\t\tx: null,\n\t\t// context\n\t\tc: null,\n\t\t// effects\n\t\te: null,\n\t\t// mounted\n\t\tm: false,\n\t\t// parent\n\t\tp: current_component_context,\n\t\t// signals\n\t\td: null,\n\t\t// props\n\t\ts: props,\n\t\t// runes\n\t\tr: runes,\n\t\t// legacy $:\n\t\tl1: [],\n\t\tl2: source(false),\n\t\t// update_callbacks\n\t\tu: null\n\t};\n\n\tif (DEV) {\n\t\t// component function\n\t\t// @ts-expect-error\n\t\tcurrent_component_context.function = fn;\n\t}\n}\n\n/**\n * @template {Record<string, any>} T\n * @param {T} [component]\n * @returns {T}\n */\nexport function pop(component) {\n\tconst context_stack_item = current_component_context;\n\tif (context_stack_item !== null) {\n\t\tif (component !== undefined) {\n\t\t\tcontext_stack_item.x = component;\n\t\t}\n\t\tconst effects = context_stack_item.e;\n\t\tif (effects !== null) {\n\t\t\tcontext_stack_item.e = null;\n\t\t\tfor (let i = 0; i < effects.length; i++) {\n\t\t\t\teffect(effects[i]);\n\t\t\t}\n\t\t}\n\t\tcurrent_component_context = context_stack_item.p;\n\t\tcontext_stack_item.m = true;\n\t}\n\t// Micro-optimization: Don't set .a above to the empty object\n\t// so it can be garbage-collected when the return here is unused\n\treturn component || /** @type {T} */ ({});\n}\n\n/**\n * Possibly traverse an object and read all its properties so that they're all reactive in case this is `$state`.\n * Does only check first level of an object for performance reasons (heuristic should be good for 99% of all cases).\n * @param {any} value\n * @returns {void}\n */\nexport function deep_read_state(value) {\n\tif (typeof value !== 'object' || !value || value instanceof EventTarget) {\n\t\treturn;\n\t}\n\n\tif (STATE_SYMBOL in value) {\n\t\tdeep_read(value);\n\t} else if (!Array.isArray(value)) {\n\t\tfor (let key in value) {\n\t\t\tconst prop = value[key];\n\t\t\tif (typeof prop === 'object' && prop && STATE_SYMBOL in prop) {\n\t\t\t\tdeep_read(prop);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Deeply traverse an object and read all its properties\n * so that they're all reactive in case this is `$state`\n * @param {any} value\n * @param {Set<any>} visited\n * @returns {void}\n */\nexport function deep_read(value, visited = new Set()) {\n\tif (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\t// We don't want to traverse DOM elements\n\t\t!(value instanceof EventTarget) &&\n\t\t!visited.has(value)\n\t) {\n\t\tvisited.add(value);\n\t\tfor (let key in value) {\n\t\t\ttry {\n\t\t\t\tdeep_read(value[key], visited);\n\t\t\t} catch (e) {\n\t\t\t\t// continue\n\t\t\t}\n\t\t}\n\t\tconst proto = get_prototype_of(value);\n\t\tif (\n\t\t\tproto !== Object.prototype &&\n\t\t\tproto !== Array.prototype &&\n\t\t\tproto !== Map.prototype &&\n\t\t\tproto !== Set.prototype &&\n\t\t\tproto !== Date.prototype\n\t\t) {\n\t\t\tconst descriptors = get_descriptors(proto);\n\t\t\tfor (let key in descriptors) {\n\t\t\t\tconst get = descriptors[key].get;\n\t\t\t\tif (get) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tget.call(value);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// continue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Like `snapshot`, but recursively traverses into normal arrays/objects to find potential states in them.\n * @param {any} value\n * @param {Map<any, any>} visited\n * @returns {any}\n */\nfunction deep_snapshot(value, visited = new Map()) {\n\tif (typeof value === 'object' && value !== null && !visited.has(value)) {\n\t\tconst unstated = snapshot(value);\n\t\tif (unstated !== value) {\n\t\t\tvisited.set(value, unstated);\n\t\t\treturn unstated;\n\t\t}\n\t\tconst prototype = get_prototype_of(value);\n\t\t// Only deeply snapshot plain objects and arrays\n\t\tif (prototype === object_prototype || prototype === array_prototype) {\n\t\t\tlet contains_unstated = false;\n\t\t\t/** @type {any} */\n\t\t\tconst nested_unstated = Array.isArray(value) ? [] : {};\n\t\t\tfor (let key in value) {\n\t\t\t\tconst result = deep_snapshot(value[key], visited);\n\t\t\t\tnested_unstated[key] = result;\n\t\t\t\tif (result !== value[key]) {\n\t\t\t\t\tcontains_unstated = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvisited.set(value, contains_unstated ? nested_unstated : value);\n\t\t} else {\n\t\t\tvisited.set(value, value);\n\t\t}\n\t}\n\n\treturn visited.get(value) ?? value;\n}\n\n// TODO remove in a few versions, before 5.0 at the latest\nlet warned_inspect_changed = false;\n\n/**\n * @param {() => any[]} get_value\n * @param {Function} [inspect]\n */\n// eslint-disable-next-line no-console\nexport function inspect(get_value, inspect = console.log) {\n\tlet initial = true;\n\n\tuser_pre_effect(() => {\n\t\tconst fn = () => {\n\t\t\tconst value = untrack(() => get_value().map((v) => deep_snapshot(v)));\n\t\t\tif (value.length === 2 && typeof value[1] === 'function' && !warned_inspect_changed) {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'$inspect() API has changed. See https://svelte-5-preview.vercel.app/docs/runes#$inspect for more information.'\n\t\t\t\t);\n\t\t\t\twarned_inspect_changed = true;\n\t\t\t}\n\t\t\tinspect(initial ? 'init' : 'update', ...value);\n\t\t};\n\n\t\tinspect_fn = fn;\n\t\tconst value = get_value();\n\t\tdeep_read(value);\n\t\tinspect_fn = null;\n\n\t\tconst signals = inspect_captured_signals.slice();\n\t\tinspect_captured_signals = [];\n\n\t\tif (initial) {\n\t\t\tfn();\n\t\t\tinitial = false;\n\t\t}\n\n\t\treturn () => {\n\t\t\tfor (const s of signals) {\n\t\t\t\ts.inspect.delete(fn);\n\t\t\t}\n\t\t};\n\t});\n}\n\n/**\n * @template V\n * @param {V | import('#client').Value<V>} value\n * @returns {V}\n */\nexport function unwrap(value) {\n\tif (is_signal(value)) {\n\t\t// @ts-ignore\n\t\treturn get(value);\n\t}\n\t// @ts-ignore\n\treturn value;\n}\n\nif (DEV) {\n\t/**\n\t * @param {string} rune\n\t */\n\tfunction throw_rune_error(rune) {\n\t\tif (!(rune in globalThis)) {\n\t\t\t// TODO if people start adjusting the \"this can contain runes\" config through v-p-s more, adjust this message\n\t\t\t/** @type {any} */\n\t\t\tlet value; // let's hope noone modifies this global, but belts and braces\n\t\t\tObject.defineProperty(globalThis, rune, {\n\t\t\t\tconfigurable: true,\n\t\t\t\tget: () => {\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`The ${rune} rune is only available inside .svelte and .svelte.js/ts files`\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\tset: (v) => {\n\t\t\t\t\tvalue = v;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tthrow_rune_error('$state');\n\tthrow_rune_error('$effect');\n\tthrow_rune_error('$derived');\n\tthrow_rune_error('$inspect');\n\tthrow_rune_error('$props');\n\tthrow_rune_error('$bindable');\n}\n\n/**\n * Expects a value that was wrapped with `freeze` and makes it frozen.\n * @template T\n * @param {T} value\n * @returns {Readonly<T>}\n */\nexport function freeze(value) {\n\tif (typeof value === 'object' && value != null && !is_frozen(value)) {\n\t\t// If the object is already proxified, then snapshot the value\n\t\tif (STATE_SYMBOL in value) {\n\t\t\treturn object_freeze(snapshot(value));\n\t\t}\n\t\t// Otherwise freeze the object\n\t\tobject_freeze(value);\n\t}\n\treturn value;\n}\n","import { is_array } from '../utils.js';\n\n/** @param {string} html */\nexport function create_fragment_from_html(html) {\n\tvar elem = document.createElement('template');\n\telem.innerHTML = html;\n\treturn elem.content;\n}\n\n/**\n * @param {import('#client').Dom} current\n */\nexport function remove(current) {\n\tif (is_array(current)) {\n\t\tfor (var i = 0; i < current.length; i++) {\n\t\t\tvar node = current[i];\n\t\t\tif (node.isConnected) {\n\t\t\t\tnode.remove();\n\t\t\t}\n\t\t}\n\t} else if (current.isConnected) {\n\t\tcurrent.remove();\n\t}\n}\n","import { DEV } from 'esm-env';\nimport {\n\tcheck_dirtiness,\n\tcurrent_component_context,\n\tcurrent_effect,\n\tcurrent_reaction,\n\tdestroy_effect_children,\n\texecute_effect,\n\tget,\n\tis_destroying_effect,\n\tis_flushing_effect,\n\tremove_reactions,\n\tschedule_effect,\n\tset_is_destroying_effect,\n\tset_is_flushing_effect,\n\tset_signal_status,\n\tuntrack\n} from '../runtime.js';\nimport {\n\tDIRTY,\n\tBRANCH_EFFECT,\n\tRENDER_EFFECT,\n\tEFFECT,\n\tDESTROYED,\n\tINERT,\n\tEFFECT_RAN,\n\tBLOCK_EFFECT,\n\tROOT_EFFECT,\n\tEFFECT_TRANSPARENT\n} from '../constants.js';\nimport { set } from './sources.js';\nimport { remove } from '../dom/reconciler.js';\n\n/**\n * @param {import(\"#client\").Effect} effect\n * @param {import(\"#client\").Reaction} parent_effect\n */\nexport function push_effect(effect, parent_effect) {\n\tvar parent_last = parent_effect.last;\n\tif (parent_last === null) {\n\t\tparent_effect.last = parent_effect.first = effect;\n\t} else {\n\t\tparent_last.next = effect;\n\t\teffect.prev = parent_last;\n\t\tparent_effect.last = effect;\n\t}\n}\n\n/**\n * @param {number} type\n * @param {(() => void | (() => void))} fn\n * @param {boolean} sync\n * @returns {import('#client').Effect}\n */\nfunction create_effect(type, fn, sync) {\n\tvar is_root = (type & ROOT_EFFECT) !== 0;\n\n\t/** @type {import('#client').Effect} */\n\tvar effect = {\n\t\tctx: current_component_context,\n\t\tdeps: null,\n\t\tdom: null,\n\t\tf: type | DIRTY,\n\t\tfirst: null,\n\t\tfn,\n\t\tlast: null,\n\t\tnext: null,\n\t\tparent: is_root ? null : current_effect,\n\t\tprev: null,\n\t\tteardown: null,\n\t\ttransitions: null\n\t};\n\n\tif (current_reaction !== null && !is_root) {\n\t\tpush_effect(effect, current_reaction);\n\t}\n\n\tif (sync) {\n\t\tvar previously_flushing_effect = is_flushing_effect;\n\n\t\ttry {\n\t\t\tset_is_flushing_effect(true);\n\t\t\texecute_effect(effect);\n\t\t\teffect.f |= EFFECT_RAN;\n\t\t} finally {\n\t\t\tset_is_flushing_effect(previously_flushing_effect);\n\t\t}\n\t} else {\n\t\tschedule_effect(effect);\n\t}\n\n\treturn effect;\n}\n\n/**\n * Internal representation of `$effect.active()`\n * @returns {boolean}\n */\nexport function effect_active() {\n\treturn current_effect ? (current_effect.f & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 : false;\n}\n\n/**\n * Internal representation of `$effect(...)`\n * @param {() => void | (() => void)} fn\n */\nexport function user_effect(fn) {\n\tif (current_effect === null) {\n\t\tthrow new Error(\n\t\t\t'ERR_SVELTE_ORPHAN_EFFECT' +\n\t\t\t\t(DEV ? ': The Svelte $effect rune can only be used during component initialisation.' : '')\n\t\t);\n\t}\n\tif (is_destroying_effect) {\n\t\tthrow new Error(\n\t\t\t'ERR_SVELTE_EFFECT_IN_TEARDOWN' +\n\t\t\t\t(DEV ? ': The Svelte $effect rune can not be used in the teardown phase of an effect.' : '')\n\t\t);\n\t}\n\n\t// Non-nested `$effect(...)` in a component should be deferred\n\t// until the component is mounted\n\tconst defer =\n\t\tcurrent_effect.f & RENDER_EFFECT &&\n\t\t// TODO do we actually need this? removing them changes nothing\n\t\tcurrent_component_context !== null &&\n\t\t!current_component_context.m;\n\n\tif (defer) {\n\t\tconst context = /** @type {import('#client').ComponentContext} */ (current_component_context);\n\t\t(context.e ??= []).push(fn);\n\t} else {\n\t\teffect(fn);\n\t}\n}\n\n/**\n * Internal representation of `$effect.pre(...)`\n * @param {() => void | (() => void)} fn\n * @returns {import('#client').Effect}\n */\nexport function user_pre_effect(fn) {\n\tif (current_effect === null) {\n\t\tthrow new Error(\n\t\t\t'ERR_SVELTE_ORPHAN_EFFECT' +\n\t\t\t\t(DEV\n\t\t\t\t\t? ': The Svelte $effect.pre rune can only be used during component initialisation.'\n\t\t\t\t\t: '')\n\t\t);\n\t}\n\tif (is_destroying_effect) {\n\t\tthrow new Error(\n\t\t\t'ERR_SVELTE_EFFECT_IN_TEARDOWN' +\n\t\t\t\t(DEV\n\t\t\t\t\t? ': The Svelte $effect.pre rune can not be used in the teardown phase of an effect.'\n\t\t\t\t\t: '')\n\t\t);\n\t}\n\n\treturn render_effect(fn);\n}\n\n/**\n * Internal representation of `$effect.root(...)`\n * @param {() => void | (() => void)} fn\n * @returns {() => void}\n */\nexport function effect_root(fn) {\n\tconst effect = create_effect(ROOT_EFFECT, fn, true);\n\treturn () => {\n\t\tdestroy_effect(effect);\n\t};\n}\n\n/**\n * @param {() => void | (() => void)} fn\n * @returns {import('#client').Effect}\n */\nexport function effect(fn) {\n\treturn create_effect(EFFECT, fn, false);\n}\n\n/**\n * Internal representation of `$: ..`\n * @param {() => any} deps\n * @param {() => void | (() => void)} fn\n */\nexport function legacy_pre_effect(deps, fn) {\n\tvar context = /** @type {import('#client').ComponentContext} */ (current_component_context);\n\n\t/** @type {{ effect: null | import('#client').Effect, ran: boolean }} */\n\tvar token = { effect: null, ran: false };\n\tcontext.l1.push(token);\n\n\ttoken.effect = render_effect(() => {\n\t\tdeps();\n\n\t\t// If this legacy pre effect has already run before the end of the reset, then\n\t\t// bail-out to emulate the same behavior.\n\t\tif (token.ran) return;\n\n\t\ttoken.ran = true;\n\t\tset(context.l2, true);\n\t\tuntrack(fn);\n\t});\n}\n\nexport function legacy_pre_effect_reset() {\n\tvar context = /** @type {import('#client').ComponentContext} */ (current_component_context);\n\n\trender_effect(() => {\n\t\tif (!get(context.l2)) return;\n\n\t\t// Run dirty `$:` statements\n\t\tfor (var token of context.l1) {\n\t\t\tvar effect = token.effect;\n\n\t\t\tif (check_dirtiness(effect)) {\n\t\t\t\texecute_effect(effect);\n\t\t\t}\n\n\t\t\ttoken.ran = false;\n\t\t}\n\n\t\tcontext.l2.v = false; // set directly to avoid rerunning this effect\n\t});\n}\n\n/**\n * @param {() => void | (() => void)} fn\n * @returns {import('#client').Effect}\n */\nexport function render_effect(fn) {\n\treturn create_effect(RENDER_EFFECT, fn, true);\n}\n\n/** @param {(() => void)} fn */\nexport function block(fn) {\n\treturn create_effect(RENDER_EFFECT | BLOCK_EFFECT, fn, true);\n}\n\n/** @param {(() => void)} fn */\nexport function branch(fn) {\n\treturn create_effect(RENDER_EFFECT | BRANCH_EFFECT, fn, true);\n}\n\n/**\n * @param {import(\"#client\").Effect} effect\n */\nexport function execute_effect_teardown(effect) {\n\tvar teardown = effect.teardown;\n\tif (teardown !== null) {\n\t\tconst previously_destroying_effect = is_destroying_effect;\n\t\tset_is_destroying_effect(true);\n\t\ttry {\n\t\t\tteardown.call(null);\n\t\t} finally {\n\t\t\tset_is_destroying_effect(previously_destroying_effect);\n\t\t}\n\t}\n}\n\n/**\n * @param {import('#client').Effect} effect\n * @returns {void}\n */\nexport function destroy_effect(effect) {\n\tvar dom = effect.dom;\n\n\tif (dom !== null) {\n\t\tremove(dom);\n\t}\n\n\tdestroy_effect_children(effect);\n\tremove_reactions(effect, 0);\n\tset_signal_status(effect, DESTROYED);\n\n\tif (effect.transitions) {\n\t\tfor (const transition of effect.transitions) {\n\t\t\ttransition.stop();\n\t\t}\n\t}\n\n\texecute_effect_teardown(effect);\n\n\tvar parent = effect.parent;\n\n\t// If the parent doesn't have any children, then skip this work altogether\n\tif (parent !== null && (effect.f & BRANCH_EFFECT) !== 0 && parent.first !== null) {\n\t\tvar previous = effect.prev;\n\t\tvar next = effect.next;\n\t\tif (previous !== null) {\n\t\t\tif (next !== null) {\n\t\t\t\tprevious.next = next;\n\t\t\t\tnext.prev = previous;\n\t\t\t} else {\n\t\t\t\tprevious.next = null;\n\t\t\t\tparent.last = previous;\n\t\t\t}\n\t\t} else if (next !== null) {\n\t\t\tnext.prev = null;\n\t\t\tparent.first = next;\n\t\t} else {\n\t\t\tparent.first = null;\n\t\t\tparent.last = null;\n\t\t}\n\t}\n\n\t// `first` and `child` are nulled out in destroy_effect_children\n\teffect.next =\n\t\teffect.prev =\n\t\teffect.teardown =\n\t\teffect.ctx =\n\t\teffect.dom =\n\t\teffect.deps =\n\t\teffect.parent =\n\t\t// @ts-expect-error\n\t\teffect.fn =\n\t\t\tnull;\n}\n\n/**\n * When a block effect is removed, we don't immediately destroy it or yank it\n * out of the DOM, because it might have transitions. Instead, we 'pause' it.\n * It stays around (in memory, and in the DOM) until outro transitions have\n * completed, and if the state change is reversed then we _resume_ it.\n * A paused effect does not update, and the DOM subtree becomes inert.\n * @param {import('#client').Effect} effect\n * @param {() => void} [callback]\n */\nexport function pause_effect(effect, callback) {\n\t/** @type {import('#client').TransitionManager[]} */\n\tvar transitions = [];\n\n\tpause_children(effect, transitions, true);\n\n\trun_out_transitions(transitions, () => {\n\t\tdestroy_effect(effect);\n\t\tif (callback) callback();\n\t});\n}\n\n/**\n * @param {import('#client').TransitionManager[]} transitions\n * @param {() => void} fn\n */\nexport function run_out_transitions(transitions, fn) {\n\tvar remaining = transitions.length;\n\tif (remaining > 0) {\n\t\tvar check = () => --remaining || fn();\n\t\tfor (var transition of transitions) {\n\t\t\ttransition.out(check);\n\t\t}\n\t} else {\n\t\tfn();\n\t}\n}\n\n/**\n * @param {import('#client').Effect} effect\n * @param {import('#client').TransitionManager[]} transitions\n * @param {boolean} local\n */\nexport function pause_children(effect, transitions, local) {\n\tif ((effect.f & INERT) !== 0) return;\n\teffect.f ^= INERT;\n\n\tif (effect.transitions !== null) {\n\t\tfor (const transition of effect.transitions) {\n\t\t\tif (transition.is_global || local) {\n\t\t\t\ttransitions.push(transition);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar child = effect.first;\n\n\twhile (child !== null) {\n\t\tvar sibling = child.next;\n\t\tvar transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;\n\t\t// TODO we don't need to call pause_children recursively with a linked list in place\n\t\t// it's slightly more involved though as we have to account for `transparent` changing\n\t\t// through the tree.\n\t\tpause_children(child, transitions, transparent ? local : false);\n\t\tchild = sibling;\n\t}\n}\n\n/**\n * The opposite of `pause_effect`. We call this if (for example)\n * `x` becomes falsy then truthy: `{#if x}...{/if}`\n * @param {import('#client').Effect} effect\n */\nexport function resume_effect(effect) {\n\tresume_children(effect, true);\n}\n\n/**\n * @param {import('#client').Effect} effect\n * @param {boolean} local\n */\nfunction resume_children(effect, local) {\n\tif ((effect.f & INERT) === 0) return;\n\teffect.f ^= INERT;\n\n\t// If a dependency of this effect changed while it was paused,\n\t// apply the change now\n\tif (check_dirtiness(effect)) {\n\t\texecute_effect(effect);\n\t}\n\n\tvar child = effect.first;\n\n\twhile (child !== null) {\n\t\tvar sibling = child.next;\n\t\tvar transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;\n\t\t// TODO we don't need to call resume_children recursively with a linked list in place\n\t\t// it's slightly more involved though as we have to account for `transparent` changing\n\t\t// through the tree.\n\t\tresume_children(child, transparent ? local : false);\n\t\tchild = sibling;\n\t}\n\n\tif (effect.transitions !== null) {\n\t\tfor (const transition of effect.transitions) {\n\t\t\tif (transition.is_global || local) {\n\t\t\t\ttransition.in();\n\t\t\t}\n\t\t}\n\t}\n}\n","import { hydrate_anchor, hydrate_nodes, hydrating } from './hydration.js';\nimport { get_descriptor } from '../utils.js';\n\n// We cache the Node and Element prototype methods, so that we can avoid doing\n// expensive prototype chain lookups.\n\n/** @type {Node} */\nvar node_prototype;\n\n/** @type {Element} */\nvar element_prototype;\n\n/** @type {Text} */\nvar text_prototype;\n\n/** @type {typeof Node.prototype.appendChild} */\nvar append_child_method;\n\n/** @type {typeof Node.prototype.cloneNode} */\nvar clone_node_method;\n\n/** @type {(this: Node) => ChildNode | null} */\nvar first_child_get;\n\n/** @type {(this: Node) => ChildNode | null} */\nvar next_sibling_get;\n\n/** @type {(this: Node, text: string ) => void} */\nvar text_content_set;\n\n/** @type {(this: Element, class_name: string) => void} */\nvar class_name_set;\n\n// export these for reference in the compiled code, making global name deduplication unnecessary\n/**\n * @type {Window}\n */\nexport var $window;\n/**\n * @type {Document}\n */\nexport var $document;\n\n/**\n * Initialize these lazily to avoid issues when using the runtime in a server context\n * where these globals are not available while avoiding a separate server entry point\n */\nexport function init_operations() {\n\tif (node_prototype !== undefined) {\n\t\treturn;\n\t}\n\n\tnode_prototype = Node.prototype;\n\telement_prototype = Element.prototype;\n\ttext_prototype = Text.prototype;\n\n\tappend_child_method = node_prototype.appendChild;\n\tclone_node_method = node_prototype.cloneNode;\n\n\t$window = window;\n\t$document = document;\n\n\t// the following assignments improve perf of lookups on DOM nodes\n\t// @ts-expect-error\n\telement_prototype.__click = undefined;\n\t// @ts-expect-error\n\ttext_prototype.__nodeValue = ' ';\n\t// @ts-expect-error\n\telement_prototype.__className = '';\n\t// @ts-expect-error\n\telement_prototype.__attributes = null;\n\n\tfirst_child_get = /** @type {(this: Node) => ChildNode | null} */ (\n\t\t// @ts-ignore\n\t\tget_descriptor(node_prototype, 'firstChild').get\n\t);\n\n\tnext_sibling_get = /** @type {(this: Node) => ChildNode | null} */ (\n\t\t// @ts-ignore\n\t\tget_descriptor(node_prototype, 'nextSibling').get\n\t);\n\n\ttext_content_set = /** @type {(this: Node, text: string ) => void} */ (\n\t\t// @ts-ignore\n\t\tget_descriptor(node_prototype, 'textContent').set\n\t);\n\n\tclass_name_set = /** @type {(this: Element, class_name: string) => void} */ (\n\t\t// @ts-ignore\n\t\tget_descriptor(element_prototype, 'className').set\n\t);\n}\n\n/**\n * @template {Element} E\n * @template {Node} T\n * @param {E} element\n * @param {T} child\n */\nexport function append_child(element, child) {\n\tappend_child_method.call(element, child);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @param {boolean} deep\n * @returns {N}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function clone_node(node, deep) {\n\treturn /** @type {N} */ (clone_node_method.call(node, deep));\n}\n\n/** @returns {Text} */\nexport function empty() {\n\treturn document.createTextNode('');\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {Node | null}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function child(node) {\n\tconst child = first_child_get.call(node);\n\tif (!hydrating) return child;\n\n\t// Child can be null if we have an element with a single child, like `<p>{text}</p>`, where `text` is empty\n\tif (child === null) {\n\t\treturn node.appendChild(empty());\n\t}\n\n\treturn hydrate_anchor(child);\n}\n\n/**\n * @param {DocumentFragment | import('#client').TemplateNode[]} fragment\n * @param {boolean} is_text\n * @returns {Node | null}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function first_child(fragment, is_text) {\n\tif (!hydrating) {\n\t\t// when not hydrating, `fragment` is a `DocumentFragment` (the result of calling `open_frag`)\n\t\treturn first_child_get.call(/** @type {DocumentFragment} */ (fragment));\n\t}\n\n\t// when we _are_ hydrating, `fragment` is an array of nodes\n\tconst first_node = /** @type {import('#client').TemplateNode[]} */ (fragment)[0];\n\n\t// if an {expression} is empty during SSR, there might be no\n\t// text node to hydrate — we must therefore create one\n\tif (is_text && first_node?.nodeType !== 3) {\n\t\tconst text = empty();\n\t\thydrate_nodes.unshift(text);\n\t\tfirst_node?.before(text);\n\t\treturn text;\n\t}\n\n\treturn hydrate_anchor(first_node);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @param {boolean} is_text\n * @returns {Node | null}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function sibling(node, is_text = false) {\n\tconst next_sibling = next_sibling_get.call(node);\n\n\tif (!hydrating) {\n\t\treturn next_sibling;\n\t}\n\n\t// if a sibling {expression} is empty during SSR, there might be no\n\t// text node to hydrate — we must therefore create one\n\tif (is_text && next_sibling?.nodeType !== 3) {\n\t\tconst text = empty();\n\t\tif (next_sibling) {\n\t\t\tconst index = hydrate_nodes.indexOf(/** @type {Text | Comment | Element} */ (next_sibling));\n\t\t\thydrate_nodes.splice(index, 0, text);\n\t\t\tnext_sibling.before(text);\n\t\t} else {\n\t\t\thydrate_nodes.push(text);\n\t\t}\n\n\t\treturn text;\n\t}\n\n\treturn hydrate_anchor(/** @type {Node} */ (next_sibling));\n}\n\n/**\n * @template {Element} N\n * @param {N} node\n * @param {string} class_name\n * @returns {void}\n */\nexport function set_class_name(node, class_name) {\n\tclass_name_set.call(node, class_name);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {void}\n */\nexport function clear_text_content(node) {\n\ttext_content_set.call(node, '');\n}\n\n/** @param {string} name */\n/*#__NO_SIDE_EFFECTS__*/\nexport function create_element(name) {\n\treturn document.createElement(name);\n}\n","import { render_effect } from '../../reactivity/effects.js';\nimport { all_registered_events, root_event_handles } from '../../render.js';\nimport { define_property, is_array } from '../../utils.js';\n\n/**\n * @param {string} event_name\n * @param {Element} dom\n * @param {EventListener} handler\n * @param {boolean} capture\n * @param {boolean} [passive]\n * @returns {void}\n */\nexport function event(event_name, dom, handler, capture, passive) {\n\tvar options = { capture, passive };\n\n\t/**\n\t * @this {EventTarget}\n\t */\n\tfunction target_handler(/** @type {Event} */ event) {\n\t\tif (!capture) {\n\t\t\t// Only call in the bubble phase, else delegated events would be called before the capturing events\n\t\t\thandle_event_propagation(dom, event);\n\t\t}\n\t\tif (!event.cancelBubble) {\n\t\t\treturn handler.call(this, event);\n\t\t}\n\t}\n\n\tdom.addEventListener(event_name, target_handler, options);\n\n\t// @ts-ignore\n\tif (dom === document.body || dom === window || dom === document) {\n\t\trender_effect(() => {\n\t\t\treturn () => {\n\t\t\t\tdom.removeEventListener(event_name, target_handler, options);\n\t\t\t};\n\t\t});\n\t}\n}\n\n/**\n * @param {Array<string>} events\n * @returns {void}\n */\nexport function delegate(events) {\n\tfor (var i = 0; i < events.length; i++) {\n\t\tall_registered_events.add(events[i]);\n\t}\n\n\tfor (var fn of root_event_handles) {\n\t\tfn(events);\n\t}\n}\n\n/**\n * @param {Node} handler_element\n * @param {Event} event\n * @returns {void}\n */\nexport function handle_event_propagation(handler_element, event) {\n\tvar owner_document = handler_element.ownerDocument;\n\tvar event_name = event.type;\n\tvar path = event.composedPath?.() || [];\n\tvar current_target = /** @type {null | Element} */ (path[0] || event.target);\n\n\tif (event.target !== current_target) {\n\t\tdefine_property(event, 'target', {\n\t\t\tconfigurable: true,\n\t\t\tvalue: current_target\n\t\t});\n\t}\n\n\t// composedPath contains list of nodes the event has propagated through.\n\t// We check __root to skip all nodes below it in case this is a\n\t// parent of the __root node, which indicates that there's nested\n\t// mounted apps. In this case we don't want to trigger events multiple times.\n\tvar path_idx = 0;\n\n\t// @ts-expect-error is added below\n\tvar handled_at = event.__root;\n\n\tif (handled_at) {\n\t\tvar at_idx = path.indexOf(handled_at);\n\t\tif (\n\t\t\tat_idx !== -1 &&\n\t\t\t(handler_element === document || handler_element === /** @type {any} */ (window))\n\t\t) {\n\t\t\t// This is the fallback document listener or a window listener, but the event was already handled\n\t\t\t// -> ignore, but set handle_at to document/window so that we're resetting the event\n\t\t\t// chain in case someone manually dispatches the same event object again.\n\t\t\t// @ts-expect-error\n\t\t\tevent.__root = handler_element;\n\t\t\treturn;\n\t\t}\n\n\t\t// We're deliberately not skipping if the index is higher, because\n\t\t// someone could create an event programmatically and emit it multiple times,\n\t\t// in which case we want to handle the whole propagation chain properly each time.\n\t\t// (this will only be a false negative if the event is dispatched multiple times and\n\t\t// the fallback document listener isn't reached in between, but that's super rare)\n\t\tvar handler_idx = path.indexOf(handler_element);\n\t\tif (handler_idx === -1) {\n\t\t\t// handle_idx can theoretically be -1 (happened in some JSDOM testing scenarios with an event listener on the window object)\n\t\t\t// so guard against that, too, and assume that everything was handled at this point.\n\t\t\treturn;\n\t\t}\n\n\t\tif (at_idx <= handler_idx) {\n\t\t\t// +1 because at_idx is the element which was already handled, and there can only be one delegated event per element.\n\t\t\t// Avoids on:click and onclick on the same event resulting in onclick being fired twice.\n\t\t\tpath_idx = at_idx + 1;\n\t\t}\n\t}\n\n\tcurrent_target = /** @type {Element} */ (path[path_idx] || event.target);\n\n\t// Proxy currentTarget to correct target\n\tdefine_property(event, 'currentTarget', {\n\t\tconfigurable: true,\n\t\tget() {\n\t\t\treturn current_target || owner_document;\n\t\t}\n\t});\n\n\twhile (current_target !== null) {\n\t\t/** @type {null | Element} */\n\t\tvar parent_element =\n\t\t\tcurrent_target.parentNode || /** @type {any} */ (current_target).host || null;\n\t\tvar internal_prop_name = '__' + event_name;\n\t\t// @ts-ignore\n\t\tvar delegated = current_target[internal_prop_name];\n\n\t\tif (delegated !== undefined && !(/** @type {any} */ (current_target).disabled)) {\n\t\t\tif (is_array(delegated)) {\n\t\t\t\tvar [fn, ...data] = delegated;\n\t\t\t\tfn.apply(current_target, [event, ...data]);\n\t\t\t} else {\n\t\t\t\tdelegated.call(current_target, event);\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tevent.cancelBubble ||\n\t\t\tparent_element === handler_element ||\n\t\t\tcurrent_target === handler_element\n\t\t) {\n\t\t\tbreak;\n\t\t}\n\n\t\tcurrent_target = parent_element;\n\t}\n\n\t// @ts-expect-error is used above\n\tevent.__root = handler_element;\n\t// @ts-expect-error is used above\n\tcurrent_target = handler_element;\n}\n","import { DEV } from 'esm-env';\nimport {\n\tappend_child,\n\tclear_text_content,\n\tcreate_element,\n\tempty,\n\tinit_operations\n} from './dom/operations.js';\nimport { HYDRATION_START, PassiveDelegatedEvents } from '../../constants.js';\nimport { flush_sync, push, pop, current_component_context } from './runtime.js';\nimport { effect_root, branch } from './reactivity/effects.js';\nimport {\n\thydrate_anchor,\n\thydrate_nodes,\n\thydrating,\n\tset_hydrate_nodes,\n\tset_hydrating\n} from './dom/hydration.js';\nimport { array_from } from './utils.js';\nimport { handle_event_propagation } from './dom/elements/events.js';\nimport { reset_head_anchor } from './dom/blocks/svelte-head.js';\n\n/** @type {Set<string>} */\nexport const all_registered_events = new Set();\n\n/** @type {Set<(events: Array<string>) => void>} */\nexport const root_event_handles = new Set();\n\n/**\n * This is normally true — block effects should run their intro transitions —\n * but is false during hydration and mounting (unless `options.intro` is `true`)\n * and when creating the children of a `<svelte:element>` that just changed tag\n */\nexport let should_intro = true;\n\n/** @param {boolean} value */\nexport function set_should_intro(value) {\n\tshould_intro = value;\n}\n\n/**\n * @param {Element} dom\n * @param {string} value\n * @returns {void}\n */\nexport function set_text(dom, value) {\n\t// @ts-expect-error need to add __value to patched prototype\n\tconst prev_node_value = dom.__nodeValue;\n\tconst next_node_value = stringify(value);\n\tif (hydrating && dom.nodeValue === next_node_value) {\n\t\t// In case of hydration don't reset the nodeValue as it's already correct.\n\t\t// @ts-expect-error need to add __nodeValue to patched prototype\n\t\tdom.__nodeValue = next_node_value;\n\t} else if (prev_node_value !== next_node_value) {\n\t\tdom.nodeValue = next_node_value;\n\t\t// @ts-expect-error need to add __className to patched prototype\n\t\tdom.__nodeValue = next_node_value;\n\t}\n}\n\n/**\n * @param {Comment} anchor\n * @param {void | ((anchor: Comment, slot_props: Record<string, unknown>) => void)} slot_fn\n * @param {Record<string, unknown>} slot_props\n * @param {null | ((anchor: Comment) => void)} fallback_fn\n */\nexport function slot(anchor, slot_fn, slot_props, fallback_fn) {\n\tif (slot_fn === undefined) {\n\t\tif (fallback_fn !== null) {\n\t\t\tfallback_fn(anchor);\n\t\t}\n\t} else {\n\t\tslot_fn(anchor, slot_props);\n\t}\n}\n\n/**\n * @param {unknown} value\n * @returns {string}\n */\nexport function stringify(value) {\n\treturn typeof value === 'string' ? value : value == null ? '' : value + '';\n}\n\n/**\n * Mounts a component to the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component\n *\n * @template {Record<string, any>} Props\n * @template {Record<string, any>} Exports\n * @template {Record<string, any>} Events\n * @param {import('../../index.js').ComponentType<import('../../index.js').SvelteComponent<Props, Events>>} component\n * @param {{\n * \t\ttarget: Document | Element | ShadowRoot;\n * \t\tanchor?: Node;\n * \t\tprops?: Props;\n * \t\tevents?: { [Property in keyof Events]: (e: Events[Property]) => any };\n * \t\tcontext?: Map<any, any>;\n * \t\tintro?: boolean;\n * \t}} options\n * @returns {Exports}\n */\nexport function mount(component, options) {\n\tconst anchor = options.anchor ?? options.target.appendChild(empty());\n\t// Don't flush previous effects to ensure order of outer effects stays consistent\n\treturn flush_sync(() => _mount(component, { ...options, anchor }), false);\n}\n\n/**\n * Hydrates a component on the given target and returns the exports and potentially the props (if compiled with `accessors: true`) of the component\n *\n * @template {Record<string, any>} Props\n * @template {Record<string, any>} Exports\n * @template {Record<string, any>} Events\n * @param {import('../../index.js').ComponentType<import('../../index.js').SvelteComponent<Props, Events>>} component\n * @param {{\n * \t\ttarget: Document | Element | ShadowRoot;\n * \t\tprops?: Props;\n * \t\tevents?: { [Property in keyof Events]: (e: Events[Property]) => any };\n *  \tcontext?: Map<any, any>;\n * \t\tintro?: boolean;\n * \t\trecover?: false;\n * \t}} options\n * @returns {Exports}\n */\nexport function hydrate(component, options) {\n\tconst target = options.target;\n\tconst previous_hydrate_nodes = hydrate_nodes;\n\n\tlet hydrated = false;\n\n\ttry {\n\t\t// Don't flush previous effects to ensure order of outer effects stays consistent\n\t\treturn flush_sync(() => {\n\t\t\tset_hydrating(true);\n\n\t\t\tvar node = target.firstChild;\n\t\t\twhile (\n\t\t\t\tnode &&\n\t\t\t\t(node.nodeType !== 8 || /** @type {Comment} */ (node).data !== HYDRATION_START)\n\t\t\t) {\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\n\t\t\tif (!node) {\n\t\t\t\tthrow new Error('Missing hydration marker');\n\t\t\t}\n\n\t\t\tconst anchor = hydrate_anchor(node);\n\t\t\tconst instance = _mount(component, { ...options, anchor });\n\n\t\t\t// flush_sync will run this callback and then synchronously run any pending effects,\n\t\t\t// which don't belong to the hydration phase anymore - therefore reset it here\n\t\t\tset_hydrating(false);\n\t\t\thydrated = true;\n\n\t\t\treturn instance;\n\t\t}, false);\n\t} catch (error) {\n\t\tif (!hydrated && options.recover !== false) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error(\n\t\t\t\t'ERR_SVELTE_HYDRATION_MISMATCH' +\n\t\t\t\t\t(DEV\n\t\t\t\t\t\t? ': Hydration failed because the initial UI does not match what was rendered on the server.'\n\t\t\t\t\t\t: ''),\n\t\t\t\terror\n\t\t\t);\n\n\t\t\tclear_text_content(target);\n\n\t\t\tset_hydrating(false);\n\t\t\treturn mount(component, options);\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t} finally {\n\t\tset_hydrating(!!previous_hydrate_nodes);\n\t\tset_hydrate_nodes(previous_hydrate_nodes);\n\t\treset_head_anchor();\n\t}\n}\n\n/**\n * @template {Record<string, any>} Props\n * @template {Record<string, any>} Exports\n * @template {Record<string, any>} Events\n * @param {import('../../index.js').ComponentType<import('../../index.js').SvelteComponent<Props, Events>>} Component\n * @param {{\n * \t\ttarget: Document | Element | ShadowRoot;\n * \t\tanchor: Node;\n * \t\tprops?: Props;\n * \t\tevents?: { [Property in keyof Events]: (e: Events[Property]) => any };\n * \t\tcontext?: Map<any, any>;\n * \t\tintro?: boolean;\n * \t}} options\n * @returns {Exports}\n */\nfunction _mount(\n\tComponent,\n\t{ target, anchor, props = /** @type {Props} */ ({}), events, context, intro = false }\n) {\n\tinit_operations();\n\n\tconst registered_events = new Set();\n\n\tconst bound_event_listener = handle_event_propagation.bind(null, target);\n\tconst bound_document_event_listener = handle_event_propagation.bind(null, document);\n\n\t/** @param {Array<string>} events */\n\tconst event_handle = (events) => {\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tconst event_name = events[i];\n\t\t\tif (!registered_events.has(event_name)) {\n\t\t\t\tregistered_events.add(event_name);\n\t\t\t\t// Add the event listener to both the container and the document.\n\t\t\t\t// The container listener ensures we catch events from within in case\n\t\t\t\t// the outer content stops propagation of the event.\n\t\t\t\ttarget.addEventListener(\n\t\t\t\t\tevent_name,\n\t\t\t\t\tbound_event_listener,\n\t\t\t\t\tPassiveDelegatedEvents.includes(event_name)\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tpassive: true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: undefined\n\t\t\t\t);\n\t\t\t\t// The document listener ensures we catch events that originate from elements that were\n\t\t\t\t// manually moved outside of the container (e.g. via manual portals).\n\t\t\t\tdocument.addEventListener(\n\t\t\t\t\tevent_name,\n\t\t\t\t\tbound_document_event_listener,\n\t\t\t\t\tPassiveDelegatedEvents.includes(event_name)\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tpassive: true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: undefined\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n\n\tevent_handle(array_from(all_registered_events));\n\troot_event_handles.add(event_handle);\n\n\t/** @type {Exports} */\n\t// @ts-expect-error will be defined because the render effect runs synchronously\n\tlet component = undefined;\n\n\tconst unmount = effect_root(() => {\n\t\tbranch(() => {\n\t\t\tif (context) {\n\t\t\t\tpush({});\n\t\t\t\tvar ctx = /** @type {import('#client').ComponentContext} */ (current_component_context);\n\t\t\t\tctx.c = context;\n\t\t\t}\n\n\t\t\tif (events) {\n\t\t\t\t// We can't spread the object or else we'd lose the state proxy stuff, if it is one\n\t\t\t\t/** @type {any} */ (props).$$events = events;\n\t\t\t}\n\n\t\t\tshould_intro = intro;\n\t\t\t// @ts-expect-error the public typings are not what the actual function looks like\n\t\t\tcomponent = Component(anchor, props) || {};\n\t\t\tshould_intro = true;\n\n\t\t\tif (context) {\n\t\t\t\tpop();\n\t\t\t}\n\t\t});\n\n\t\treturn () => {\n\t\t\tfor (const event_name of registered_events) {\n\t\t\t\ttarget.removeEventListener(event_name, bound_event_listener);\n\t\t\t}\n\t\t\troot_event_handles.delete(event_handle);\n\t\t};\n\t});\n\n\tmounted_components.set(component, unmount);\n\treturn component;\n}\n\n/**\n * References of the components that were mounted or hydrated.\n * Uses a `WeakMap` to avoid memory leaks.\n */\nlet mounted_components = new WeakMap();\n\n/**\n * Unmounts a component that was previously mounted using `mount` or `hydrate`.\n * @param {Record<string, any>} component\n */\nexport function unmount(component) {\n\tconst fn = mounted_components.get(component);\n\tif (DEV && !fn) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.warn('Tried to unmount a component that was not mounted.');\n\t}\n\tfn?.();\n}\n\n/**\n * @param {Record<string, any>} props\n * @returns {Record<string, any>}\n */\nexport function sanitize_slots(props) {\n\tconst sanitized = { ...props.$$slots };\n\tif (props.children) sanitized.default = props.children;\n\treturn sanitized;\n}\n\n/**\n * @param {Node} target\n * @param {string} style_sheet_id\n * @param {string} styles\n */\nexport async function append_styles(target, style_sheet_id, styles) {\n\t// Wait a tick so that the template is added to the dom, else getRootNode() will yield wrong results\n\t// If it turns out that this results in noticeable flickering, we need to do something like doing the\n\t// append outside and adding code in mount that appends all stylesheets (similar to how we do it with event delegation)\n\tawait Promise.resolve();\n\tconst append_styles_to = get_root_for_style(target);\n\tif (!append_styles_to.getElementById(style_sheet_id)) {\n\t\tconst style = create_element('style');\n\t\tstyle.id = style_sheet_id;\n\t\tstyle.textContent = styles;\n\t\tappend_child(/** @type {Document} */ (append_styles_to).head || append_styles_to, style);\n\t}\n}\n\n/**\n * @param {Node} node\n */\nfunction get_root_for_style(node) {\n\tif (!node) return document;\n\tconst root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n\tif (root && /** @type {ShadowRoot} */ (root).host) {\n\t\treturn /** @type {ShadowRoot} */ (root);\n\t}\n\treturn /** @type {Document} */ (node.ownerDocument);\n}\n","import { is_promise } from '../../../shared/utils.js';\nimport {\n\tcurrent_component_context,\n\tflush_sync,\n\tset_current_component_context,\n\tset_current_effect,\n\tset_current_reaction\n} from '../../runtime.js';\nimport { block, branch, destroy_effect, pause_effect } from '../../reactivity/effects.js';\nimport { INERT } from '../../constants.js';\n\n/**\n * @template V\n * @param {Comment} anchor\n * @param {(() => Promise<V>)} get_input\n * @param {null | ((anchor: Node) => void)} pending_fn\n * @param {null | ((anchor: Node, value: V) => void)} then_fn\n * @param {null | ((anchor: Node, error: unknown) => void)} catch_fn\n * @returns {void}\n */\nexport function await_block(anchor, get_input, pending_fn, then_fn, catch_fn) {\n\tconst component_context = current_component_context;\n\n\t/** @type {any} */\n\tlet input;\n\n\t/** @type {import('#client').Effect | null} */\n\tlet pending_effect;\n\n\t/** @type {import('#client').Effect | null} */\n\tlet then_effect;\n\n\t/** @type {import('#client').Effect | null} */\n\tlet catch_effect;\n\n\t/**\n\t * @param {(anchor: Comment, value: any) => void} fn\n\t * @param {any} value\n\t */\n\tfunction create_effect(fn, value) {\n\t\tset_current_effect(effect);\n\t\tset_current_reaction(effect); // TODO do we need both?\n\t\tset_current_component_context(component_context);\n\t\tvar e = branch(() => fn(anchor, value));\n\t\tset_current_component_context(null);\n\t\tset_current_reaction(null);\n\t\tset_current_effect(null);\n\n\t\t// without this, the DOM does not update until two ticks after the promise,\n\t\t// resolves which is unexpected behaviour (and somewhat irksome to test)\n\t\tflush_sync();\n\n\t\treturn e;\n\t}\n\n\tconst effect = block(() => {\n\t\tif (input === (input = get_input())) return;\n\n\t\tif (is_promise(input)) {\n\t\t\tconst promise = /** @type {Promise<any>} */ (input);\n\n\t\t\tif (pending_fn) {\n\t\t\t\tif (pending_effect && (pending_effect.f & INERT) === 0) {\n\t\t\t\t\tdestroy_effect(pending_effect);\n\t\t\t\t}\n\n\t\t\t\tpending_effect = branch(() => pending_fn(anchor));\n\t\t\t}\n\n\t\t\tif (then_effect) pause_effect(then_effect);\n\t\t\tif (catch_effect) pause_effect(catch_effect);\n\n\t\t\tpromise.then(\n\t\t\t\t(value) => {\n\t\t\t\t\tif (promise !== input) return;\n\t\t\t\t\tif (pending_effect) pause_effect(pending_effect);\n\n\t\t\t\t\tif (then_fn) {\n\t\t\t\t\t\tthen_effect = create_effect(then_fn, value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\tif (promise !== input) return;\n\t\t\t\t\tif (pending_effect) pause_effect(pending_effect);\n\n\t\t\t\t\tif (catch_fn) {\n\t\t\t\t\t\tcatch_effect = create_effect(catch_fn, error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\tif (pending_effect) pause_effect(pending_effect);\n\t\t\tif (catch_effect) pause_effect(catch_effect);\n\n\t\t\tif (then_fn) {\n\t\t\t\tif (then_effect) {\n\t\t\t\t\tdestroy_effect(then_effect);\n\t\t\t\t}\n\n\t\t\t\tthen_effect = branch(() => then_fn(anchor, input));\n\t\t\t}\n\t\t}\n\t});\n}\n","import { EFFECT_TRANSPARENT } from '../../constants.js';\nimport { hydrate_nodes, hydrating, set_hydrating } from '../hydration.js';\nimport { remove } from '../reconciler.js';\nimport { block, branch, pause_effect, resume_effect } from '../../reactivity/effects.js';\nimport { HYDRATION_END_ELSE } from '../../../../constants.js';\n\n/**\n * @param {Comment} anchor\n * @param {() => boolean} get_condition\n * @param {(anchor: Node) => import('#client').Dom} consequent_fn\n * @param {null | ((anchor: Node) => import('#client').Dom)} [alternate_fn]\n * @param {boolean} [elseif] True if this is an `{:else if ...}` block rather than an `{#if ...}`, as that affects which transitions are considered 'local'\n * @returns {void}\n */\nexport function if_block(\n\tanchor,\n\tget_condition,\n\tconsequent_fn,\n\talternate_fn = null,\n\telseif = false\n) {\n\t/** @type {import('#client').Effect | null} */\n\tlet consequent_effect = null;\n\n\t/** @type {import('#client').Effect | null} */\n\tlet alternate_effect = null;\n\n\t/** @type {boolean | null} */\n\tlet condition = null;\n\n\tconst effect = block(() => {\n\t\tif (condition === (condition = !!get_condition())) return;\n\n\t\t/** Whether or not there was a hydration mismatch. Needs to be a `let` or else it isn't treeshaken out */\n\t\tlet mismatch = false;\n\n\t\tif (hydrating) {\n\t\t\tconst is_else = anchor.data === HYDRATION_END_ELSE;\n\n\t\t\tif (condition === is_else) {\n\t\t\t\t// Hydration mismatch: remove everything inside the anchor and start fresh.\n\t\t\t\t// This could happen with `{#if browser}...{/if}`, for example\n\t\t\t\tremove(hydrate_nodes);\n\t\t\t\tset_hydrating(false);\n\t\t\t\tmismatch = true;\n\t\t\t}\n\t\t}\n\n\t\tif (condition) {\n\t\t\tif (consequent_effect) {\n\t\t\t\tresume_effect(consequent_effect);\n\t\t\t} else {\n\t\t\t\tconsequent_effect = branch(() => consequent_fn(anchor));\n\t\t\t}\n\n\t\t\tif (alternate_effect) {\n\t\t\t\tpause_effect(alternate_effect, () => {\n\t\t\t\t\talternate_effect = null;\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tif (alternate_effect) {\n\t\t\t\tresume_effect(alternate_effect);\n\t\t\t} else if (alternate_fn) {\n\t\t\t\talternate_effect = branch(() => alternate_fn(anchor));\n\t\t\t}\n\n\t\t\tif (consequent_effect) {\n\t\t\t\tpause_effect(consequent_effect, () => {\n\t\t\t\t\tconsequent_effect = null;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (mismatch) {\n\t\t\t// continue in hydration mode\n\t\t\tset_hydrating(true);\n\t\t}\n\t});\n\n\tif (elseif) {\n\t\teffect.f |= EFFECT_TRANSPARENT;\n\t}\n}\n","import { hydrate_nodes, hydrating } from './hydration.js';\nimport { clone_node, empty } from './operations.js';\nimport { create_fragment_from_html } from './reconciler.js';\nimport { current_effect } from '../runtime.js';\nimport { TEMPLATE_FRAGMENT, TEMPLATE_USE_IMPORT_NODE } from '../../../constants.js';\nimport { effect } from '../reactivity/effects.js';\nimport { is_array } from '../utils.js';\n\n/**\n * @param {import(\"#client\").TemplateNode | import(\"#client\").TemplateNode[]} dom\n * @param {import(\"#client\").Effect} effect\n */\nexport function push_template_node(\n\tdom,\n\teffect = /** @type {import('#client').Effect} */ (current_effect)\n) {\n\tvar current_dom = effect.dom;\n\tif (current_dom === null) {\n\t\teffect.dom = dom;\n\t} else {\n\t\tif (!is_array(current_dom)) {\n\t\t\tcurrent_dom = effect.dom = [current_dom];\n\t\t}\n\n\t\tif (is_array(dom)) {\n\t\t\tcurrent_dom.push(...dom);\n\t\t} else {\n\t\t\tcurrent_dom.push(dom);\n\t\t}\n\t}\n\treturn dom;\n}\n\n/**\n * @param {string} content\n * @param {number} flags\n * @returns {() => Node | Node[]}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function template(content, flags) {\n\tvar is_fragment = (flags & TEMPLATE_FRAGMENT) !== 0;\n\tvar use_import_node = (flags & TEMPLATE_USE_IMPORT_NODE) !== 0;\n\n\t/** @type {Node} */\n\tvar node;\n\n\treturn () => {\n\t\tif (hydrating) {\n\t\t\tvar hydration_content = push_template_node(is_fragment ? hydrate_nodes : hydrate_nodes[0]);\n\t\t\treturn /** @type {Node} */ (hydration_content);\n\t\t}\n\n\t\tif (!node) {\n\t\t\tnode = create_fragment_from_html(content);\n\t\t\tif (!is_fragment) node = /** @type {Node} */ (node.firstChild);\n\t\t}\n\t\tvar clone = use_import_node ? document.importNode(node, true) : clone_node(node, true);\n\n\t\tpush_template_node(\n\t\t\tis_fragment\n\t\t\t\t? /** @type {import('#client').TemplateNode[]} */ ([...clone.childNodes])\n\t\t\t\t: /** @type {import('#client').TemplateNode} */ (clone)\n\t\t);\n\n\t\treturn clone;\n\t};\n}\n\n/**\n * @param {string} content\n * @param {number} flags\n * @returns {() => Node | Node[]}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function template_with_script(content, flags) {\n\tvar first = true;\n\tvar fn = template(content, flags);\n\n\treturn () => {\n\t\tif (hydrating) return fn();\n\n\t\tvar node = /** @type {Element | DocumentFragment} */ (fn());\n\n\t\tif (first) {\n\t\t\tfirst = false;\n\t\t\trun_scripts(node);\n\t\t}\n\n\t\treturn node;\n\t};\n}\n\n/**\n * @param {string} content\n * @param {number} flags\n * @returns {() => Node | Node[]}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function svg_template(content, flags) {\n\tvar is_fragment = (flags & TEMPLATE_FRAGMENT) !== 0;\n\tvar fn = template(`<svg>${content}</svg>`, 0); // we don't need to worry about using importNode for SVGs\n\n\t/** @type {Element | DocumentFragment} */\n\tvar node;\n\n\treturn () => {\n\t\tif (hydrating) {\n\t\t\tvar hydration_content = push_template_node(is_fragment ? hydrate_nodes : hydrate_nodes[0]);\n\t\t\treturn /** @type {Node} */ (hydration_content);\n\t\t}\n\n\t\tif (!node) {\n\t\t\tvar svg = /** @type {Element} */ (fn());\n\n\t\t\tif ((flags & TEMPLATE_FRAGMENT) === 0) {\n\t\t\t\tnode = /** @type {Element} */ (svg.firstChild);\n\t\t\t} else {\n\t\t\t\tnode = document.createDocumentFragment();\n\t\t\t\twhile (svg.firstChild) {\n\t\t\t\t\tnode.appendChild(svg.firstChild);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar clone = clone_node(node, true);\n\n\t\tpush_template_node(\n\t\t\tis_fragment\n\t\t\t\t? /** @type {import('#client').TemplateNode[]} */ ([...clone.childNodes])\n\t\t\t\t: /** @type {import('#client').TemplateNode} */ (clone)\n\t\t);\n\n\t\treturn clone;\n\t};\n}\n\n/**\n * @param {string} content\n * @param {number} flags\n * @returns {() => Node | Node[]}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function svg_template_with_script(content, flags) {\n\tvar first = true;\n\tvar fn = svg_template(content, flags);\n\n\treturn () => {\n\t\tif (hydrating) return fn();\n\n\t\tvar node = /** @type {Element | DocumentFragment} */ (fn());\n\n\t\tif (first) {\n\t\t\tfirst = false;\n\t\t\trun_scripts(node);\n\t\t}\n\n\t\treturn node;\n\t};\n}\n\n/**\n * Creating a document fragment from HTML that contains script tags will not execute\n * the scripts. We need to replace the script tags with new ones so that they are executed.\n * @param {Element | DocumentFragment} node\n */\nfunction run_scripts(node) {\n\t// scripts were SSR'd, in which case they will run\n\tif (hydrating) return;\n\n\tconst scripts =\n\t\t/** @type {HTMLElement} */ (node).tagName === 'SCRIPT'\n\t\t\t? [/** @type {HTMLScriptElement} */ (node)]\n\t\t\t: node.querySelectorAll('script');\n\tfor (const script of scripts) {\n\t\tvar clone = document.createElement('script');\n\t\tfor (var attribute of script.attributes) {\n\t\t\tclone.setAttribute(attribute.name, attribute.value);\n\t\t}\n\n\t\tclone.textContent = script.textContent;\n\t\t// If node === script tag, replaceWith will do nothing because there's no parent yet,\n\t\t// waiting until that's the case using an effect solves this.\n\t\t// Don't do it in other circumstances or we could accidentally execute scripts\n\t\t// in an adjacent @html tag that was instantiated in the meantime.\n\t\tif (script === node) {\n\t\t\teffect(() => script.replaceWith(clone));\n\t\t} else {\n\t\t\tscript.replaceWith(clone);\n\t\t}\n\t}\n}\n\n/**\n * @param {Text | Comment | Element} anchor\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function text(anchor) {\n\tif (!hydrating) return push_template_node(empty());\n\n\tvar node = hydrate_nodes[0];\n\n\tif (!node) {\n\t\t// if an {expression} is empty during SSR, `hydrate_nodes` will be empty.\n\t\t// we need to insert an empty text node\n\t\tanchor.before((node = empty()));\n\t}\n\n\treturn push_template_node(node);\n}\n\nexport const comment = template('<!>', TEMPLATE_FRAGMENT);\n\n/**\n * Assign the created (or in hydration mode, traversed) dom elements to the current block\n * and insert the elements into the dom (in client mode).\n * @param {Text | Comment | Element} anchor\n * @param {import('#client').Dom} dom\n */\nexport function append(anchor, dom) {\n\tif (!hydrating) {\n\t\tanchor.before(/** @type {Node} */ (dom));\n\t}\n}\n","import {\n\tEACH_INDEX_REACTIVE,\n\tEACH_IS_ANIMATED,\n\tEACH_IS_CONTROLLED,\n\tEACH_IS_STRICT_EQUALS,\n\tEACH_ITEM_REACTIVE,\n\tEACH_KEYED,\n\tHYDRATION_END_ELSE,\n\tHYDRATION_START\n} from '../../../../constants.js';\nimport { hydrate_anchor, hydrate_nodes, hydrating, set_hydrating } from '../hydration.js';\nimport { empty } from '../operations.js';\nimport { remove } from '../reconciler.js';\nimport { untrack } from '../../runtime.js';\nimport {\n\tblock,\n\tbranch,\n\tdestroy_effect,\n\teffect,\n\trun_out_transitions,\n\tpause_children,\n\tpause_effect,\n\tresume_effect\n} from '../../reactivity/effects.js';\nimport { source, mutable_source, set } from '../../reactivity/sources.js';\nimport { is_array, is_frozen } from '../../utils.js';\nimport { INERT, STATE_SYMBOL } from '../../constants.js';\nimport { push_template_node } from '../template.js';\n\n/**\n * The row of a keyed each block that is currently updating. We track this\n * so that `animate:` directives have something to attach themselves to\n * @type {import('#client').EachItem | null}\n */\nexport let current_each_item = null;\n\n/** @param {import('#client').EachItem | null} item */\nexport function set_current_each_item(item) {\n\tcurrent_each_item = item;\n}\n\n/**\n * @param {any} _\n * @param {number} i\n */\nexport function index(_, i) {\n\treturn i;\n}\n\n/**\n * Pause multiple effects simultaneously, and coordinate their\n * subsequent destruction. Used in each blocks\n * @param {import('#client').EachItem[]} items\n * @param {null | Node} controlled_anchor\n * @param {() => void} [callback]\n */\nfunction pause_effects(items, controlled_anchor, callback) {\n\t/** @type {import('#client').TransitionManager[]} */\n\tvar transitions = [];\n\tvar length = items.length;\n\n\tfor (var i = 0; i < length; i++) {\n\t\tpause_children(items[i].e, transitions, true);\n\t}\n\n\t// If we have a controlled anchor, it means that the each block is inside a single\n\t// DOM element, so we can apply a fast-path for clearing the contents of the element.\n\tif (length > 0 && transitions.length === 0 && controlled_anchor !== null) {\n\t\tvar parent_node = /** @type {Element} */ (controlled_anchor.parentNode);\n\t\tparent_node.textContent = '';\n\t\tparent_node.append(controlled_anchor);\n\t}\n\n\trun_out_transitions(transitions, () => {\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tdestroy_effect(items[i].e);\n\t\t}\n\n\t\tif (callback !== undefined) callback();\n\t});\n}\n\n/**\n * @template V\n * @param {Element | Comment} anchor The next sibling node, or the parent node if this is a 'controlled' block\n * @param {number} flags\n * @param {() => V[]} get_collection\n * @param {(value: V, index: number) => any} get_key\n * @param {(anchor: Node, item: import('#client').MaybeSource<V>, index: import('#client').MaybeSource<number>) => void} render_fn\n * @param {null | ((anchor: Node) => void)} fallback_fn\n * @returns {void}\n */\nexport function each(anchor, flags, get_collection, get_key, render_fn, fallback_fn = null) {\n\t/** @type {import('#client').EachState} */\n\tvar state = { flags, items: new Map(), next: null };\n\n\tvar is_controlled = (flags & EACH_IS_CONTROLLED) !== 0;\n\n\tif (is_controlled) {\n\t\tvar parent_node = /** @type {Element} */ (anchor);\n\n\t\tanchor = hydrating\n\t\t\t? /** @type {Comment | Text} */ (\n\t\t\t\t\thydrate_anchor(/** @type {Comment | Text} */ (parent_node.firstChild))\n\t\t\t\t)\n\t\t\t: parent_node.appendChild(empty());\n\t}\n\n\t/** @type {import('#client').Effect | null} */\n\tvar fallback = null;\n\n\tblock(() => {\n\t\tvar collection = get_collection();\n\n\t\tvar array = is_array(collection)\n\t\t\t? collection\n\t\t\t: collection == null\n\t\t\t\t? []\n\t\t\t\t: Array.from(collection);\n\n\t\tvar length = array.length;\n\n\t\t// If we are working with an array that isn't proxied or frozen, then remove strict equality and ensure the items\n\t\t// are treated as reactive, so they get wrapped in a signal.\n\t\tvar flags = state.flags;\n\t\tif ((flags & EACH_IS_STRICT_EQUALS) !== 0 && !is_frozen(array) && !(STATE_SYMBOL in array)) {\n\t\t\tflags ^= EACH_IS_STRICT_EQUALS;\n\n\t\t\t// Additionally if we're in an keyed each block, we'll need ensure the items are all wrapped in signals.\n\t\t\tif ((flags & EACH_KEYED) !== 0 && (flags & EACH_ITEM_REACTIVE) === 0) {\n\t\t\t\tflags ^= EACH_ITEM_REACTIVE;\n\t\t\t}\n\t\t}\n\n\t\t/** `true` if there was a hydration mismatch. Needs to be a `let` or else it isn't treeshaken out */\n\t\tlet mismatch = false;\n\n\t\tif (hydrating) {\n\t\t\tvar is_else = /** @type {Comment} */ (anchor).data === HYDRATION_END_ELSE;\n\n\t\t\tif (is_else !== (length === 0)) {\n\t\t\t\t// hydration mismatch — remove the server-rendered DOM and start over\n\t\t\t\tremove(hydrate_nodes);\n\t\t\t\tset_hydrating(false);\n\t\t\t\tmismatch = true;\n\t\t\t}\n\t\t}\n\n\t\t// this is separate to the previous block because `hydrating` might change\n\t\tif (hydrating) {\n\t\t\t/** @type {Node} */\n\t\t\tvar child_anchor = hydrate_nodes[0];\n\n\t\t\t/** @type {import('#client').EachItem | import('#client').EachState} */\n\t\t\tvar prev = state;\n\n\t\t\t/** @type {import('#client').EachItem} */\n\t\t\tvar item;\n\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\tif (\n\t\t\t\t\tchild_anchor.nodeType !== 8 ||\n\t\t\t\t\t/** @type {Comment} */ (child_anchor).data !== HYDRATION_START\n\t\t\t\t) {\n\t\t\t\t\t// If `nodes` is null, then that means that the server rendered fewer items than what\n\t\t\t\t\t// expected, so break out and continue appending non-hydrated items\n\t\t\t\t\tmismatch = true;\n\t\t\t\t\tset_hydrating(false);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tvar child_open = /** @type {Comment} */ (child_anchor);\n\t\t\t\tchild_anchor = hydrate_anchor(child_anchor);\n\t\t\t\tvar value = array[i];\n\t\t\t\tvar key = get_key(value, i);\n\t\t\t\titem = create_item(child_open, child_anchor, prev, null, value, key, i, render_fn, flags);\n\t\t\t\tstate.items.set(key, item);\n\t\t\t\tchild_anchor = /** @type {Comment} */ (child_anchor.nextSibling);\n\n\t\t\t\tprev = item;\n\t\t\t}\n\n\t\t\t// remove excess nodes\n\t\t\tif (length > 0) {\n\t\t\t\twhile (child_anchor !== anchor) {\n\t\t\t\t\tvar next = /** @type {import('#client').TemplateNode} */ (child_anchor.nextSibling);\n\t\t\t\t\t/** @type {import('#client').TemplateNode} */ (child_anchor).remove();\n\t\t\t\t\tchild_anchor = next;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!hydrating) {\n\t\t\treconcile(array, state, anchor, render_fn, flags, get_key);\n\t\t}\n\n\t\tif (fallback_fn !== null) {\n\t\t\tif (length === 0) {\n\t\t\t\tif (fallback) {\n\t\t\t\t\tresume_effect(fallback);\n\t\t\t\t} else {\n\t\t\t\t\tfallback = branch(() => fallback_fn(anchor));\n\t\t\t\t}\n\t\t\t} else if (fallback !== null) {\n\t\t\t\tpause_effect(fallback, () => {\n\t\t\t\t\tfallback = null;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (mismatch) {\n\t\t\t// continue in hydration mode\n\t\t\tset_hydrating(true);\n\t\t}\n\t});\n}\n\n/**\n * @template V\n * @param {Array<V>} array\n * @param {import('#client').EachState} state\n * @param {Element | Comment | Text} anchor\n * @param {(anchor: Node, item: import('#client').MaybeSource<V>, index: number | import('#client').Source<number>) => void} render_fn\n * @param {number} flags\n * @param {(value: V, index: number) => any} get_key\n * @returns {void}\n */\nfunction reconcile(array, state, anchor, render_fn, flags, get_key) {\n\tvar is_animated = (flags & EACH_IS_ANIMATED) !== 0;\n\tvar should_update = (flags & (EACH_ITEM_REACTIVE | EACH_INDEX_REACTIVE)) !== 0;\n\n\tvar length = array.length;\n\tvar items = state.items;\n\tvar first = state.next;\n\tvar current = first;\n\n\t/** @type {Set<import('#client').EachItem>} */\n\tvar seen = new Set();\n\n\t/** @type {import('#client').EachState | import('#client').EachItem} */\n\tvar prev = state;\n\n\t/** @type {Set<import('#client').EachItem>} */\n\tvar to_animate = new Set();\n\n\t/** @type {import('#client').EachItem[]} */\n\tvar matched = [];\n\n\t/** @type {import('#client').EachItem[]} */\n\tvar stashed = [];\n\n\t/** @type {V} */\n\tvar value;\n\n\t/** @type {any} */\n\tvar key;\n\n\t/** @type {import('#client').EachItem | undefined} */\n\tvar item;\n\n\t/** @type {number} */\n\tvar i;\n\n\tif (is_animated) {\n\t\tfor (i = 0; i < length; i += 1) {\n\t\t\tvalue = array[i];\n\t\t\tkey = get_key(value, i);\n\t\t\titem = items.get(key);\n\n\t\t\tif (item !== undefined) {\n\t\t\t\titem.a?.measure();\n\t\t\t\tto_animate.add(item);\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (i = 0; i < length; i += 1) {\n\t\tvalue = array[i];\n\t\tkey = get_key(value, i);\n\t\titem = items.get(key);\n\n\t\tif (item === undefined) {\n\t\t\tvar child_open = /** @type {Text} */ (push_template_node(empty()));\n\t\t\tvar child_anchor = current ? current.o : anchor;\n\n\t\t\tchild_anchor.before(child_open);\n\n\t\t\tprev = create_item(\n\t\t\t\tchild_open,\n\t\t\t\tchild_anchor,\n\t\t\t\tprev,\n\t\t\t\tprev.next,\n\t\t\t\tvalue,\n\t\t\t\tkey,\n\t\t\t\ti,\n\t\t\t\trender_fn,\n\t\t\t\tflags\n\t\t\t);\n\n\t\t\titems.set(key, prev);\n\n\t\t\tmatched = [];\n\t\t\tstashed = [];\n\n\t\t\tcurrent = prev.next;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (should_update) {\n\t\t\tupdate_item(item, value, i, flags);\n\t\t}\n\n\t\tif ((item.e.f & INERT) !== 0) {\n\t\t\tresume_effect(item.e);\n\t\t\tif (is_animated) {\n\t\t\t\titem.a?.unfix();\n\t\t\t\tto_animate.delete(item);\n\t\t\t}\n\t\t}\n\n\t\tif (item !== current) {\n\t\t\tif (seen.has(item)) {\n\t\t\t\tif (matched.length < stashed.length) {\n\t\t\t\t\t// more efficient to move later items to the front\n\t\t\t\t\tvar start = stashed[0];\n\t\t\t\t\tvar local_anchor = start.o;\n\t\t\t\t\tvar j;\n\n\t\t\t\t\tprev = start.prev;\n\n\t\t\t\t\tvar a = matched[0];\n\t\t\t\t\tvar b = matched[matched.length - 1];\n\n\t\t\t\t\tlink(a.prev, b.next);\n\t\t\t\t\tlink(prev, a);\n\t\t\t\t\tlink(b, start);\n\n\t\t\t\t\tfor (j = 0; j < matched.length; j += 1) {\n\t\t\t\t\t\tmove(matched[j], local_anchor);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (j = 0; j < stashed.length; j += 1) {\n\t\t\t\t\t\tseen.delete(stashed[j]);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrent = start;\n\t\t\t\t\tprev = b;\n\t\t\t\t\ti -= 1;\n\n\t\t\t\t\tmatched = [];\n\t\t\t\t\tstashed = [];\n\t\t\t\t} else {\n\t\t\t\t\t// more efficient to move earlier items to the back\n\t\t\t\t\tseen.delete(item);\n\t\t\t\t\tmove(item, current ? current.o : anchor);\n\n\t\t\t\t\tlink(item.prev, item.next);\n\t\t\t\t\tlink(item, prev.next);\n\t\t\t\t\tlink(prev, item);\n\n\t\t\t\t\tprev = item;\n\t\t\t\t}\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmatched = [];\n\t\t\tstashed = [];\n\n\t\t\twhile (current !== null && current.k !== key) {\n\t\t\t\tseen.add(current);\n\t\t\t\tstashed.push(current);\n\t\t\t\tcurrent = current.next;\n\t\t\t}\n\n\t\t\tif (current === null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\titem = current;\n\t\t}\n\n\t\tmatched.push(item);\n\t\tprev = item;\n\t\tcurrent = item.next;\n\t}\n\n\tconst to_destroy = Array.from(seen);\n\n\twhile (current) {\n\t\tto_destroy.push(current);\n\t\tcurrent = current.next;\n\t}\n\n\tvar controlled_anchor = (flags & EACH_IS_CONTROLLED) !== 0 && length === 0 ? anchor : null;\n\n\tif (is_animated) {\n\t\tfor (i = 0; i < to_destroy.length; i += 1) {\n\t\t\tto_destroy[i].a?.measure();\n\t\t}\n\n\t\tfor (i = 0; i < to_destroy.length; i += 1) {\n\t\t\tto_destroy[i].a?.fix();\n\t\t}\n\t}\n\n\tpause_effects(to_destroy, controlled_anchor, () => {\n\t\tfor (var i = 0; i < to_destroy.length; i += 1) {\n\t\t\tvar item = to_destroy[i];\n\t\t\titems.delete(item.k);\n\t\t\tlink(item.prev, item.next);\n\t\t}\n\t});\n\n\tif (is_animated) {\n\t\teffect(() => {\n\t\t\tuntrack(() => {\n\t\t\t\tfor (item of to_animate) {\n\t\t\t\t\titem.a?.apply();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\n/**\n * @param {import('#client').EachItem} item\n * @param {any} value\n * @param {number} index\n * @param {number} type\n * @returns {void}\n */\nfunction update_item(item, value, index, type) {\n\tif ((type & EACH_ITEM_REACTIVE) !== 0) {\n\t\tset(item.v, value);\n\t}\n\n\tif ((type & EACH_INDEX_REACTIVE) !== 0) {\n\t\tset(/** @type {import('#client').Value<number>} */ (item.i), index);\n\t} else {\n\t\titem.i = index;\n\t}\n}\n\n/**\n * @template V\n * @param {Comment | Text} open\n * @param {Node} anchor\n * @param {import('#client').EachItem | import('#client').EachState} prev\n * @param {import('#client').EachItem | null} next\n * @param {V} value\n * @param {unknown} key\n * @param {number} index\n * @param {(anchor: Node, item: V | import('#client').Source<V>, index: number | import('#client').Value<number>) => void} render_fn\n * @param {number} flags\n * @returns {import('#client').EachItem}\n */\nfunction create_item(open, anchor, prev, next, value, key, index, render_fn, flags) {\n\tvar previous_each_item = current_each_item;\n\n\ttry {\n\t\tvar reactive = (flags & EACH_ITEM_REACTIVE) !== 0;\n\t\tvar mutable = (flags & EACH_IS_STRICT_EQUALS) === 0;\n\n\t\tvar v = reactive ? (mutable ? mutable_source(value) : source(value)) : value;\n\t\tvar i = (flags & EACH_INDEX_REACTIVE) === 0 ? index : source(index);\n\n\t\t/** @type {import('#client').EachItem} */\n\t\tvar item = {\n\t\t\ti,\n\t\t\tv,\n\t\t\tk: key,\n\t\t\ta: null,\n\t\t\t// @ts-expect-error\n\t\t\te: null,\n\t\t\to: open,\n\t\t\tprev,\n\t\t\tnext\n\t\t};\n\n\t\tprev.next = item;\n\t\tif (next !== null) next.prev = item;\n\n\t\tcurrent_each_item = item;\n\t\titem.e = branch(() => render_fn(anchor, v, i));\n\n\t\treturn item;\n\t} finally {\n\t\tcurrent_each_item = previous_each_item;\n\t}\n}\n\n/**\n * @param {import('#client').EachItem} item\n * @param {Text | Element | Comment} anchor\n */\nfunction move(item, anchor) {\n\tanchor.before(item.o);\n\n\tvar dom = item.e.dom;\n\n\tif (dom !== null) {\n\t\tif (is_array(dom)) {\n\t\t\tfor (var i = 0; i < dom.length; i++) {\n\t\t\t\tanchor.before(dom[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tanchor.before(dom);\n\t\t}\n\t}\n}\n\n/**\n *\n * @param {import('#client').EachItem | import('#client').EachState} prev\n * @param {import('#client').EachItem | null} next\n */\nfunction link(prev, next) {\n\tprev.next = next;\n\tif (next !== null) next.prev = prev;\n}\n","import { derived } from '../../reactivity/deriveds.js';\nimport { render_effect } from '../../reactivity/effects.js';\nimport { current_effect, get } from '../../runtime.js';\nimport { is_array } from '../../utils.js';\nimport { hydrate_nodes, hydrating } from '../hydration.js';\nimport { create_fragment_from_html, remove } from '../reconciler.js';\nimport { push_template_node } from '../template.js';\n\n/**\n * @param {import('#client').Effect} effect\n * @param {(Element | Comment | Text)[]} to_remove\n * @returns {void}\n */\nfunction remove_from_parent_effect(effect, to_remove) {\n\tconst dom = effect.dom;\n\n\tif (is_array(dom)) {\n\t\tfor (let i = dom.length - 1; i >= 0; i--) {\n\t\t\tif (to_remove.includes(dom[i])) {\n\t\t\t\tdom.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else if (dom !== null && to_remove.includes(dom)) {\n\t\teffect.dom = null;\n\t}\n}\n\n/**\n * @param {Element | Text | Comment} anchor\n * @param {() => string} get_value\n * @param {boolean} svg\n * @returns {void}\n */\nexport function html(anchor, get_value, svg) {\n\tconst parent_effect = anchor.parentNode !== current_effect?.dom ? current_effect : null;\n\tlet value = derived(get_value);\n\n\trender_effect(() => {\n\t\tvar dom = html_to_dom(anchor, parent_effect, get(value), svg);\n\n\t\tif (dom) {\n\t\t\treturn () => {\n\t\t\t\tif (parent_effect !== null) {\n\t\t\t\t\tremove_from_parent_effect(parent_effect, is_array(dom) ? dom : [dom]);\n\t\t\t\t}\n\t\t\t\tremove(dom);\n\t\t\t};\n\t\t}\n\t});\n}\n\n/**\n * Creates the content for a `@html` tag from its string value,\n * inserts it before the target anchor and returns the new nodes.\n * @template V\n * @param {Element | Text | Comment} target\n * @param {import('#client').Effect | null} effect\n * @param {V} value\n * @param {boolean} svg\n * @returns {Element | Comment | (Element | Comment | Text)[]}\n */\nfunction html_to_dom(target, effect, value, svg) {\n\tif (hydrating) return hydrate_nodes;\n\n\tvar html = value + '';\n\tif (svg) html = `<svg>${html}</svg>`;\n\n\t// Don't use create_fragment_with_script_from_html here because that would mean script tags are executed.\n\t// @html is basically `.innerHTML = ...` and that doesn't execute scripts either due to security reasons.\n\t/** @type {DocumentFragment | Element} */\n\tvar node = create_fragment_from_html(html);\n\n\tif (svg) {\n\t\tnode = /** @type {Element} */ (node.firstChild);\n\t}\n\n\tif (node.childNodes.length === 1) {\n\t\tvar child = /** @type {Text | Element | Comment} */ (node.firstChild);\n\t\ttarget.before(child);\n\t\tif (effect !== null) {\n\t\t\tpush_template_node(child, effect);\n\t\t}\n\t\treturn child;\n\t}\n\n\tvar nodes = /** @type {Array<Text | Element | Comment>} */ ([...node.childNodes]);\n\n\tif (svg) {\n\t\twhile (node.firstChild) {\n\t\t\ttarget.before(node.firstChild);\n\t\t}\n\t} else {\n\t\ttarget.before(node);\n\t}\n\n\tif (effect !== null) {\n\t\tpush_template_node(nodes, effect);\n\t}\n\n\treturn nodes;\n}\n","import { DEV } from 'esm-env';\nimport { hydrating } from '../hydration.js';\nimport { get_descriptors, map_get, map_set, object_assign } from '../../utils.js';\nimport { AttributeAliases, DelegatedEvents, namespace_svg } from '../../../../constants.js';\nimport { delegate } from './events.js';\nimport { autofocus } from './misc.js';\n\n/**\n * The value/checked attribute in the template actually corresponds to the defaultValue property, so we need\n * to remove it upon hydration to avoid a bug when someone resets the form value.\n * @param {HTMLInputElement | HTMLSelectElement} dom\n * @returns {void}\n */\nexport function remove_input_attr_defaults(dom) {\n\tif (hydrating) {\n\t\tset_attribute(dom, 'value', null);\n\t\tset_attribute(dom, 'checked', null);\n\t}\n}\n\n/**\n * @param {Element} element\n * @param {string} attribute\n * @param {string | null} value\n */\nexport function set_attribute(element, attribute, value) {\n\tvalue = value == null ? null : value + '';\n\n\t// @ts-expect-error\n\tvar attributes = (element.__attributes ??= {});\n\n\tif (hydrating) {\n\t\tattributes[attribute] = element.getAttribute(attribute);\n\n\t\tif (attribute === 'src' || attribute === 'href' || attribute === 'srcset') {\n\t\t\tcheck_src_in_dev_hydration(element, attribute, value);\n\n\t\t\t// If we reset these attributes, they would result in another network request, which we want to avoid.\n\t\t\t// We assume they are the same between client and server as checking if they are equal is expensive\n\t\t\t// (we can't just compare the strings as they can be different between client and server but result in the\n\t\t\t// same url, so we would need to create hidden anchor elements to compare them)\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (attributes[attribute] === (attributes[attribute] = value)) return;\n\n\tif (value === null) {\n\t\telement.removeAttribute(attribute);\n\t} else {\n\t\telement.setAttribute(attribute, value);\n\t}\n}\n\n/**\n * @param {Element} dom\n * @param {string} attribute\n * @param {string} value\n */\nexport function set_xlink_attribute(dom, attribute, value) {\n\tdom.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\n\n/**\n * @param {any} node\n * @param {string} prop\n * @param {any} value\n */\nexport function set_custom_element_data(node, prop, value) {\n\tif (prop in node) {\n\t\tvar curr_val = node[prop];\n\t\tvar next_val = typeof curr_val === 'boolean' && value === '' ? true : value;\n\t\tif (typeof curr_val !== 'object' || curr_val !== next_val) {\n\t\t\tnode[prop] = next_val;\n\t\t}\n\t} else {\n\t\tset_attribute(node, prop, value);\n\t}\n}\n\n/**\n * Spreads attributes onto a DOM element, taking into account the currently set attributes\n * @param {Element & ElementCSSInlineStyle} element\n * @param {Record<string, unknown> | undefined} prev\n * @param {Record<string, unknown>[]} attrs\n * @param {boolean} lowercase_attributes\n * @param {string} css_hash\n * @returns {Record<string, unknown>}\n */\nexport function set_attributes(element, prev, attrs, lowercase_attributes, css_hash) {\n\tvar next = object_assign({}, ...attrs);\n\tvar has_hash = css_hash.length !== 0;\n\n\tfor (var key in prev) {\n\t\tif (!(key in next)) {\n\t\t\tnext[key] = null;\n\t\t}\n\t}\n\n\tif (has_hash && !next.class) {\n\t\tnext.class = '';\n\t}\n\n\tvar setters = map_get(setters_cache, element.nodeName);\n\tif (!setters) map_set(setters_cache, element.nodeName, (setters = get_setters(element)));\n\n\t// @ts-expect-error\n\tvar attributes = /** @type {Record<string, unknown>} **/ (element.__attributes ??= {});\n\n\tfor (key in next) {\n\t\tvar value = next[key];\n\t\tif (value === prev?.[key]) continue;\n\n\t\tvar prefix = key[0] + key[1]; // this is faster than key.slice(0, 2)\n\t\tif (prefix === '$$') continue;\n\n\t\tif (prefix === 'on') {\n\t\t\t/** @type {{ capture?: true }} */\n\t\t\tvar opts = {};\n\t\t\tvar event_name = key.slice(2);\n\t\t\tvar delegated = DelegatedEvents.includes(event_name);\n\n\t\t\tif (\n\t\t\t\tevent_name.endsWith('capture') &&\n\t\t\t\tevent_name !== 'ongotpointercapture' &&\n\t\t\t\tevent_name !== 'onlostpointercapture'\n\t\t\t) {\n\t\t\t\tevent_name = event_name.slice(0, -7);\n\t\t\t\topts.capture = true;\n\t\t\t}\n\n\t\t\tif (!delegated && prev?.[key]) {\n\t\t\t\telement.removeEventListener(event_name, /** @type {any} */ (prev[key]), opts);\n\t\t\t}\n\n\t\t\tif (value != null) {\n\t\t\t\tif (!delegated) {\n\t\t\t\t\telement.addEventListener(event_name, value, opts);\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\telement[`__${event_name}`] = value;\n\t\t\t\t\tdelegate([event_name]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (value == null) {\n\t\t\tattributes[key] = null;\n\t\t\telement.removeAttribute(key);\n\t\t} else if (key === 'style') {\n\t\t\telement.style.cssText = value + '';\n\t\t} else if (key === 'autofocus') {\n\t\t\tautofocus(/** @type {HTMLElement} */ (element), Boolean(value));\n\t\t} else if (key === '__value' || key === 'value') {\n\t\t\t// @ts-ignore\n\t\t\telement.value = element[key] = element.__value = value;\n\t\t} else {\n\t\t\tvar name = key;\n\t\t\tif (lowercase_attributes) {\n\t\t\t\tname = name.toLowerCase();\n\t\t\t\tname = AttributeAliases[name] || name;\n\t\t\t}\n\n\t\t\tif (setters.includes(name)) {\n\t\t\t\tif (hydrating && (name === 'src' || name === 'href' || name === 'srcset')) {\n\t\t\t\t\tcheck_src_in_dev_hydration(element, name, value);\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\telement[name] = value;\n\t\t\t\t}\n\t\t\t} else if (typeof value !== 'function') {\n\t\t\t\tif (has_hash && name === 'class') {\n\t\t\t\t\tif (value) value += ' ';\n\t\t\t\t\tvalue += css_hash;\n\t\t\t\t}\n\n\t\t\t\tset_attribute(element, name, value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn next;\n}\n\n/**\n * @param {Element} node\n * @param {Record<string, unknown> | undefined} prev\n * @param {Record<string, unknown>[]} attrs\n * @param {string} css_hash\n */\nexport function set_dynamic_element_attributes(node, prev, attrs, css_hash) {\n\tif (node.tagName.includes('-')) {\n\t\tvar next = object_assign({}, ...attrs);\n\n\t\tfor (var key in prev) {\n\t\t\tif (!(key in next)) {\n\t\t\t\tnext[key] = null;\n\t\t\t}\n\t\t}\n\n\t\tfor (key in next) {\n\t\t\tset_custom_element_data(node, key, next[key]);\n\t\t}\n\n\t\treturn next;\n\t}\n\n\treturn set_attributes(\n\t\t/** @type {Element & ElementCSSInlineStyle} */ (node),\n\t\tprev,\n\t\tattrs,\n\t\tnode.namespaceURI !== namespace_svg,\n\t\tcss_hash\n\t);\n}\n\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nvar always_set_through_set_attribute = ['width', 'height'];\n\n/** @type {Map<string, string[]>} */\nvar setters_cache = new Map();\n\n/** @param {Element} element */\nfunction get_setters(element) {\n\t/** @type {string[]} */\n\tvar setters = [];\n\n\t// @ts-expect-error\n\tvar descriptors = get_descriptors(element.__proto__);\n\n\tfor (var key in descriptors) {\n\t\tif (descriptors[key].set && !always_set_through_set_attribute.includes(key)) {\n\t\t\tsetters.push(key);\n\t\t}\n\t}\n\n\treturn setters;\n}\n\n/**\n * @param {any} element\n * @param {string} attribute\n * @param {string | null} value\n */\nfunction check_src_in_dev_hydration(element, attribute, value) {\n\tif (!DEV) return;\n\tif (attribute === 'srcset' && srcset_url_equal(element, value)) return;\n\tif (src_url_equal(element.getAttribute(attribute) ?? '', value ?? '')) return;\n\n\t// eslint-disable-next-line no-console\n\tconsole.error(\n\t\t`Detected a ${attribute} attribute value change during hydration. This will not be repaired during hydration, ` +\n\t\t\t`the ${attribute} value that came from the server will be used. Related element:`,\n\t\telement,\n\t\t' Differing value:',\n\t\tvalue\n\t);\n}\n\n/**\n * @param {string} element_src\n * @param {string} url\n * @returns {boolean}\n */\nfunction src_url_equal(element_src, url) {\n\tif (element_src === url) return true;\n\treturn new URL(element_src, document.baseURI).href === new URL(url, document.baseURI).href;\n}\n\n/** @param {string} srcset */\nfunction split_srcset(srcset) {\n\treturn srcset.split(',').map((src) => src.trim().split(' ').filter(Boolean));\n}\n\n/**\n * @param {HTMLSourceElement | HTMLImageElement} element\n * @param {string | undefined | null} srcset\n * @returns {boolean}\n */\nfunction srcset_url_equal(element, srcset) {\n\tvar element_urls = split_srcset(element.srcset);\n\tvar urls = split_srcset(srcset ?? '');\n\n\treturn (\n\t\turls.length === element_urls.length &&\n\t\turls.every(\n\t\t\t([url, width], i) =>\n\t\t\t\twidth === element_urls[i][1] &&\n\t\t\t\t// We need to test both ways because Vite will create an a full URL with\n\t\t\t\t// `new URL(asset, import.meta.url).href` for the client when `base: './'`, and the\n\t\t\t\t// relative URLs inside srcset are not automatically resolved to absolute URLs by\n\t\t\t\t// browsers (in contrast to img.src). This means both SSR and DOM code could\n\t\t\t\t// contain relative or absolute URLs.\n\t\t\t\t(src_url_equal(element_urls[i][0], url) || src_url_equal(url, element_urls[i][0]))\n\t\t)\n\t);\n}\n","import { DEV } from 'esm-env';\nimport {\n\tPROPS_IS_IMMUTABLE,\n\tPROPS_IS_LAZY_INITIAL,\n\tPROPS_IS_RUNES,\n\tPROPS_IS_UPDATED\n} from '../../../constants.js';\nimport { get_descriptor, is_function } from '../utils.js';\nimport { mutable_source, set } from './sources.js';\nimport { derived } from './deriveds.js';\nimport { get, inspect_fn, is_signals_recorded, untrack } from '../runtime.js';\nimport { safe_equals } from './equality.js';\n\n/**\n * @param {((value?: number) => number)} fn\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update_prop(fn, d = 1) {\n\tconst value = fn();\n\tfn(value + d);\n\treturn value;\n}\n\n/**\n * @param {((value?: number) => number)} fn\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update_pre_prop(fn, d = 1) {\n\tconst value = fn() + d;\n\tfn(value);\n\treturn value;\n}\n\n/**\n * The proxy handler for rest props (i.e. `const { x, ...rest } = $props()`).\n * Is passed the full `$$props` object and excludes the named props.\n * @type {ProxyHandler<{ props: Record<string | symbol, unknown>, exclude: Array<string | symbol>, name?: string }>}}\n */\nconst rest_props_handler = {\n\tget(target, key) {\n\t\tif (target.exclude.includes(key)) return;\n\t\treturn target.props[key];\n\t},\n\tset(target, key) {\n\t\tif (DEV) {\n\t\t\tthrow new Error(\n\t\t\t\t`Rest element properties of $props() such as ${target.name}.${String(key)} are readonly`\n\t\t\t);\n\t\t}\n\n\t\treturn false;\n\t},\n\tgetOwnPropertyDescriptor(target, key) {\n\t\tif (target.exclude.includes(key)) return;\n\t\tif (key in target.props) {\n\t\t\treturn {\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: target.props[key]\n\t\t\t};\n\t\t}\n\t},\n\thas(target, key) {\n\t\tif (target.exclude.includes(key)) return false;\n\t\treturn key in target.props;\n\t},\n\townKeys(target) {\n\t\treturn Reflect.ownKeys(target.props).filter((key) => !target.exclude.includes(key));\n\t}\n};\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string[]} exclude\n * @param {string} [name]\n * @returns {Record<string, unknown>}\n */\nexport function rest_props(props, exclude, name) {\n\treturn new Proxy(DEV ? { props, exclude, name } : { props, exclude }, rest_props_handler);\n}\n\n/**\n * The proxy handler for spread props. Handles the incoming array of props\n * that looks like `() => { dynamic: props }, { static: prop }, ..` and wraps\n * them so that the whole thing is passed to the component as the `$$props` argument.\n * @template {Record<string | symbol, unknown>} T\n * @type {ProxyHandler<{ props: Array<T | (() => T)> }>}}\n */\nconst spread_props_handler = {\n\tget(target, key) {\n\t\tlet i = target.props.length;\n\t\twhile (i--) {\n\t\t\tlet p = target.props[i];\n\t\t\tif (is_function(p)) p = p();\n\t\t\tif (typeof p === 'object' && p !== null && key in p) return p[key];\n\t\t}\n\t},\n\tgetOwnPropertyDescriptor(target, key) {\n\t\tlet i = target.props.length;\n\t\twhile (i--) {\n\t\t\tlet p = target.props[i];\n\t\t\tif (is_function(p)) p = p();\n\t\t\tif (typeof p === 'object' && p !== null && key in p) return get_descriptor(p, key);\n\t\t}\n\t},\n\thas(target, key) {\n\t\tfor (let p of target.props) {\n\t\t\tif (is_function(p)) p = p();\n\t\t\tif (key in p) return true;\n\t\t}\n\n\t\treturn false;\n\t},\n\townKeys(target) {\n\t\t/** @type {Array<string | symbol>} */\n\t\tconst keys = [];\n\n\t\tfor (let p of target.props) {\n\t\t\tif (is_function(p)) p = p();\n\t\t\tfor (const key in p) {\n\t\t\t\tif (!keys.includes(key)) keys.push(key);\n\t\t\t}\n\t\t}\n\n\t\treturn keys;\n\t}\n};\n\n/**\n * @param {Array<Record<string, unknown> | (() => Record<string, unknown>)>} props\n * @returns {any}\n */\nexport function spread_props(...props) {\n\treturn new Proxy({ props }, spread_props_handler);\n}\n\n/**\n * This function is responsible for synchronizing a possibly bound prop with the inner component state.\n * It is used whenever the compiler sees that the component writes to the prop, or when it has a default prop_value.\n * @template V\n * @param {Record<string, unknown>} props\n * @param {string} key\n * @param {number} flags\n * @param {V | (() => V)} [fallback]\n * @returns {(() => V | ((arg: V) => V) | ((arg: V, mutation: boolean) => V))}\n */\nexport function prop(props, key, flags, fallback) {\n\tvar immutable = (flags & PROPS_IS_IMMUTABLE) !== 0;\n\tvar runes = (flags & PROPS_IS_RUNES) !== 0;\n\tvar lazy = (flags & PROPS_IS_LAZY_INITIAL) !== 0;\n\n\tvar prop_value = /** @type {V} */ (props[key]);\n\tvar setter = get_descriptor(props, key)?.set;\n\n\tvar fallback_value = /** @type {V} */ (fallback);\n\tvar fallback_dirty = true;\n\n\tvar get_fallback = () => {\n\t\tif (lazy && fallback_dirty) {\n\t\t\tfallback_dirty = false;\n\t\t\tfallback_value = untrack(/** @type {() => V} */ (fallback));\n\t\t}\n\n\t\treturn fallback_value;\n\t};\n\n\tif (prop_value === undefined && fallback !== undefined) {\n\t\tif (setter && runes) {\n\t\t\t// TODO consolidate all these random runtime errors\n\t\t\tthrow new Error(\n\t\t\t\t'ERR_SVELTE_BINDING_FALLBACK' +\n\t\t\t\t\t(DEV\n\t\t\t\t\t\t? `: Cannot pass undefined to bind:${key} because the property contains a fallback value. Pass a different value than undefined to ${key}.`\n\t\t\t\t\t\t: '')\n\t\t\t);\n\t\t}\n\n\t\tprop_value = get_fallback();\n\t\tif (setter) setter(prop_value);\n\t}\n\n\tvar getter = runes\n\t\t? () => {\n\t\t\t\tvar value = /** @type {V} */ (props[key]);\n\t\t\t\tif (value === undefined) return get_fallback();\n\t\t\t\tfallback_dirty = true;\n\t\t\t\treturn value;\n\t\t\t}\n\t\t: () => {\n\t\t\t\tvar value = /** @type {V} */ (props[key]);\n\t\t\t\tif (value !== undefined) fallback_value = /** @type {V} */ (undefined);\n\t\t\t\treturn value === undefined ? fallback_value : value;\n\t\t\t};\n\n\t// easy mode — prop is never written to\n\tif ((flags & PROPS_IS_UPDATED) === 0) {\n\t\treturn getter;\n\t}\n\n\t// intermediate mode — prop is written to, but the parent component had\n\t// `bind:foo` which means we can just call `$$props.foo = value` directly\n\tif (setter) {\n\t\treturn function (/** @type {V} */ value) {\n\t\t\tif (arguments.length === 1) {\n\t\t\t\t/** @type {Function} */ (setter)(value);\n\t\t\t\treturn value;\n\t\t\t} else {\n\t\t\t\treturn getter();\n\t\t\t}\n\t\t};\n\t}\n\n\t// hard mode. this is where it gets ugly — the value in the child should\n\t// synchronize with the parent, but it should also be possible to temporarily\n\t// set the value to something else locally.\n\tvar from_child = false;\n\tvar was_from_child = false;\n\n\t// The derived returns the current value. The underlying mutable\n\t// source is written to from various places to persist this value.\n\tvar inner_current_value = mutable_source(prop_value);\n\tvar current_value = derived(() => {\n\t\tvar parent_value = getter();\n\t\tvar child_value = get(inner_current_value);\n\n\t\tif (from_child) {\n\t\t\tfrom_child = false;\n\t\t\twas_from_child = true;\n\t\t\treturn child_value;\n\t\t}\n\n\t\twas_from_child = false;\n\t\treturn (inner_current_value.v = parent_value);\n\t});\n\n\tif (!immutable) current_value.equals = safe_equals;\n\n\treturn function (/** @type {V} */ value) {\n\t\tvar current = get(current_value);\n\n\t\t// legacy nonsense — need to ensure the source is invalidated when necessary\n\t\t// also needed for when handling inspect logic so we can inspect the correct source signal\n\t\tif (is_signals_recorded || (DEV && inspect_fn)) {\n\t\t\t// set this so that we don't reset to the parent value if `d`\n\t\t\t// is invalidated because of `invalidate_inner_signals` (rather\n\t\t\t// than because the parent or child value changed)\n\t\t\tfrom_child = was_from_child;\n\t\t\t// invoke getters so that signals are picked up by `invalidate_inner_signals`\n\t\t\tgetter();\n\t\t\tget(inner_current_value);\n\t\t}\n\n\t\tif (arguments.length > 0) {\n\t\t\tif (!current_value.equals(value)) {\n\t\t\t\tfrom_child = true;\n\t\t\t\tset(inner_current_value, value);\n\t\t\t\tget(current_value); // force a synchronisation immediately\n\t\t\t}\n\n\t\t\treturn value;\n\t\t}\n\n\t\treturn current;\n\t};\n}\n","import {\n  await as await_block,                      // dom/blocks/await.js\n  each,                                      // dom/blocks/each.js\n  html,                                      // dom/blocks/html.js\n  if as if_block,                            // dom/blocks/if.js\n  remove_input_attr_defaults, set_attribute, // dom/elements/attributes.js\n  delegate,                                  // dom/elements/events.js\n  child, sibling,                            // dom/operations.js\n  template, comment, append,                 // dom/template.js\n  derived,                                   // reactivity/deriveds.js\n  user_effect, render_effect,                // reactivity/effects.js\n  rest_props, spread_props, prop,            // reactivity/props.js\n  source, mutate, set,                       // reactivity/sources.js\n  set_text, append_styles,                   // render.js\n  get, push, pop,                            // runtime.js\n} from 'svelte/internal/client';\n\nimport {\n  mount, unmount,                            // render.js\n} from 'svelte';\n\nconst getter = (value) => {\n  return () => value;\n};\n\nconst set_getter = (object, key, get) => {\n  Object.defineProperty(object, key, { get });\n};\n\nconst set_property = (object, key, value) => {\n  object[key] = value;\n};\n\nexport default {\n  getter, set_getter, set_property,\n\n  await_block,\n  each,\n  html,\n  if_block,\n  remove_input_attr_defaults, set_attribute,\n  delegate,\n  child, sibling,\n  template, comment, append,\n  derived,\n  user_effect, render_effect,\n  rest_props, spread_props, prop,\n  source, mutate, set,\n  set_text, mount, unmount, append_styles,\n  get, push, pop,\n\n};\n"],"names":["source","derived","effect","sibling","current_effect","child","html","events","unmount","create_effect","i","flags","item","_a","getter","get"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]}